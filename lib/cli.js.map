{"version":3,"file":"cli.js","sources":["../src/core/parcel/index.ts","../src/types.ts","../src/utils/file.ts","../src/utils/installImport.ts","../src/utils/async-observable.ts","../src/utils/async-filter.ts","../src/utils/flatted.ts","../src/runtimes/chrome.ts","../src/runtimes/index.ts","../src/core/preprocessor.ts","../src/core/test.ts","../src/core/analyzer.ts","../src/core/index.ts","../src/reporters/cli/file.jsx","../src/reporters/cli/reporter.tsx","../src/reporters/cli/index.tsx","../src/server/index.ts","../src/cli/index.ts"],"sourcesContent":["import path from 'path'\r\n\r\nimport { Observable } from 'rxjs'\r\nimport ParcelBundler from 'parcel-bundler'\r\n\r\nimport { Bundler } from '../../types.ts'\r\n\r\nexport default (options = undefined): Bundler =>\r\n  Observable.create(observer => {\r\n    const bundler = new ParcelBundler(options.entryFiles, options)\r\n\r\n    bundler.addAssetType('js', path.resolve(__dirname, '../src/core/parcel/js-asset.js'))\r\n    bundler.addAssetType('ts', path.resolve(__dirname, '../src/core/parcel/ts-asset.js'))\r\n\r\n    bundler.on('bundled', bundle =>\r\n      observer.next({ name: 'bundled', parcelBundle: bundle, buildEndTime: Date.now() }))\r\n    bundler.on('buildStart', entryFiles =>\r\n      observer.next({ name: 'buildStart', entryFiles, buildStartTime: Date.now() }))\r\n    bundler.on('buildEnd', () =>\r\n      observer.next({ name: 'buildEnd' }))\r\n\r\n    const emitError = err => observer.error(err)\r\n    bundler.on('buildError', emitError)\r\n    bundler\r\n      .bundle()\r\n      .catch(emitError)\r\n\r\n    return () =>\r\n      bundler\r\n        .stop()\r\n        .catch(emitError)\r\n  })\r\n","\r\nimport { Observable, Subject } from 'rxjs'\r\nimport { ParcelBundle } from 'parcel-bundler'\r\nimport { CoverageEntry, ElementHandle } from 'puppeteer'\r\n\r\n// Subject that is sent data from the tester to the runtime\r\nexport const EPK_SUBJECT = '__EPK__SUBJECT__'\r\n// Subject that is sent data from the runtime to the tester\r\nexport const EPK_RUNTIME_SUBJECT = '__EPK__RUNTIME__SUBJECT__'\r\nexport const EPK_FUNCTION_PROPERTY_PLACEHOLDER = '__EPK__FUNCTION__PLACEHOLDER__'\r\n\r\nexport interface Bundler extends Observable<any> {}\r\n\r\n// Going to change when Parcel 2 get released\r\nexport interface Options {\r\n  outDir: string\r\n  entryFiles: string | string[]\r\n  target: TARGET\r\n  watch?: boolean\r\n  browsers?: BROWSER[]\r\n  port?: number\r\n}\r\n\r\nexport interface installImportOptions {\r\n  path: string\r\n  dev: boolean\r\n}\r\n\r\nexport interface TestBundle {\r\n  /**\r\n   * Parcel bundle\r\n   */\r\n  parcelBundle: ParcelBundle\r\n  /**\r\n   * Entry files\r\n   */\r\n  entryFiles: string[]\r\n  /**\r\n   * Time at which the bundling started(high precision timestamp)\r\n   */\r\n  buildStartTime: number\r\n  /**\r\n   * Time at which the bundling ended(high precision timestamp)\r\n   */\r\n  buildEndTime: number\r\n}\r\n\r\n/**\r\n * Representation of a file\r\n */\r\nexport interface TestFile {\r\n  /**\r\n   * Bundle\r\n   */\r\n  bundle: TestBundle\r\n  /**\r\n   * Hashes of all the parcel assets\r\n   */\r\n  hashes: Set<string>,\r\n  /**\r\n   * Path of the source test file\r\n   */\r\n  name: string\r\n  /**\r\n   * Path of the bundled test file\r\n   */\r\n  path: string\r\n  /**\r\n   * Target\r\n   */\r\n  target: TARGET | RUNTIME\r\n  /**\r\n   * Url by which browsers can access the test file\r\n   * Not defined if target is node\r\n   */\r\n  url?: string\r\n  /**\r\n   * Array of analyzed tests\r\n   */\r\n  tests?: Test[] | undefined\r\n  /**\r\n   * Array of logs logged without running the tests\r\n   */\r\n  logs?: Log[]\r\n  /**\r\n   * Time at which the test preprocessing started(high precision timestamp)\r\n   */\r\n  preprocessingStart?: number\r\n  /**\r\n   * Time at which the test preprocessing ended(high precision timestamp)\r\n   */\r\n  preprocessingEnd?: number\r\n}\r\n\r\n/**\r\n * Representation of a test\r\n */\r\nexport interface Test {\r\n  /**\r\n   * Description of the test\r\n   */\r\n  description: string\r\n  /**\r\n   * Body of the test (Stringified function)\r\n   */\r\n  body: string\r\n  /**\r\n   * String type of test: Function | Promise<any> | Observable<any>\r\n   */\r\n\r\n  //** Properties from the test when executed\r\n  \r\n  type?: string\r\n  /**\r\n   * Flatted(https://github.com/WebReflection/flatted) value returned by the test\r\n   */\r\n  value?: any\r\n  /**\r\n   * Array of logs logged while running the test\r\n   */\r\n  logs?: Log[]\r\n  /**\r\n   * Time at which the test started(high precision timestamp)\r\n   */\r\n  executionStart?: number\r\n  /**\r\n   * Time at which the test ended(high precision timestamp)\r\n   */\r\n  executionEnd?: number\r\n  /**\r\n   * Code coverage of the test\r\n   * Can be undefined if environment doesn't support native Coverage (in browser)\r\n   * todo: think of using instanbul for in browser coverage when parcel v2 will be released\r\n   */\r\n  coverage?: CoverageEntry\r\n\r\n  //** Properties from the test when analyzed\r\n  /**\r\n   * Percent of code run by the test from the file\r\n   */\r\n  codeCoverage?: number\r\n  /**\r\n   * Time at which the test analyze started(high precision timestamp)\r\n   */\r\n  analyzeStart?: number\r\n  /**\r\n   * Time at which the test analyze ended(high precision timestamp)\r\n   */\r\n  analyzeEnd?: number\r\n}\r\n\r\nexport interface Analyze {\r\n\r\n}\r\n\r\nexport enum MESSAGE {\r\n  GET_TESTS,\r\n  GET_TESTS_RESPONSE,\r\n  \r\n  RUN_TESTS,\r\n  RUN_TESTS_RESPONSE,\r\n\r\n  RUN_TEST,\r\n  RUN_TEST_RESPONSE\r\n}\r\n\r\nconst messageMap = new Map<MESSAGE, MESSAGE>([\r\n  [MESSAGE.GET_TESTS, MESSAGE.GET_TESTS_RESPONSE],\r\n  [MESSAGE.RUN_TESTS, MESSAGE.RUN_TESTS_RESPONSE],\r\n  [MESSAGE.RUN_TEST, MESSAGE.RUN_TEST_RESPONSE]\r\n])\r\n\r\nexport const getMessageResponse = message => messageMap.get(message)\r\n\r\n// https://github.com/parcel-bundler/parcel/issues/2574#issuecomment-459694774\r\nexport enum PARCEL_REPORTER_EVENT {\r\n  BUILD_START = 'buildStart',\r\n  BUILD_PROGRESS = 'buildProgress',\r\n  BUILD_SUCCESS = 'buildSuccess',\r\n  BUILD_FAILURE = 'buildFailure',\r\n  LOG = 'log'\r\n}\r\n\r\nexport enum REPORTER_EVENT {\r\n  BUILD_START = 'buildStart',\r\n  BUILD_PROGRESS = 'buildProgress',\r\n  BUILD_SUCCESS = 'buildSuccess',\r\n  BUILD_FAILURE = 'buildFailure',\r\n  LOG = 'log',\r\n  PORT_SEARCH = 'portSearch',\r\n  PORT_FOUND = 'portFound',\r\n  WEB_SERVER_START = 'webServerStart',\r\n  WEB_SERVER_READY = 'webServerReady',\r\n  STATE = 'state'\r\n}\r\n\r\nexport enum TARGET {\r\n  BROWSER = 'browser',\r\n  NODE = 'node'\r\n}\r\n\r\nexport enum BROWSER {\r\n  FIREFOX = 'firefox',\r\n  FIREFOX_NIGHTLY = 'firefoxNightly',\r\n  CHROME = 'chrome',\r\n  CHROME_CANARY = 'chromeCanary'\r\n}\r\n\r\nexport enum RUNTIME {\r\n  FIREFOX = 'firefox',\r\n  FIREFOX_NIGHTLY = 'firefoxNightly',\r\n  CHROME = 'chrome',\r\n  CHROME_CANARY = 'chromeCanary',\r\n  NODE = 'node'\r\n}\r\n\r\nexport interface RuntimeProvider extends Observable<Runtime> {\r\n  runtimeName: RUNTIME\r\n}\r\n\r\nexport interface Runtime extends Observable<any> {\r\n  loadFile(file: TestFile): Promise<ElementHandle>\r\n  inMessages: Subject<any>\r\n  outMessages: Subject<any>\r\n}\r\n\r\nexport enum LOG {\r\n  log = 'log',\r\n  info = 'info',\r\n  warn = 'warn',\r\n  error = 'error',\r\n  uncaughtError = 'uncaughtError'\r\n}\r\n\r\nexport interface MetaStack {\r\n  file: string\r\n  source: string\r\n  name: string\r\n  line: number\r\n  column: number\r\n  originalSource: string\r\n  originalName: string\r\n  originalLine: number\r\n  originalColumn: number\r\n}\r\n\r\nexport interface Error {\r\n  message: string\r\n  name: string\r\n  stack: string\r\n  string: string\r\n  metaStack?: MetaStack[]\r\n  originalStack?: string\r\n}\r\n\r\nexport interface Log {\r\n  type: LOG\r\n  arguments?: any[]\r\n  error?: Error\r\n}\r\n","\r\nimport fs from 'fs'\r\nimport path from 'path'\r\nimport { promisify } from 'util'\r\n\r\nconst _access = promisify(fs.access)\r\n\r\nexport const cwd = process.cwd()\r\n\r\nexport const access =\r\n  (filename, _path = '') =>\r\n    _access(path.resolve(_path, filename), fs.constants.F_OK)\r\n      .then(\r\n        () => true,\r\n        () => false)\r\n\r\nexport const prettifyPath = _path => path.relative(cwd, _path)\r\n\r\nexport const getEmptyPageUrl = port =>\r\n  pathToEpkUrl(path.resolve(__dirname, '..', 'dist', 'empty.html'), port)\r\n\r\nexport const pathToTestUrl = (_path, { outDir = '.epk', port = undefined }) =>\r\n  `${port ? `http://localhost:${port}` : ''}${path.normalize(_path).replace(`${path.resolve(cwd, outDir, 'dist')}${path.sep}`, '/tests/').replace(path.sep, '/')}`\r\n\r\nexport const pathToEpkUrl = (_path, { port }) =>\r\n  `${port ? `http://localhost:${port}` : ''}${path.normalize(_path).replace(`${path.resolve(__dirname, '..', 'lib')}${path.sep}`, '/epk/').replace(path.sep, '/')}`\r\n","import set from 'core-js/features/set'\r\n\r\nimport fs from 'fs'\r\nimport path from 'path'\r\nimport { promisify } from 'util'\r\nimport { spawn } from 'child_process'\r\nimport { builtinModules } from 'module'\r\n\r\nimport { Observable, Subject, from } from 'rxjs'\r\nimport { shareReplay, filter, bufferTime, mergeMap, skip, switchMap, take } from 'rxjs/operators'\r\n// import rxjs from 'rxjs'\r\n// import rxjsOperators from 'rxjs/operators'\r\n\r\nimport { cwd, access } from './file.ts'\r\nimport { installImportOptions } from '../types.ts'\r\n\r\n// const { Observable, Subject, from } = rxjs\r\n// const { shareReplay, filter, bufferTime, mergeMap, skip } = rxjsOperators\r\n\r\nconst readFile = promisify(fs.readFile)\r\nconst writeFile = promisify(fs.writeFile)\r\n\r\nexport const getClosestPackageJSONDirPath =\r\n\t(_path: string = undefined, _cwd: string = cwd) =>\r\n\t\taccess('package.json', _path || _cwd)\r\n\t\t\t.then(access => {\r\n\t\t\t\tif (access) return _path || _cwd\r\n\t\t\t\tconst parentPath = path.resolve('..', _path)\r\n\t\t\t\treturn parentPath === _cwd\r\n\t\t\t\t\t? undefined\r\n\t\t\t\t\t: getClosestPackageJSONDirPath(parentPath)\r\n\t\t\t})\r\n\r\n/**\r\n * \r\n * @param path Package.json path\r\n * @returns Promise of a dependency and devDependency Set tuple\r\n */\r\nexport const getDependencies =\r\n\t(path: string): Promise<[Set<string>, Set<string>]> =>\r\n\t\treadFile(path, 'utf8')\r\n\t\t\t.then(\r\n\t\t\t\tdata => data,\r\n\t\t\t\terr => // If package.json doesn't exist, create an empty one\r\n\t\t\t\t\terr.code === 'ENOENT' &&\r\n\t\t\t\t\twriteFile(path, '{}')\r\n\t\t\t\t\t\t.then(() => '{}'))\r\n\t\t\t.then(data =>\r\n\t\t\t\tJSON.parse(data))\r\n\t\t\t.then(({ dependencies, devDependencies }) => [\r\n\t\t\t\t\tnew Set<string>([...builtinModules, ...Object.keys(dependencies)]),\r\n\t\t\t\t\tnew Set<string>([...builtinModules, ...Object.keys(devDependencies)])\r\n\t\t\t\t])\r\n\r\n// const installPackages = (dependencies: string[], { path, dev, yarn }: { path: string, dev: boolean, yarn: boolean }) =>\r\n// \tObservable.create(observer => {\r\n// \t\tconst child = spawn(\r\n// \t\t\tyarn ? 'yarn' : 'npm',\r\n// \t\t\t[\r\n// \t\t\t\tyarn ? 'add' : 'install',\r\n// \t\t\t\t...dependencies.map(name =>\r\n// \t\t\t\t\t\tname\r\n// \t\t\t\t\t\t\t.split('/')\r\n// \t\t\t\t\t\t\t.shift()),\r\n// \t\t\t\t...dev && [yarn ? '-D': '--save-dev']\r\n// \t\t\t],\r\n// \t\t\t{\r\n// \t\t\t\tcwd: path,\r\n// \t\t\t\tstdio: 'inherit', // needed to get the colors and stream writes\r\n// \t\t\t\tshell: process.platform === 'win32' // needed for windows\r\n// \t\t\t})\r\n// \t\t// If stdio is inherit, comment the data listeners\r\n// \t\t// child.stdout.on('data', data => observer.next(data.toString('utf8')))\r\n// \t\t// child.stderr.on('data', data => observer.error(data.toString('utf8')))\r\n// \t\tchild.on('close', () => observer.complete())\r\n// \t\treturn () => child.kill()\r\n// \t})\r\n// console.log(spawn('yarn -v'))\r\nconst installPackages = (dependencies: string[], { path, dev, yarn }: { path: string, dev: boolean, yarn: boolean }) =>\r\n\tnew Promise(resolve => {\r\n\t\tconst child = spawn(\r\n\t\t\tyarn ? 'yarn' : 'npm',\r\n\t\t\t[\r\n\t\t\t\tyarn ? 'add' : 'install',\r\n\t\t\t\t...dependencies.map(name =>\r\n\t\t\t\t\t\tname\r\n\t\t\t\t\t\t\t.split('/')\r\n\t\t\t\t\t\t\t.shift()),\r\n\t\t\t\t...dev ? [yarn ? '-D': '--save-dev'] : []\r\n\t\t\t],\r\n\t\t\t{\r\n\t\t\t\tcwd: path,\r\n\t\t\t\tstdio: 'inherit', // needed to get the colors and stream writes\r\n\t\t\t\tshell: process.platform === 'win32' // needed for windows\r\n\t\t\t}\r\n\t\t\t)\r\n\t\t// If stdio is inherit, comment the data listeners\r\n\t\t// child.stdout.on('data', data => observer.next(data.toString('utf8')))\r\n\t\t// child.stderr.on('data', data => observer.error(data.toString('utf8')))\r\n\t\tchild.on('close', () => resolve())\r\n\t})\r\n\r\nconst importModules =\r\n\t(names: string[]) =>\r\n\t\tPromise\r\n\t\t\t.all(\r\n\t\t\t\tnames.map(name =>\r\n\t\t\t\t\timport(name)))\r\n\r\nconst packageObservable = async (path: string): Promise<Function> => {\r\n\tconst packagePath = await getClosestPackageJSONDirPath(path)\r\n\tconst yarn = await access('yarn.lock', packagePath)\r\n\tconst [ dependencies, devDependencies ] = await getDependencies(`${path}/package.json`)\r\n\t// const [ seenDep, seenDevDep ] = [new Set(), new Set()]\r\n\tconst [ queuedDeps, queuedDevDeps ] = [new Set<string>(), new Set<string>()]\r\n\tlet pending: Promise<string[]> = Promise.resolve([])\r\n\r\n\tconst run = async (modules: string[], dev: boolean) => {\r\n\t\tconst deps = dev ? devDependencies : dependencies\r\n\t\tconst qDeps = dev ? queuedDevDeps : queuedDeps\r\n\r\n\t\tfor (const name of modules) qDeps.add(name)\r\n\r\n\t\tconst allCurrentModules = [...devDependencies, ...dependencies]\r\n\t\tif (!modules.some(name => !allCurrentModules.includes(name))) return importModules(modules)\r\n\r\n\t\ttry {\r\n\t\t\tawait pending\r\n\t\t} finally {\r\n\t\t\tconst names = Array.from(qDeps)\r\n\t\t\tawait installPackages(names, { path, dev, yarn })\r\n\r\n\t\t\tfor (const name of names) deps.add(name)\r\n\t\t\tfor (const name of names) qDeps.delete(name)\r\n\r\n      return importModules(modules)\r\n\t\t}\r\n\t}\r\n\t\r\n\r\n\treturn (modules: string[], dev: boolean = false) => (pending = run(modules, dev))\r\n\r\n\tconst [ depQueue, devDepQueue ] =\r\n\t\t[new Subject(), new Subject()]\r\n\t\t\t.map((subject, dev) =>\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tsubject\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\t|> filter((names: string[]) => {\r\n\t\t\t\t\tconst seenDeps = dev ? seenDevDep : seenDep\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\treturn Array.from(\r\n\t\t\t\t\t\t\tseenDeps\r\n\t\t\t\t\t\t\t\t.difference(names))\r\n\t\t\t\t\t\t\t\t.flat(Infinity)\r\n\t\t\t\t\t} finally {\r\n\t\t\t\t\t\tfor (const name of names) seenDeps.add(name)\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\t|> bufferTime(50)\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\t|> filter(arr => arr.length))\r\n\r\n\tconst [ depUpdate, devDepUpdate ] =\r\n\t\t[depQueue, devDepQueue]\r\n\t\t\t.map((obs, dev) =>\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tobs\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\t|> mergeMap(async (names: string[]) => {\r\n\t\t\t\t\tconst deps = dev ? devDependencies : dependencies\r\n\r\n\t\t\t\t\tawait installPackages(names, { path, dev, yarn }).toPromise()\r\n\r\n\t\t\t\t\tfor (const name of names) deps.add(name)\r\n\r\n\t\t\t\t\treturn from(names)\r\n\t\t\t\t})\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\t|> shareReplay())\r\n\r\n\t// @ts-ignore\r\n\tdepUpdate.subscribe()\r\n\t// @ts-ignore\r\n\tdevDepUpdate.subscribe()\r\n\r\n\treturn (modules, dev) =>\r\n\t\tnew Promise((resolve, reject) => {\r\n\t\t\tif (typeof modules === 'string') modules = [modules]\r\n\t\t\tconst deps = dev ? devDependencies : dependencies\r\n\t\t\tconst queue = dev ? devDepQueue : depQueue\r\n\t\t\tconst depsUpdate = dev ? devDepUpdate : depUpdate\r\n\r\n\t\t\tconst missingDeps =\r\n\t\t\t\tnew Set(\r\n\t\t\t\t\tmodules.map(name =>\r\n\t\t\t\t\t\tname\r\n\t\t\t\t\t\t\t.split('/')\r\n\t\t\t\t\t\t\t.shift()))\r\n\t\t\t\t\t\t\t.difference(deps)\r\n\t\t\t\r\n\t\t\tif (missingDeps.size) {\r\n\t\t\t\tconst obs =\r\n\t\t\t\t\tdepsUpdate\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t|> switchMap(obs => obs)\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t|> filter(name => missingDeps.has(name))\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t|> skip(missingDeps.size - 1)\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t|> take(1)\r\n\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tobs.subscribe(() => resolve(importModules(modules)))\r\n\t\t\t\t\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tfor (const name of missingDeps) queue.next(name)\r\n\r\n\t\t\t} else {\r\n\t\t\t\tresolve(importModules(modules))\r\n\t\t\t}\r\n\t\t})\r\n}\r\n\r\nconst packages = new Map<string, Function>()\r\n\r\nconst getPackage = async (path: string) =>\r\n\tpackages.has(path)\r\n\t\t? packages.get(path)\r\n\t\t: packages\r\n\t\t\t.set(path, await packageObservable(path))\r\n\t\t\t.get(path)\r\n\r\nexport default async (names: string | string[], options?: installImportOptions) =>\r\n\tgetPackage(options?.path || await getClosestPackageJSONDirPath())\r\n\t\t.then(getPackage =>\r\n\t\t\tgetPackage(Array.isArray(names) ? names : [names], options?.dev))\r\n\t\t.then(packages =>\r\n\t\t\tArray.isArray(names)\r\n\t\t\t\t? packages\r\n\t\t\t\t: packages[0])\r\n","import { Observable } from 'rxjs'\r\n\r\nexport default <T>(func: Function): Observable<T> =>\r\n  Observable.create(observer => {\r\n    const unsubscribe = func(observer)\r\n    return async () => (await unsubscribe)?.()\r\n  })\r\n","import { mergeMap } from 'rxjs/operators'\r\nimport asyncObservable from './async-observable.ts'\r\n\r\nexport default mergeMap(_value =>\r\n  asyncObservable(async observer => {\r\n    const value = await _value\r\n    if (value) observer.next(value)\r\n  }))","import { stringify as _stringify, parse as _parse } from 'flatted'\r\n\r\nimport { EPK_FUNCTION_PROPERTY_PLACEHOLDER } from '../types.ts'\r\n\r\nexport const stringify = data =>\r\n  _stringify(\r\n    data,\r\n    (key, val) =>\r\n      typeof val === 'function'\r\n        ? {\r\n          [EPK_FUNCTION_PROPERTY_PLACEHOLDER]: val.name\r\n        }\r\n        : val)\r\n\r\nexport const parse = data =>\r\n  _parse(\r\n    data,\r\n    (_, val) =>\r\n      val?.[EPK_FUNCTION_PROPERTY_PLACEHOLDER]\r\n        // Way to dynamically set a function name (to render via `util.inspect` from the reporter)\r\n        ? {\r\n          [val[EPK_FUNCTION_PROPERTY_PLACEHOLDER]]: () => {}\r\n        }[val[EPK_FUNCTION_PROPERTY_PLACEHOLDER]]\r\n        : val)","import path from 'path'\r\n\r\nimport { installImport, Observable as AsyncObservable, pathToEpkUrl } from '../utils/index.ts'\r\nimport { TestFile, EPK_SUBJECT, EPK_RUNTIME_SUBJECT } from '../types.ts'\r\nimport { ReplaySubject, Subject } from 'rxjs'\r\nimport { stringify, parse } from '../utils/index.ts'\r\n\r\nlet pptr\r\n\r\nexport default ({ port }) =>\r\n  AsyncObservable(async observer => {\r\n    if (!pptr) pptr = await installImport('puppeteer')\r\n\r\n    const rootBrowser = await pptr.launch({ devtools: true })\r\n\r\n    observer.next(\r\n      AsyncObservable(async observer => {\r\n        const emptyHTMLFilePath = path.resolve(__dirname, '..', 'lib', 'empty.html')\r\n        const emptyPageUrl = pathToEpkUrl(emptyHTMLFilePath, { port })\r\n\r\n        const browser = await rootBrowser.createIncognitoBrowserContext()\r\n        const page = await browser.newPage()\r\n        \r\n        const inMessages = new ReplaySubject()\r\n        page.exposeFunction(\r\n          EPK_RUNTIME_SUBJECT,\r\n          value => inMessages.next(parse(value))\r\n        )\r\n\r\n        let subjectHandle\r\n\r\n        const outMessages = new Subject()\r\n        outMessages.subscribe(value =>\r\n          page.evaluate(\r\n            (subject, value) => subject.next(value),\r\n            subjectHandle,\r\n            stringify(value)\r\n          )\r\n        )\r\n\r\n        observer.next({\r\n          inMessages,\r\n          outMessages,\r\n          loadFile: async (testFile: TestFile) => {\r\n            await page.goto(emptyPageUrl)\r\n            await page.addScriptTag({ url: testFile.url })\r\n            subjectHandle = await page.evaluateHandle(\r\n              (subjectGlobalProperty) => globalThis[subjectGlobalProperty],\r\n              EPK_SUBJECT\r\n            )\r\n          }\r\n        })\r\n\r\n        return () => page.close()\r\n      })\r\n    )\r\n\r\n    return () => rootBrowser.close()\r\n  })\r\n\r\n  // Observable.create(observer => {\r\n  //   if (!pptr) installImport('puppeteer').then(_pptr => pptr = _pptr)\r\n\r\n  //   const browser = pptr.then(pptr => pptr.launch({ devtools: true }))\r\n\r\n  //   browser.then(browser =>\r\n  //     observer.next(Observable.create(observer => {\r\n  //       const page = browser.newPage()\r\n  //       const emptyHTMLFilePath = path.resolve(__dirname, '..', 'dist', 'empty.html')\r\n  //       const url = transformPathToEpkUrl(emptyHTMLFilePath, options.port)\r\n  //       page.then(page => {\r\n  //         observer.next({\r\n  //           loadFile: file => page.goto(url).then(() => page.addScriptTag({ url: file.url })),\r\n  //           exec: str => page.evaluate(str)\r\n  //         })\r\n  //       })\r\n  //       return () =>\r\n  //         page.then(page =>\r\n  //           page.close())\r\n  //     })))\r\n\r\n  //   return () =>\r\n  //     browser.then(browser =>\r\n  //       browser.close())\r\n  // })\r\n","import { RUNTIME, RuntimeProvider } from '../types.ts'\r\n\r\nimport chrome from './chrome.ts'\r\nimport { map } from 'rxjs/operators'\r\nimport { Observable } from 'rxjs'\r\n\r\nconst runtimeMap = new Map<RUNTIME, (...args) => Observable<RuntimeProvider>>([\r\n  [RUNTIME.CHROME, chrome]\r\n])\r\n\r\nfor (const [runtimeName, runtime] of runtimeMap) {\r\n  runtimeMap.set(\r\n    runtimeName,\r\n    (...args) =>\r\n      // @ts-ignore\r\n      runtime(...args)\r\n      // @ts-ignore\r\n      |> map((provider: RuntimeProvider) => {\r\n        provider.runtimeName = runtimeName\r\n        return provider\r\n      }))\r\n\r\n  runtimeMap.get(runtimeName).runtimeName = runtimeName\r\n}\r\n\r\nexport default (runtime: RUNTIME) =>\r\nruntimeMap.get(runtime)\r\n","import { performance } from 'perf_hooks'\r\n\r\nimport { OperatorFunction } from 'rxjs'\r\nimport {\r\n  map,\r\n  scan,\r\n  skip,\r\n  take,\r\n  pluck,\r\n  filter,\r\n  mergeMap,\r\n  startWith,\r\n  takeUntil,\r\n  combineLatest,\r\n} from 'rxjs/operators'\r\n\r\nimport { MESSAGE, TestFile, Runtime } from '../types.ts'\r\nimport { Observable as AsyncObservable } from '../utils/index.ts'\r\n\r\nexport default (testFile: TestFile): OperatorFunction<Runtime, TestFile> =>\r\n  mergeMap(({ loadFile, inMessages, outMessages }: Runtime) =>\r\n    AsyncObservable<TestFile>(async observer => {\r\n      const preprocessingStart = performance.now()\r\n      await loadFile(testFile)\r\n\r\n      const tests =\r\n        // @ts-ignore\r\n        inMessages\r\n        // @ts-ignore\r\n        |> filter(({ type }) => type === MESSAGE.GET_TESTS_RESPONSE)\r\n        // @ts-ignore\r\n        |> pluck('tests')\r\n        // @ts-ignore\r\n        |> take(1)\r\n        // @ts-ignore\r\n        |> startWith(undefined)\r\n\r\n      const logs =\r\n        // @ts-ignore\r\n        inMessages\r\n        // @ts-ignore\r\n        |> takeUntil(tests |> skip(1))\r\n        // @ts-ignore\r\n        |> filter(({ type }) => type === MESSAGE.LOG)\r\n        // @ts-ignore\r\n        |> pluck('log')\r\n        // @ts-ignore\r\n        |> scan((arr, log) => [...arr, log] , [])\r\n        // @ts-ignore\r\n        |> startWith([])\r\n\r\n      const result =\r\n        tests\r\n        // @ts-ignore\r\n        |> take(2)\r\n        // @ts-ignore\r\n        |> combineLatest(logs)\r\n        // @ts-ignore\r\n        |> map(([tests, logs]): TestFile => ({\r\n          bundle: testFile.bundle,\r\n          tests,\r\n          logs,\r\n          preprocessingStart,\r\n          preprocessingEnd: tests && performance.now()\r\n        }))\r\n\r\n      // @ts-ignore\r\n      result.subscribe(\r\n        analyzedTestFile => observer.next(analyzedTestFile),\r\n        err => observer.error(err),\r\n        () => observer.complete()\r\n      )\r\n\r\n      outMessages.next({ type: MESSAGE.GET_TESTS })\r\n    })\r\n  )\r\n","import { from, OperatorFunction } from 'rxjs'\r\nimport { switchMap, mergeMap, take } from 'rxjs/operators'\r\n\r\nimport {\r\n  TargetRuntime,\r\n  MESSAGE,\r\n  Test,\r\n  EPK_FUNCTION_PROPERTY_PLACEHOLDER,\r\n  BROWSER,\r\n  AnalyzedTestFile,\r\n  TestResult,\r\n  RuntimeProvider,\r\n  Runtime,\r\n  TestFile\r\n} from '../types.ts'\r\nimport { parse, Observable as AsyncObservable } from '../utils/index.ts'\r\n\r\n\r\nexport default (test: Test): OperatorFunction<Runtime, TestResult> =>\r\n  mergeMap(({ loadFile, inMessages, outMessages }: Runtime) =>\r\n    AsyncObservable<TestResult>(async observer => {\r\n      await loadFile(test.testFile)\r\n\r\n      const tests =\r\n        // @ts-ignore\r\n        inMessages\r\n        // @ts-ignore\r\n        |> filter(({ type }) => type === MESSAGE.RUN_TEST_RESPONSE)\r\n        // @ts-ignore\r\n        |> pluck('test')\r\n        // @ts-ignore\r\n        |> take(1)\r\n        // @ts-ignore\r\n        |> startWith(undefined)\r\n\r\n      const logs =\r\n        // @ts-ignore\r\n        inMessages\r\n        // @ts-ignore\r\n        |> takeUntil(tests |> skip(1))\r\n        // @ts-ignore\r\n        |> filter(({ type }) => type === MESSAGE.LOG)\r\n        // @ts-ignore\r\n        |> pluck('log')\r\n        // @ts-ignore\r\n        |> scan((arr, log) => [...arr, log] , [])\r\n        // @ts-ignore\r\n        |> startWith([])\r\n\r\n      const result =\r\n        tests\r\n        // @ts-ignore\r\n        |> take(2)\r\n        // @ts-ignore\r\n        |> combineLatest(logs)\r\n        // @ts-ignore\r\n        |> map(([testResult, logs]): TestResult => ({\r\n          parcelBundle: test.parcelBundle,\r\n          bundle: test.bundle,\r\n          analyzedTestFile: test.analyzedTestFile,\r\n          test,\r\n          type: testResult?.type,\r\n          value: testResult?.value,\r\n          logs: logs,\r\n          timeStart: testResult?.timeStart,\r\n          timeEnd: testResult?.timeEnd\r\n        }))\r\n\r\n      // @ts-ignore\r\n      result.subscribe(\r\n        testResult => observer.next(testResult),\r\n        err => observer.error(err),\r\n        () => observer.complete()\r\n      )\r\n\r\n      outMessages.next({ type: MESSAGE.RUN_TEST, description: test.description })\r\n    }))\r\n","import fs from 'fs'\r\nimport Path from 'path'\r\nimport { promisify } from 'util'\r\n\r\nimport SourceMap from 'source-map'\r\nimport { mergeMap, switchMap } from 'rxjs/operators'\r\nimport { parse } from 'stacktrace-parser'\r\n\r\nimport { prettifyPath } from '../utils/index.ts'\r\nimport { TestError, TestResult } from '../types.ts'\r\n\r\nconst readFile = promisify(fs.readFile)\r\n\r\nconst makeStackLocation = ({ originalColumn, originalLine, source }) => `\\\r\n${source}:${originalLine}:${originalColumn}`\r\n\r\nconst makeStackLines = metaLine => `\\\r\nat ${metaLine.originalName ? `${metaLine.originalName} (${makeStackLocation(metaLine)})` : makeStackLocation(metaLine)}`\r\n\r\nconst makeStack = (error: TestError) => `\\\r\n${error.name}: ${error.message}\r\n\r\n${error\r\n    .metaStack\r\n    .map(makeStackLines)\r\n    .join('\\n')}\r\n`\r\n\r\nexport default () =>\r\n  mergeMap((testResult: TestResult) => {\r\n    const { test: { parcelBundle: { name: path } } } = testResult\r\n\r\n    \r\n\r\n    return\r\n  })","import { Observable, Subject, from, merge, of } from 'rxjs'\r\nimport { publish, switchMap, filter, map, tap, takeUntil, mergeMap, shareReplay, share, scan, takeWhile } from 'rxjs/operators'\r\n\r\nimport './polyfills.ts'\r\nimport Parcel from './parcel/index.ts'\r\nimport getRuntimeProvider from '../runtimes/index.ts'\r\nimport { REPORTER_EVENT, Options, TARGET, BROWSER, RUNTIME, TestFile, TestBundle, RuntimeProvider, Test } from '../types.ts'\r\nimport preprocessor from './preprocessor.ts'\r\nimport test from './test.ts'\r\nimport analyze from './analyzer.ts'\r\nimport { pathToTestUrl } from '../utils/index.ts'\r\n\r\nexport default\r\n  (options: Options) =>\r\n    Observable.create(observer => {\r\n      const { watch, target = TARGET.BROWSER, entryFiles, port, outDir = '.epk' } = options\r\n\r\n      const unsubscribe = new Subject()\r\n\r\n      const parcel =\r\n        // @ts-ignore\r\n        (Parcel({\r\n          entryFiles: entryFiles,\r\n          target: target,\r\n          outDir: `${outDir}/dist/${target}`,\r\n          watch: true,\r\n          cache: true,\r\n          cacheDir: `${outDir}/cache/${target}`\r\n        })\r\n        // @ts-ignore\r\n        |> takeUntil(unsubscribe)\r\n        // @ts-ignore\r\n        |> publish())\r\n          // @ts-ignore\r\n          .refCount()\r\n\r\n      // @ts-ignore\r\n      const bundle =\r\n        // @ts-ignore\r\n        parcel\r\n        // @ts-ignore\r\n        |> filter(({ name }) => name === 'buildStart')\r\n        // @ts-ignore\r\n        |> tap(() => observer.next({ type: REPORTER_EVENT.BUILD_START }))\r\n        // @ts-ignore\r\n        |> switchMap(({ entryFiles, buildStartTime }) =>\r\n          // @ts-ignore\r\n          parcel\r\n          // @ts-ignore\r\n          |> filter(({ name }) => name === 'bundled')\r\n          // @ts-ignore\r\n          |> tap(() => observer.next({ type: REPORTER_EVENT.BUILD_SUCCESS }))\r\n          // @ts-ignore\r\n          |> map(bundle => ({ ...bundle, entryFiles, buildStartTime })))\r\n        // @ts-ignore\r\n        |> shareReplay(1) // needed for slow runtimes to start working on initial bundle\r\n\r\n      const runtimeNames =\r\n        options.target === TARGET.NODE\r\n          ? [RUNTIME.NODE]\r\n          : options.browsers as unknown as RUNTIME[] || [RUNTIME.CHROME]\r\n\r\n      const runtimeProvider =\r\n        // @ts-ignore\r\n        from(\r\n          runtimeNames\r\n            .map(runtimeName => getRuntimeProvider(runtimeName))\r\n            .map(makeRuntimeProvider => makeRuntimeProvider(options)))\r\n        // @ts-ignore\r\n        |> mergeMap(runtimeProvider => runtimeProvider) // todo: check how to remove that\r\n        // @ts-ignore\r\n        |> takeUntil(unsubscribe)\r\n\r\n      const testFileCache = new Map<string, TestFile>()\r\n\r\n      // @ts-ignore\r\n      const tests =\r\n        // @ts-ignore\r\n        runtimeProvider\r\n        // @ts-ignore\r\n        |> mergeMap((runtimeProvider: RuntimeProvider) =>\r\n          bundle\r\n          // @ts-ignore\r\n          |> switchMap((testBundle: TestBundle): Observable<TestFile> => {\r\n            const { parcelBundle } = testBundle\r\n            const childBundles =\r\n              // @ts-ignore\r\n              parcelBundle.isEmpty\r\n                ? Array.from(parcelBundle.childBundles)\r\n                : [parcelBundle]\r\n\r\n            const testFiles =\r\n              childBundles.map(({ name: path, entryAsset: { name }}): TestFile => ({\r\n                bundle: testBundle,\r\n                hashes: new Set(\r\n                  Array.from(\r\n                    testBundle.parcelBundle.assets,\r\n                    asset => asset.hash\r\n                  )\r\n                ),\r\n                name,\r\n                path,\r\n                url:\r\n                  TARGET.BROWSER === target &&\r\n                  pathToTestUrl(path, options),\r\n                target: runtimeProvider.runtimeName\r\n              }))\r\n\r\n            // @ts-ignore\r\n            return from(testFiles)\r\n              // @ts-ignore\r\n              |> mergeMap((testFile: TestFile) => {\r\n                // filename\r\n                const { name } = testFile\r\n\r\n                // todo: load file from on drive cache\r\n                // cached state of this file\r\n                const cachedTestFile =\r\n                  testFileCache.get(name) ||\r\n                  testFileCache\r\n                    .set(name, {...testFile, hashes: new Set()})\r\n                    // .set(name, testFile)\r\n                    .get(name)\r\n\r\n                const hashDifference = testFile.hashes.difference(cachedTestFile.hashes)\r\n\r\n                const updateCache =\r\n                  tap((test: Test) => {\r\n                    // replace the unexecuted test by the executed one\r\n                    const cachedTestFile = testFileCache.get(name)\r\n                    cachedTestFile.tests =\r\n                      cachedTestFile.tests.map(_test =>\r\n                        _test.description === test.description\r\n                          ? test\r\n                          : _test)\r\n                  })\r\n\r\n                // Get metadata about the needed test files\r\n                const preprocessed =\r\n                  // @ts-ignore\r\n                  of(testFile)\r\n                  // @ts-ignore\r\n                  |> filter(() => hashDifference.size)\r\n                  // @ts-ignore\r\n                  |> switchMap((testFile: TestFile) =>\r\n                    // @ts-ignore\r\n                    runtimeProvider\r\n                    // @ts-ignore\r\n                    |> preprocessor(testFile)\r\n                    // @ts-ignore\r\n                    |> takeWhile(({ preprocessingEnd }) => !preprocessingEnd, true)\r\n                  )\r\n                  // @ts-ignore\r\n                  |> tap(testFile => testFileCache.set(name, testFile))\r\n                  // @ts-ignore\r\n                  |> share()\r\n\r\n                const tested =\r\n                  // @ts-ignore\r\n                  merge(\r\n                    preprocessed\r\n                    // @ts-ignore\r\n                    |> filter(({ preprocessingEnd }) => preprocessingEnd),\r\n                    // @ts-ignore\r\n                    of(cachedTestFile)\r\n                    // @ts-ignore\r\n                    |> filter(() => !hashDifference.size)\r\n                  )\r\n                  // @ts-ignore\r\n                  |> switchMap((testFile: TestFile) =>\r\n                    // @ts-ignore\r\n                    from(testFile.tests)\r\n                    // @ts-ignore\r\n                    |> mergeMap((_test: Test) =>\r\n                      // test hasn't changed and is in the cache\r\n                      (!hashDifference.size &&\r\n                      cachedTestFile.tests.find((test) =>\r\n                        test.description === _test.description &&\r\n                        'executionEnd' in test)) ||\r\n                      // test has changed or wasn't in the cache\r\n                      // @ts-ignore\r\n                      runtimeProvider\r\n                      // @ts-ignore\r\n                      |> test(_test)\r\n                      // @ts-ignore\r\n                      |> takeWhile(({ executionEnd }) => !executionEnd, true)\r\n                    )\r\n                  )\r\n                  // @ts-ignore\r\n                  |> updateCache\r\n                  // @ts-ignore\r\n                  |> share()\r\n      \r\n                const analyzed =\r\n                  // @ts-ignore\r\n                  merge(\r\n                    tested,\r\n                    // @ts-ignore\r\n                    of(cachedTestFile)\r\n                    // @ts-ignore\r\n                    |> filter(() => !hashDifference.size)\r\n                    // @ts-ignore\r\n                    |> mergeMap(({ tests }) => from(tests))\r\n                  )\r\n                  // @ts-ignore\r\n                  |> mergeMap((test: Test) =>\r\n                    // test hasn't changed and is in the cache\r\n                    (!hashDifference.size &&\r\n                      cachedTestFile.tests.find((test) =>\r\n                        test.description === _test.description &&\r\n                        'analyzeEnd' in test)) ||\r\n                    // @ts-ignore\r\n                    runtimeProvider\r\n                    // @ts-ignore\r\n                    |> analyze(test)\r\n                    // @ts-ignore\r\n                    |> takeWhile(({ analyzeEnd }) => !analyzeEnd, true)\r\n                  )\r\n                  // @ts-ignore\r\n                  |> updateCache\r\n\r\n                // @ts-ignore\r\n                return merge(\r\n                  of(hashDifference.size ? testFile : cachedTestFile),\r\n                  preprocessed,\r\n                  tested,\r\n                  analyzed\r\n                )\r\n                // @ts-ignore\r\n                |> map(() => testFileCache.get(name))\r\n              })\r\n              // @ts-ignore\r\n              |> scan(\r\n                (testFiles, testFile: TestFile) => testFiles.set(testFile.name, testFile),\r\n                new Map<string, TestFile>()\r\n              )\r\n              // @ts-ignore\r\n              |> map(testFiles => [\r\n                runtimeProvider.runtimeName,\r\n                testFiles\r\n              ])\r\n          })\r\n        )\r\n        // @ts-ignore\r\n        // |> scan((runtimes, [runtime, fileTests]) =>\r\n        //   runtimes.has(runtime)\r\n        //     ? runtimes.get(runtime)\r\n        //     : undefined\r\n        // )\r\n        // @ts-ignore\r\n        |> map(runtimes => ({\r\n          type: REPORTER_EVENT.STATE,\r\n          runtimes\r\n        }))\r\n\r\n      // @ts-ignore\r\n      tests.subscribe(\r\n        value => observer.next(value),\r\n        error => observer.error(error),\r\n        () => observer.complete()\r\n      )\r\n\r\n      return () => {\r\n        unsubscribe.next()\r\n        unsubscribe.complete()\r\n      }\r\n    })\r\n","\r\n\r\nexport default file =>\r\n  <Box>\r\n    {file.name}\r\n  </Box>","import { Text, Box, Color } from 'ink'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { TestResult } from '../../types.ts'\r\nimport File from './file.jsx'\r\n\r\ninterface State {\r\n  files: TestResult[]\r\n}\r\n\r\nexport default ({ subject }) => {\r\n  const [state, setState] = useState<State>({\r\n    files: []\r\n  })\r\n  const [error, setError] = useState<Error>()\r\n\r\n  useEffect(() => {\r\n    const subscription =\r\n      subject.subscribe(\r\n        report => setState(report),\r\n        error => setError(error))\r\n    return () => subscription.unsubscribe()\r\n  }, [])\r\n\r\n  return <Box>\r\n    {\r\n      state.files.length &&\r\n      <Box>\r\n        {\r\n          state.files.map(file =>\r\n            <File file={file}/>)\r\n        }\r\n      </Box>\r\n    }\r\n    {\r\n      error &&\r\n      <Color red>\r\n        <Box flexDirection=\"column\">\r\n          <Box padding={1}>An internal error with EPK happened, you should probably report this error here https://github.com/FKN48/EPK/issues</Box>\r\n          <Box>{error.stack}</Box>\r\n        </Box>\r\n      </Color>\r\n    }\r\n  </Box>\r\n}\r\n","import { render } from 'ink'\r\nimport React from 'react'\r\nimport Reporter from './reporter.tsx'\r\n\r\nexport default subject =>\r\n  render(<Reporter subject={subject}/>)\r\n","import path from 'path'\r\n\r\nimport { installImport, Observable as AsyncObservable, cwd } from '../utils/index.ts'\r\n\r\nlet imports\r\n\r\nexport default options =>\r\n  AsyncObservable(async observer => {\r\n    const { port } = options\r\n    if (!imports) imports = await installImport(['koa', 'koa-static', 'koa-mount'])\r\n\r\n    const [ Koa, serve, mount ] = imports\r\n\r\n    const app = new Koa()\r\n\r\n    const epk = new Koa()\r\n    epk.use(serve(path.resolve(__dirname, '..', 'lib')))\r\n\r\n    const tests = new Koa()\r\n    tests.use(serve(path.resolve(cwd, '.epk', 'dist')))\r\n\r\n    app.use(mount('/epk', epk))\r\n    app.use(mount('/tests', tests))\r\n\r\n    await app.listen(port)\r\n    \r\n    observer.next(app)\r\n\r\n    return () => app.close()\r\n  })\r\n","import path from 'path'\r\n\r\nimport 'v8-compile-cache'\r\nimport getPort from 'get-port'\r\nimport program from 'commander'\r\nimport chalk from 'chalk'\r\nimport { render } from 'ink'\r\n\r\nimport pkg from '../../package.json'\r\nimport Tester from '../core/index.ts'\r\nimport CLIReporter from '../reporters/cli/index.tsx'\r\nimport Server from '../server/index.ts'\r\nimport { tap, take, shareReplay, filter } from 'rxjs/operators'\r\nimport { Subject } from 'rxjs'\r\nimport { REPORTER_EVENT } from '../types.ts'\r\n\r\nprocess.on('unhandledRejection', error => {\r\n  console.error(error)\r\n  process.exit(1)\r\n})\r\n\r\nprogram.version(pkg.version)\r\n\r\nconst commonOptions = {\r\n  '--no-cache': 'disable the filesystem cache',\r\n  '--cache-dir <path>': 'set the cache directory. defaults to \".parcel-cache\"',\r\n  '--no-source-maps': 'disable sourcemaps',\r\n  '--no-autoinstall': 'disable autoinstall',\r\n  '--public-url <url>': 'set the public URL to serve on. defaults to \"/\"',\r\n  '--log-level <level>': [\r\n    'set the log level, either \"none\", \"error\", \"warn\", \"info\", or \"verbose\".',\r\n    /^(none|error|warn|info|verbose)$/\r\n  ],\r\n  '-T, --target': [\r\n    'target for the test, either \"browser\" or \"node\"',\r\n    /^(browser|node)$/\r\n  ],\r\n  '-V, --version': 'output the version number'\r\n}\r\n\r\nprogram\r\n  .command('help [command]')\r\n  .description('display help information for a command')\r\n  .action(command =>\r\n    (\r\n      program\r\n        .commands\r\n        .find(c =>\r\n          c.name() === command) ||\r\n      program)\r\n      .help())\r\n\r\nprogram.on('--help', function() {\r\n  console.log('')\r\n  console.log(`  Run \\`${chalk.bold('epk help <command>')}\\` for more information on specific commands`)\r\n  console.log('')\r\n})\r\n\r\nconst run = async (entries: Array<string>, command: any) => {\r\n  entries = entries.map(entry => path.resolve(entry))\r\n\r\n  if (entries.length === 0) return console.log('No entries found')\r\n\r\n  const subject = new Subject()\r\n\r\n  CLIReporter(\r\n    // @ts-ignore\r\n    subject\r\n    // @ts-ignore\r\n    |> filter(({ type }) => type === REPORTER_EVENT.STATE)\r\n  )\r\n\r\n  await new Promise(resolve => setTimeout(resolve, 0))\r\n  subject.next({ type: REPORTER_EVENT.PORT_SEARCH })\r\n  const port = await getPort({ port: command.port || 10485 })\r\n  subject.next({ type: REPORTER_EVENT.PORT_FOUND, port })\r\n\r\n  // @ts-ignore\r\n  const serverObservable = Server({ port }) |> shareReplay(1)\r\n  subject.next({ type: REPORTER_EVENT.WEB_SERVER_START })\r\n  serverObservable.subscribe()\r\n\r\n  // @ts-ignore\r\n  await (serverObservable |> take(1)).toPromise()\r\n  subject.next({ type: REPORTER_EVENT.WEB_SERVER_READY, port })\r\n\r\n  const testerObservable =\r\n    // @ts-ignore\r\n    Tester(({\r\n      entryFiles: entries,\r\n      watch: command.watch,\r\n      target: command.target,\r\n      port\r\n    }))\r\n\r\n  // @ts-ignore\r\n  testerObservable.subscribe(\r\n    report => subject.next(report),\r\n    error => {\r\n      subject.error(error)\r\n      process.exit(1)\r\n    },\r\n    () => subject.complete())\r\n}\r\n\r\nconst watch = program\r\n  .command('watch [input...]')\r\n  .description('starts the tester in watch mode')\r\n  .action(run)\r\n\r\napplyOptions(watch, commonOptions)\r\n\r\nconst test = program\r\n  .command('test [input...]')\r\n  .description('test once')\r\n  .action(run)\r\n\r\napplyOptions(test, commonOptions)\r\n\r\nfunction applyOptions(cmd, options) {\r\n  for (let opt in options) {\r\n    cmd.option(\r\n      opt,\r\n      ...(Array.isArray(options[opt]) ? options[opt] : [options[opt]])\r\n    )\r\n  }\r\n}\r\n\r\n// Make watch the default command except for --help\r\nlet args = process.argv\r\nif (args[2] === '--help' || args[2] === '-h') args[2] = 'help'\r\nif (!args[2] || !program.commands.some(c => c.name() === args[2])) {\r\n  args.splice(2, 0, 'watch')\r\n}\r\nprogram.parse(args)\r\n"],"names":["options","undefined","Observable","create","observer","bundler","ParcelBundler","entryFiles","addAssetType","path","resolve","__dirname","on","bundle","next","name","parcelBundle","buildEndTime","Date","now","buildStartTime","emitError","err","error","catch","stop","EPK_SUBJECT","EPK_RUNTIME_SUBJECT","EPK_FUNCTION_PROPERTY_PLACEHOLDER","MESSAGE","messageMap","Map","GET_TESTS","GET_TESTS_RESPONSE","RUN_TESTS","RUN_TESTS_RESPONSE","RUN_TEST","RUN_TEST_RESPONSE","PARCEL_REPORTER_EVENT","REPORTER_EVENT","TARGET","BROWSER","RUNTIME","LOG","_access","promisify","fs","access","cwd","process","filename","_path","constants","F_OK","then","pathToTestUrl","outDir","port","normalize","replace","sep","pathToEpkUrl","readFile","writeFile","getClosestPackageJSONDirPath","_cwd","parentPath","getDependencies","data","code","JSON","parse","dependencies","devDependencies","Set","builtinModules","Object","keys","installPackages","dev","yarn","Promise","child","spawn","map","split","shift","stdio","shell","platform","importModules","names","all","packageObservable","packagePath","queuedDeps","queuedDevDeps","pending","run","modules","deps","qDeps","add","allCurrentModules","some","includes","Array","from","delete","depQueue","devDepQueue","Subject","subject","filter","seenDeps","seenDevDep","seenDep","difference","flat","Infinity","bufferTime","arr","length","depUpdate","devDepUpdate","obs","mergeMap","toPromise","shareReplay","subscribe","reject","queue","depsUpdate","missingDeps","size","switchMap","has","skip","take","packages","getPackage","get","set","isArray","func","unsubscribe","_value","asyncObservable","value","stringify","_stringify","key","val","_parse","_","pptr","AsyncObservable","installImport","rootBrowser","launch","devtools","emptyHTMLFilePath","emptyPageUrl","browser","createIncognitoBrowserContext","page","newPage","inMessages","ReplaySubject","exposeFunction","subjectHandle","outMessages","evaluate","loadFile","testFile","goto","addScriptTag","url","evaluateHandle","subjectGlobalProperty","globalThis","close","runtimeMap","CHROME","chrome","runtimeName","runtime","args","provider","preprocessingStart","performance","tests","type","pluck","startWith","logs","takeUntil","scan","log","result","combineLatest","preprocessingEnd","analyzedTestFile","complete","test","testResult","timeStart","timeEnd","description","watch","target","parcel","Parcel","cache","cacheDir","publish","refCount","tap","BUILD_START","BUILD_SUCCESS","runtimeNames","NODE","browsers","runtimeProvider","getRuntimeProvider","makeRuntimeProvider","testFileCache","testBundle","childBundles","isEmpty","testFiles","entryAsset","hashes","assets","asset","hash","cachedTestFile","hashDifference","updateCache","_test","preprocessed","of","preprocessor","takeWhile","share","tested","merge","find","executionEnd","analyzed","analyze","analyzeEnd","runtimes","STATE","file","state","setState","useState","files","setError","useEffect","subscription","report","React","Box","Color","stack","render","imports","Koa","serve","mount","app","epk","use","listen","console","exit","program","version","pkg","commonOptions","command","action","commands","c","help","chalk","bold","entries","entry","CLIReporter","setTimeout","PORT_SEARCH","getPort","PORT_FOUND","serverObservable","Server","WEB_SERVER_START","WEB_SERVER_READY","testerObservable","Tester","applyOptions","cmd","opt","option","argv","splice"],"mappings":"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"}