{"version":3,"file":"cli.js","sources":["../src/core/parcel/index.ts","../src/types.ts","../src/utils/file.ts","../src/utils/installImport.ts","../src/utils/async-observable.ts","../src/utils/async-filter.ts","../src/utils/flatted.ts","../src/runtimes/chrome.ts","../src/runtimes/index.ts","../src/core/index.ts","../src/reporters/cli/reporter.tsx","../src/reporters/cli/index.tsx","../src/server/index.ts","../src/cli/index.ts"],"sourcesContent":["import path from 'path'\r\n\r\nimport { Observable } from 'rxjs'\r\nimport ParcelBundler from 'parcel-bundler'\r\n\r\nimport { Bundler } from '../../types.ts'\r\n\r\nexport default (options = undefined): Bundler =>\r\n  Observable.create(observer => {\r\n    const bundler = new ParcelBundler(options.entryFiles, options)\r\n\r\n    bundler.addAssetType('js', path.resolve(__dirname, '../src/core/parcel/js-asset.js'))\r\n    bundler.addAssetType('ts', path.resolve(__dirname, '../src/core/parcel/ts-asset.js'))\r\n\r\n    bundler.on('bundled', bundle =>\r\n      observer.next({ name: 'bundled', parcelBundle: bundle, buildEndTime: Date.now() }))\r\n    bundler.on('buildStart', entryFiles =>\r\n      observer.next({ name: 'buildStart', entryFiles, buildStartTime: Date.now() }))\r\n    bundler.on('buildEnd', () =>\r\n      observer.next({ name: 'buildEnd' }))\r\n\r\n    const emitError = err => observer.error(err)\r\n    bundler.on('buildError', emitError)\r\n    bundler\r\n      .bundle()\r\n      .catch(emitError)\r\n\r\n    return () =>\r\n      bundler\r\n        .stop()\r\n        .catch(emitError)\r\n  })\r\n","\r\nimport { Observable, Subject } from 'rxjs'\r\nimport { ParcelBundle } from 'parcel-bundler'\r\nimport { CoverageEntry, ElementHandle } from 'puppeteer'\r\n\r\n// Subject that is sent data from the tester to the runtime\r\nexport const EPK_SUBJECT = '__EPK__SUBJECT__'\r\n// Subject that is sent data from the runtime to the tester\r\nexport const EPK_RUNTIME_SUBJECT = '__EPK__RUNTIME__SUBJECT__'\r\nexport const EPK_FUNCTION_PROPERTY_PLACEHOLDER = '__EPK__FUNCTION__PLACEHOLDER__'\r\n\r\nexport interface Bundler extends Observable<any> {}\r\n\r\n// Going to change when Parcel 2 get released\r\nexport interface Options {\r\n  outDir: string\r\n  entryFiles: string | string[]\r\n  target: TARGET\r\n  watch?: boolean\r\n  browsers?: BROWSER[]\r\n  port?: number\r\n}\r\n\r\nexport interface installImportOptions {\r\n  path: string\r\n  dev: boolean\r\n}\r\n\r\nexport interface TestBundle {\r\n  /**\r\n   * Parcel bundle\r\n   */\r\n  parcelBundle: ParcelBundle\r\n  /**\r\n   * Entry files\r\n   */\r\n  entryFiles: string[]\r\n  /**\r\n   * Time at which the bundling started(high precision timestamp)\r\n   */\r\n  buildStartTime: number\r\n  /**\r\n   * Time at which the bundling ended(high precision timestamp)\r\n   */\r\n  buildEndTime: number\r\n}\r\n\r\n/**\r\n * Representation of a file\r\n */\r\nexport interface TestFile {\r\n  /**\r\n   * Bundle\r\n   */\r\n  bundle: TestBundle\r\n  /**\r\n   * Hashes of all the parcel assets\r\n   */\r\n  hashes: Set<string>\r\n  /**\r\n   * Path of the source test file\r\n   */\r\n  name: string\r\n  /**\r\n   * Prettified path of the source test file\r\n   */\r\n  displayName: string\r\n  /**\r\n   * Path of the bundled test file\r\n   */\r\n  path: string\r\n  /**\r\n   * Target\r\n   */\r\n  target: TARGET | RUNTIME\r\n  /**\r\n   * Url by which browsers can access the test file\r\n   * Not defined if target is node\r\n   */\r\n  url?: string\r\n  /**\r\n   * Array of analyzed tests\r\n   */\r\n  tests?: Test[] | undefined\r\n  /**\r\n   * Boolean that equals true if all the tests ran\r\n   */\r\n  testsDone?: boolean\r\n  /**\r\n   * Array of logs logged without running the tests\r\n   */\r\n  logs?: Log[]\r\n  /**\r\n   * Time at which the test preprocessing started(high precision timestamp)\r\n   */\r\n  preprocessingStart?: number\r\n  /**\r\n   * Time at which the test preprocessing ended(high precision timestamp)\r\n   */\r\n  preprocessingEnd?: number\r\n}\r\n\r\nexport interface TestFileRuntimeAggregation {\r\n/**\r\n   * Bundle\r\n   */\r\n  bundle: TestBundle\r\n  /**\r\n   * Hashes of all the parcel assets\r\n   */\r\n  hashes: Set<string>\r\n  /**\r\n   * Path of the source test file\r\n   */\r\n  name: string\r\n  /**\r\n   * Prettified path of the source test file\r\n   */\r\n  displayName: string\r\n  /**\r\n   * Path of the bundled test file\r\n   */\r\n  path: string\r\n  /**\r\n   * Array of analyzed tests\r\n   */\r\n  tests?: Test[] | undefined\r\n  /**\r\n   * Url by which browsers can access the test file\r\n   * Not defined if target is node\r\n   */\r\n  url?: string\r\n  /**\r\n   * Map of tested file per runtime\r\n   */\r\n  testFiles: Map<RUNTIME, TestFile>\r\n}\r\n\r\n/**\r\n * Representation of a test\r\n */\r\nexport interface Test {\r\n  /**\r\n   * Description of the test\r\n   */\r\n  description: string\r\n  /**\r\n   * Body of the test (Stringified function)\r\n   */\r\n  body: string\r\n  /**\r\n   * String type of test: Function | Promise<any> | Observable<any>\r\n   */\r\n\r\n  //** Properties from the test when executed\r\n  \r\n  type?: string\r\n  /**\r\n   * Flatted(https://github.com/WebReflection/flatted) value returned by the test\r\n   */\r\n  value?: any\r\n  /**\r\n   * Array of logs logged while running the test\r\n   */\r\n  logs?: Log[]\r\n  /**\r\n   * Time at which the test started(high precision timestamp)\r\n   */\r\n  executionStart?: number\r\n  /**\r\n   * Time at which the test ended(high precision timestamp)\r\n   */\r\n  executionEnd?: number\r\n  /**\r\n   * Code coverage of the test\r\n   * Can be undefined if environment doesn't support native Coverage (in browser)\r\n   * todo: think of using instanbul for in browser coverage when parcel v2 will be released\r\n   */\r\n  coverage?: CoverageEntry\r\n\r\n  //** Properties from the test when analyzed\r\n  /**\r\n   * Percent of code run by the test from the file\r\n   */\r\n  codeCoverage?: number\r\n  /**\r\n   * Time at which the test analyze started(high precision timestamp)\r\n   */\r\n  analyzeStart?: number\r\n  /**\r\n   * Time at which the test analyze ended(high precision timestamp)\r\n   */\r\n  analyzeEnd?: number\r\n}\r\n\r\nexport interface Analyze {\r\n\r\n}\r\n\r\nexport enum MESSAGE {\r\n  GET_TESTS,\r\n  GET_TESTS_RESPONSE,\r\n  \r\n  RUN_TESTS,\r\n  RUN_TESTS_RESPONSE,\r\n\r\n  RUN_TEST,\r\n  RUN_TEST_RESPONSE\r\n}\r\n\r\nconst messageMap = new Map<MESSAGE, MESSAGE>([\r\n  [MESSAGE.GET_TESTS, MESSAGE.GET_TESTS_RESPONSE],\r\n  [MESSAGE.RUN_TESTS, MESSAGE.RUN_TESTS_RESPONSE],\r\n  [MESSAGE.RUN_TEST, MESSAGE.RUN_TEST_RESPONSE]\r\n])\r\n\r\nexport const getMessageResponse = message => messageMap.get(message)\r\n\r\n// https://github.com/parcel-bundler/parcel/issues/2574#issuecomment-459694774\r\nexport enum PARCEL_REPORTER_EVENT {\r\n  BUILD_START = 'buildStart',\r\n  BUILD_PROGRESS = 'buildProgress',\r\n  BUILD_SUCCESS = 'buildSuccess',\r\n  BUILD_FAILURE = 'buildFailure',\r\n  LOG = 'log'\r\n}\r\n\r\nexport enum REPORTER_EVENT {\r\n  BUILD_START = 'buildStart',\r\n  BUILD_PROGRESS = 'buildProgress',\r\n  BUILD_SUCCESS = 'buildSuccess',\r\n  BUILD_FAILURE = 'buildFailure',\r\n  LOG = 'log',\r\n  PORT_SEARCH = 'portSearch',\r\n  PORT_FOUND = 'portFound',\r\n  WEB_SERVER_START = 'webServerStart',\r\n  WEB_SERVER_READY = 'webServerReady',\r\n  STATE = 'state'\r\n}\r\n\r\nexport enum TARGET {\r\n  BROWSER = 'browser',\r\n  NODE = 'node'\r\n}\r\n\r\nexport enum BROWSER {\r\n  FIREFOX = 'firefox',\r\n  FIREFOX_NIGHTLY = 'firefoxNightly',\r\n  CHROME = 'chrome',\r\n  CHROME_CANARY = 'chromeCanary'\r\n}\r\n\r\nexport enum RUNTIME {\r\n  FIREFOX = 'firefox',\r\n  FIREFOX_NIGHTLY = 'firefoxNightly',\r\n  CHROME = 'chrome',\r\n  CHROME_CANARY = 'chromeCanary',\r\n  NODE = 'node'\r\n}\r\n\r\nexport interface RuntimeProvider extends Observable<Runtime> {\r\n  runtimeName: RUNTIME\r\n}\r\n\r\nexport interface Runtime extends Observable<any> {\r\n  loadFile(file: TestFile): Promise<ElementHandle>\r\n  inMessages: Subject<any>\r\n  outMessages: Subject<any>\r\n}\r\n\r\nexport enum LOG {\r\n  log = 'log',\r\n  info = 'info',\r\n  warn = 'warn',\r\n  error = 'error',\r\n  uncaughtError = 'uncaughtError'\r\n}\r\n\r\nexport interface MetaStack {\r\n  file: string\r\n  source: string\r\n  name: string\r\n  line: number\r\n  column: number\r\n  originalSource: string\r\n  originalName: string\r\n  originalLine: number\r\n  originalColumn: number\r\n}\r\n\r\nexport interface Error {\r\n  message: string\r\n  name: string\r\n  stack: string\r\n  string: string\r\n  metaStack?: MetaStack[]\r\n  originalStack?: string\r\n}\r\n\r\nexport interface Log {\r\n  type: LOG\r\n  arguments?: any[]\r\n  error?: Error\r\n}\r\n","\r\nimport fs from 'fs'\r\nimport path from 'path'\r\nimport { promisify } from 'util'\r\nimport { Test, TestFileRuntimeAggregation } from '../types';\r\n\r\nconst _access = promisify(fs.access)\r\n\r\nexport const cwd = process.cwd()\r\n\r\nexport const access =\r\n  (filename, _path = '') =>\r\n    _access(path.resolve(_path, filename), fs.constants.F_OK)\r\n      .then(\r\n        () => true,\r\n        () => false)\r\n\r\nexport const prettifyPath = _path => path.relative(cwd, _path)\r\n\r\nexport const getEmptyPageUrl = port =>\r\n  pathToEpkUrl(path.resolve(__dirname, '..', 'dist', 'empty.html'), port)\r\n\r\nexport const pathToTestUrl = (_path, { outDir = '.epk', port = undefined }) =>\r\n  `${port ? `http://localhost:${port}` : ''}${path.normalize(_path).replace(`${path.resolve(cwd, outDir, 'dist')}${path.sep}`, '/tests/').replace(path.sep, '/')}`\r\n\r\nexport const pathToEpkUrl = (_path, { port }) =>\r\n  `${port ? `http://localhost:${port}` : ''}${path.normalize(_path).replace(`${path.resolve(__dirname, '..', 'lib')}${path.sep}`, '/epk/').replace(path.sep, '/')}`\r\n\r\nexport const getTestFileAggregationStats =  (testFileAggregation: TestFileRuntimeAggregation) => {\r\n  const tests: Test[] | undefined = testFileAggregation?.tests\r\n  const runtimeTestFiles = Array.from(testFileAggregation.testFiles.values())\r\n  const testedTestsArray =\r\n    testFileAggregation.tests\r\n      ?.filter(({ description }) =>\r\n        runtimeTestFiles\r\n          .every(testFiles =>\r\n            testFiles.tests\r\n              ?.some(({ description: _description, executionEnd }) =>\r\n                _description === description &&\r\n                executionEnd)))\r\n      || []\r\n\r\n  const isPreprocessed = testFileAggregation.tests\r\n  const testedTest = testedTestsArray.length\r\n  const totalTests = testFileAggregation.tests?.length || 0\r\n\r\n  return {\r\n    tests,\r\n    runtimeTestFiles,\r\n    testedTestsArray,\r\n    isPreprocessed,\r\n    testedTest,\r\n    totalTests\r\n  }\r\n}","import set from 'core-js/features/set'\r\n\r\nimport fs from 'fs'\r\nimport path from 'path'\r\nimport { promisify } from 'util'\r\nimport { spawn } from 'child_process'\r\nimport { builtinModules } from 'module'\r\n\r\nimport { Observable, Subject, from } from 'rxjs'\r\nimport { shareReplay, filter, bufferTime, mergeMap, skip, switchMap, take } from 'rxjs/operators'\r\n// import rxjs from 'rxjs'\r\n// import rxjsOperators from 'rxjs/operators'\r\n\r\nimport { cwd, access } from './file.ts'\r\nimport { installImportOptions } from '../types.ts'\r\n\r\n// const { Observable, Subject, from } = rxjs\r\n// const { shareReplay, filter, bufferTime, mergeMap, skip } = rxjsOperators\r\n\r\nconst readFile = promisify(fs.readFile)\r\nconst writeFile = promisify(fs.writeFile)\r\n\r\nexport const getClosestPackageJSONDirPath =\r\n\t(_path: string = undefined, _cwd: string = cwd) =>\r\n\t\taccess('package.json', _path || _cwd)\r\n\t\t\t.then(access => {\r\n\t\t\t\tif (access) return _path || _cwd\r\n\t\t\t\tconst parentPath = path.resolve('..', _path)\r\n\t\t\t\treturn parentPath === _cwd\r\n\t\t\t\t\t? undefined\r\n\t\t\t\t\t: getClosestPackageJSONDirPath(parentPath)\r\n\t\t\t})\r\n\r\n/**\r\n * \r\n * @param path Package.json path\r\n * @returns Promise of a dependency and devDependency Set tuple\r\n */\r\nexport const getDependencies =\r\n\t(path: string): Promise<[Set<string>, Set<string>]> =>\r\n\t\treadFile(path, 'utf8')\r\n\t\t\t.then(\r\n\t\t\t\tdata => data,\r\n\t\t\t\terr => // If package.json doesn't exist, create an empty one\r\n\t\t\t\t\terr.code === 'ENOENT' &&\r\n\t\t\t\t\twriteFile(path, '{}')\r\n\t\t\t\t\t\t.then(() => '{}'))\r\n\t\t\t.then(data =>\r\n\t\t\t\tJSON.parse(data))\r\n\t\t\t.then(({ dependencies, devDependencies }) => [\r\n\t\t\t\t\tnew Set<string>([...builtinModules, ...Object.keys(dependencies)]),\r\n\t\t\t\t\tnew Set<string>([...builtinModules, ...Object.keys(devDependencies)])\r\n\t\t\t\t])\r\n\r\n// const installPackages = (dependencies: string[], { path, dev, yarn }: { path: string, dev: boolean, yarn: boolean }) =>\r\n// \tObservable.create(observer => {\r\n// \t\tconst child = spawn(\r\n// \t\t\tyarn ? 'yarn' : 'npm',\r\n// \t\t\t[\r\n// \t\t\t\tyarn ? 'add' : 'install',\r\n// \t\t\t\t...dependencies.map(name =>\r\n// \t\t\t\t\t\tname\r\n// \t\t\t\t\t\t\t.split('/')\r\n// \t\t\t\t\t\t\t.shift()),\r\n// \t\t\t\t...dev && [yarn ? '-D': '--save-dev']\r\n// \t\t\t],\r\n// \t\t\t{\r\n// \t\t\t\tcwd: path,\r\n// \t\t\t\tstdio: 'inherit', // needed to get the colors and stream writes\r\n// \t\t\t\tshell: process.platform === 'win32' // needed for windows\r\n// \t\t\t})\r\n// \t\t// If stdio is inherit, comment the data listeners\r\n// \t\t// child.stdout.on('data', data => observer.next(data.toString('utf8')))\r\n// \t\t// child.stderr.on('data', data => observer.error(data.toString('utf8')))\r\n// \t\tchild.on('close', () => observer.complete())\r\n// \t\treturn () => child.kill()\r\n// \t})\r\n// console.log(spawn('yarn -v'))\r\nconst installPackages = (dependencies: string[], { path, dev, yarn }: { path: string, dev: boolean, yarn: boolean }) =>\r\n\tnew Promise(resolve => {\r\n\t\tconst child = spawn(\r\n\t\t\tyarn ? 'yarn' : 'npm',\r\n\t\t\t[\r\n\t\t\t\tyarn ? 'add' : 'install',\r\n\t\t\t\t...dependencies.map(name =>\r\n\t\t\t\t\t\tname\r\n\t\t\t\t\t\t\t.split('/')\r\n\t\t\t\t\t\t\t.shift()),\r\n\t\t\t\t...dev ? [yarn ? '-D': '--save-dev'] : []\r\n\t\t\t],\r\n\t\t\t{\r\n\t\t\t\tcwd: path,\r\n\t\t\t\tstdio: 'inherit', // needed to get the colors and stream writes\r\n\t\t\t\tshell: process.platform === 'win32' // needed for windows\r\n\t\t\t}\r\n\t\t\t)\r\n\t\t// If stdio is inherit, comment the data listeners\r\n\t\t// child.stdout.on('data', data => observer.next(data.toString('utf8')))\r\n\t\t// child.stderr.on('data', data => observer.error(data.toString('utf8')))\r\n\t\tchild.on('close', () => resolve())\r\n\t})\r\n\r\nconst importModules =\r\n\t(names: string[]) =>\r\n\t\tPromise\r\n\t\t\t.all(\r\n\t\t\t\tnames.map(name =>\r\n\t\t\t\t\timport(name)))\r\n\r\nconst packageObservable = async (path: string): Promise<Function> => {\r\n\tconst packagePath = await getClosestPackageJSONDirPath(path)\r\n\tconst yarn = await access('yarn.lock', packagePath)\r\n\tconst [ dependencies, devDependencies ] = await getDependencies(`${path}/package.json`)\r\n\t// const [ seenDep, seenDevDep ] = [new Set(), new Set()]\r\n\tconst [ queuedDeps, queuedDevDeps ] = [new Set<string>(), new Set<string>()]\r\n\tlet pending: Promise<string[]> = Promise.resolve([])\r\n\r\n\tconst run = async (modules: string[], dev: boolean) => {\r\n\t\tconst deps = dev ? devDependencies : dependencies\r\n\t\tconst qDeps = dev ? queuedDevDeps : queuedDeps\r\n\r\n\t\tfor (const name of modules) qDeps.add(name)\r\n\r\n\t\tconst allCurrentModules = [...devDependencies, ...dependencies]\r\n\t\tif (!modules.some(name => !allCurrentModules.includes(name))) return importModules(modules)\r\n\r\n\t\ttry {\r\n\t\t\tawait pending\r\n\t\t} finally {\r\n\t\t\tconst names = Array.from(qDeps)\r\n\t\t\tawait installPackages(names, { path, dev, yarn })\r\n\r\n\t\t\tfor (const name of names) deps.add(name)\r\n\t\t\tfor (const name of names) qDeps.delete(name)\r\n\r\n      return importModules(modules)\r\n\t\t}\r\n\t}\r\n\t\r\n\r\n\treturn (modules: string[], dev: boolean = false) => (pending = run(modules, dev))\r\n\r\n\tconst [ depQueue, devDepQueue ] =\r\n\t\t[new Subject(), new Subject()]\r\n\t\t\t.map((subject, dev) =>\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tsubject\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\t|> filter((names: string[]) => {\r\n\t\t\t\t\tconst seenDeps = dev ? seenDevDep : seenDep\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\treturn Array.from(\r\n\t\t\t\t\t\t\tseenDeps\r\n\t\t\t\t\t\t\t\t.difference(names))\r\n\t\t\t\t\t\t\t\t.flat(Infinity)\r\n\t\t\t\t\t} finally {\r\n\t\t\t\t\t\tfor (const name of names) seenDeps.add(name)\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\t|> bufferTime(50)\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\t|> filter(arr => arr.length))\r\n\r\n\tconst [ depUpdate, devDepUpdate ] =\r\n\t\t[depQueue, devDepQueue]\r\n\t\t\t.map((obs, dev) =>\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tobs\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\t|> mergeMap(async (names: string[]) => {\r\n\t\t\t\t\tconst deps = dev ? devDependencies : dependencies\r\n\r\n\t\t\t\t\tawait installPackages(names, { path, dev, yarn }).toPromise()\r\n\r\n\t\t\t\t\tfor (const name of names) deps.add(name)\r\n\r\n\t\t\t\t\treturn from(names)\r\n\t\t\t\t})\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\t|> shareReplay())\r\n\r\n\t// @ts-ignore\r\n\tdepUpdate.subscribe()\r\n\t// @ts-ignore\r\n\tdevDepUpdate.subscribe()\r\n\r\n\treturn (modules, dev) =>\r\n\t\tnew Promise((resolve, reject) => {\r\n\t\t\tif (typeof modules === 'string') modules = [modules]\r\n\t\t\tconst deps = dev ? devDependencies : dependencies\r\n\t\t\tconst queue = dev ? devDepQueue : depQueue\r\n\t\t\tconst depsUpdate = dev ? devDepUpdate : depUpdate\r\n\r\n\t\t\tconst missingDeps =\r\n\t\t\t\tnew Set(\r\n\t\t\t\t\tmodules.map(name =>\r\n\t\t\t\t\t\tname\r\n\t\t\t\t\t\t\t.split('/')\r\n\t\t\t\t\t\t\t.shift()))\r\n\t\t\t\t\t\t\t.difference(deps)\r\n\t\t\t\r\n\t\t\tif (missingDeps.size) {\r\n\t\t\t\tconst obs =\r\n\t\t\t\t\tdepsUpdate\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t|> switchMap(obs => obs)\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t|> filter(name => missingDeps.has(name))\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t|> skip(missingDeps.size - 1)\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t|> take(1)\r\n\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tobs.subscribe(() => resolve(importModules(modules)))\r\n\t\t\t\t\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tfor (const name of missingDeps) queue.next(name)\r\n\r\n\t\t\t} else {\r\n\t\t\t\tresolve(importModules(modules))\r\n\t\t\t}\r\n\t\t})\r\n}\r\n\r\nconst packages = new Map<string, Function>()\r\n\r\nconst getPackage = async (path: string) =>\r\n\tpackages.has(path)\r\n\t\t? packages.get(path)\r\n\t\t: packages\r\n\t\t\t.set(path, await packageObservable(path))\r\n\t\t\t.get(path)\r\n\r\nexport default async (names: string | string[], options?: installImportOptions) =>\r\n\tgetPackage(options?.path || await getClosestPackageJSONDirPath())\r\n\t\t.then(getPackage =>\r\n\t\t\tgetPackage(Array.isArray(names) ? names : [names], options?.dev))\r\n\t\t.then(packages =>\r\n\t\t\tArray.isArray(names)\r\n\t\t\t\t? packages\r\n\t\t\t\t: packages[0])\r\n","import { Observable } from 'rxjs'\r\n\r\nexport default <T>(func: Function): Observable<T> =>\r\n  Observable.create(observer => {\r\n    const unsubscribe = func(observer)\r\n    return async () => (await unsubscribe)?.()\r\n  })\r\n","import { mergeMap } from 'rxjs/operators'\r\nimport asyncObservable from './async-observable.ts'\r\n\r\nexport default mergeMap(_value =>\r\n  asyncObservable(async observer => {\r\n    const value = await _value\r\n    if (value) observer.next(value)\r\n  }))","import { stringify as _stringify, parse as _parse } from 'flatted'\r\n\r\nimport { EPK_FUNCTION_PROPERTY_PLACEHOLDER } from '../types.ts'\r\n\r\nexport const stringify = data =>\r\n  _stringify(\r\n    data,\r\n    (key, val) =>\r\n      typeof val === 'function'\r\n        ? {\r\n          [EPK_FUNCTION_PROPERTY_PLACEHOLDER]: val.name\r\n        }\r\n        : val)\r\n\r\nexport const parse = data =>\r\n  _parse(\r\n    data,\r\n    (_, val) =>\r\n      val?.[EPK_FUNCTION_PROPERTY_PLACEHOLDER]\r\n        // Way to dynamically set a function name (to render via `util.inspect` from the reporter)\r\n        ? {\r\n          [val[EPK_FUNCTION_PROPERTY_PLACEHOLDER]]: () => {}\r\n        }[val[EPK_FUNCTION_PROPERTY_PLACEHOLDER]]\r\n        : val)","import path from 'path'\r\n\r\nimport { installImport, Observable as AsyncObservable, pathToEpkUrl } from '../utils/index.ts'\r\nimport { TestFile, EPK_SUBJECT, EPK_RUNTIME_SUBJECT } from '../types.ts'\r\nimport { ReplaySubject, Subject } from 'rxjs'\r\nimport { stringify, parse } from '../utils/index.ts'\r\n\r\nlet pptr\r\n\r\nexport default ({ port }) =>\r\n  AsyncObservable(async observer => {\r\n    if (!pptr) pptr = await installImport('puppeteer')\r\n\r\n    const rootBrowser = await pptr.launch({ devtools: true })\r\n\r\n    observer.next(\r\n      AsyncObservable(async observer => {\r\n        const emptyHTMLFilePath = path.resolve(__dirname, '..', 'lib', 'empty.html')\r\n        const emptyPageUrl = pathToEpkUrl(emptyHTMLFilePath, { port })\r\n\r\n        const browser = await rootBrowser.createIncognitoBrowserContext()\r\n        const page = await browser.newPage()\r\n        \r\n        const inMessages = new ReplaySubject()\r\n        page.exposeFunction(\r\n          EPK_RUNTIME_SUBJECT,\r\n          value => inMessages.next(parse(value))\r\n        )\r\n\r\n        let subjectHandle\r\n\r\n        const outMessages = new Subject()\r\n        outMessages.subscribe(value =>\r\n          page.evaluate(\r\n            (subject, value) => subject.next(value),\r\n            subjectHandle,\r\n            stringify(value)\r\n          )\r\n        )\r\n\r\n        observer.next({\r\n          inMessages,\r\n          outMessages,\r\n          loadFile: async (testFile: TestFile) => {\r\n            await page.goto(emptyPageUrl)\r\n            await page.addScriptTag({ url: testFile.url })\r\n            subjectHandle = await page.evaluateHandle(\r\n              (subjectGlobalProperty) => globalThis[subjectGlobalProperty],\r\n              EPK_SUBJECT\r\n            )\r\n          }\r\n        })\r\n\r\n        return () => page.close()\r\n      })\r\n    )\r\n\r\n    return () => rootBrowser.close()\r\n  })\r\n\r\n  // Observable.create(observer => {\r\n  //   if (!pptr) installImport('puppeteer').then(_pptr => pptr = _pptr)\r\n\r\n  //   const browser = pptr.then(pptr => pptr.launch({ devtools: true }))\r\n\r\n  //   browser.then(browser =>\r\n  //     observer.next(Observable.create(observer => {\r\n  //       const page = browser.newPage()\r\n  //       const emptyHTMLFilePath = path.resolve(__dirname, '..', 'dist', 'empty.html')\r\n  //       const url = transformPathToEpkUrl(emptyHTMLFilePath, options.port)\r\n  //       page.then(page => {\r\n  //         observer.next({\r\n  //           loadFile: file => page.goto(url).then(() => page.addScriptTag({ url: file.url })),\r\n  //           exec: str => page.evaluate(str)\r\n  //         })\r\n  //       })\r\n  //       return () =>\r\n  //         page.then(page =>\r\n  //           page.close())\r\n  //     })))\r\n\r\n  //   return () =>\r\n  //     browser.then(browser =>\r\n  //       browser.close())\r\n  // })\r\n","import { RUNTIME, RuntimeProvider } from '../types.ts'\r\n\r\nimport chrome from './chrome.ts'\r\nimport { map } from 'rxjs/operators'\r\nimport { Observable } from 'rxjs'\r\n\r\nconst runtimeMap = new Map<RUNTIME, (...args) => Observable<RuntimeProvider>>([\r\n  [RUNTIME.CHROME, chrome]\r\n])\r\n\r\nfor (const [runtimeName, runtime] of runtimeMap) {\r\n  runtimeMap.set(\r\n    runtimeName,\r\n    (...args) =>\r\n      // @ts-ignore\r\n      runtime(...args)\r\n      // @ts-ignore\r\n      |> map((provider: RuntimeProvider) => {\r\n        provider.runtimeName = runtimeName\r\n        return provider\r\n      }))\r\n\r\n  runtimeMap.get(runtimeName).runtimeName = runtimeName\r\n}\r\n\r\nexport default (runtime: RUNTIME) =>\r\nruntimeMap.get(runtime)\r\n","import { Observable, Subject, from, merge, of } from 'rxjs'\r\nimport { publish, switchMap, filter, map, tap, takeUntil, mergeMap, shareReplay, share, scan, takeWhile, mergeScan } from 'rxjs/operators'\r\n\r\nimport './polyfills.ts'\r\nimport Parcel from './parcel/index.ts'\r\nimport getRuntimeProvider from '../runtimes/index.ts'\r\nimport { REPORTER_EVENT, Options, TARGET, BROWSER, RUNTIME, TestFile, TestBundle, RuntimeProvider, Test, TestFileRuntimeAggregation, Runtime } from '../types.ts'\r\nimport preprocessor from './preprocessor.ts'\r\nimport test from './test.ts'\r\nimport analyze from './analyzer.ts'\r\nimport { pathToTestUrl, prettifyPath } from '../utils/index.ts'\r\nimport { string } from 'prop-types';\r\n\r\nexport default\r\n  (options: Options) =>\r\n    Observable.create(observer => {\r\n      const { watch, target = TARGET.BROWSER, entryFiles, port, outDir = '.epk' } = options\r\n\r\n      const unsubscribe = new Subject()\r\n\r\n      const parcel =\r\n        // @ts-ignore\r\n        (Parcel({\r\n          entryFiles: entryFiles,\r\n          target: target,\r\n          outDir: `${outDir}/dist/${target}`,\r\n          watch: true,\r\n          cache: true,\r\n          cacheDir: `${outDir}/cache/${target}`\r\n        })\r\n        // @ts-ignore\r\n        |> takeUntil(unsubscribe)\r\n        // @ts-ignore\r\n        |> publish())\r\n          // @ts-ignore\r\n          .refCount()\r\n\r\n      // @ts-ignore\r\n      const bundle =\r\n        // @ts-ignore\r\n        parcel\r\n        // @ts-ignore\r\n        |> filter(({ name }) => name === 'buildStart')\r\n        // @ts-ignore\r\n        |> tap(() => observer.next({ type: REPORTER_EVENT.BUILD_START }))\r\n        // @ts-ignore\r\n        |> switchMap(({ entryFiles, buildStartTime }) =>\r\n          // @ts-ignore\r\n          parcel\r\n          // @ts-ignore\r\n          |> filter(({ name }) => name === 'bundled')\r\n          // @ts-ignore\r\n          |> tap(() => observer.next({ type: REPORTER_EVENT.BUILD_SUCCESS }))\r\n          // @ts-ignore\r\n          |> map(bundle => ({ ...bundle, entryFiles, buildStartTime })))\r\n        // @ts-ignore\r\n        |> shareReplay(1) // needed for slow runtimes to start working on initial bundle\r\n\r\n      const runtimeNames =\r\n        options.target === TARGET.NODE\r\n          ? [RUNTIME.NODE]\r\n          : options.browsers as unknown as RUNTIME[] || [RUNTIME.CHROME]\r\n\r\n      const runtimeProvider =\r\n        // @ts-ignore\r\n        from(\r\n          runtimeNames\r\n            .map(runtimeName => getRuntimeProvider(runtimeName))\r\n            .map(makeRuntimeProvider => makeRuntimeProvider(options)))\r\n        // @ts-ignore\r\n        |> mergeMap(runtimeProvider => runtimeProvider) // todo: check how to remove that\r\n        // @ts-ignore\r\n        |> takeUntil(unsubscribe)\r\n\r\n      const testFileCache = new Map<string, TestFile>()\r\n\r\n      // @ts-ignore\r\n      const tests =\r\n        // @ts-ignore\r\n        runtimeProvider\r\n        // @ts-ignore\r\n        |> mergeMap((runtimeProvider: RuntimeProvider) =>\r\n          bundle\r\n          // @ts-ignore\r\n          |> mergeScan(([acc], testBundle: TestBundle) =>\r\n            // @ts-ignore\r\n            of(testBundle)\r\n            // @ts-ignore\r\n            |> map(value => {\r\n\r\n              return [acc, value]\r\n            })\r\n            // @ts-ignore\r\n            |> takeUntil(bundle)\r\n          , [])\r\n          // @ts-ignore\r\n          |> map(([, value]) => value)\r\n          // @ts-ignore\r\n          |> switchMap((testBundle: TestBundle): Observable<TestFile> => {\r\n            const { parcelBundle } = testBundle\r\n            const childBundles =\r\n              // @ts-ignore\r\n              parcelBundle.isEmpty\r\n                ? Array.from(parcelBundle.childBundles)\r\n                : [parcelBundle]\r\n\r\n            const testFiles =\r\n              childBundles.map(({ assets, name: path, entryAsset: { name }}): TestFile => ({\r\n                bundle: testBundle,\r\n                hashes: new Set(\r\n                  Array.from(assets, ({ hash }) => hash)\r\n                ),\r\n                name,\r\n                displayName: prettifyPath(name),\r\n                path,\r\n                url:\r\n                  TARGET.BROWSER === target &&\r\n                  pathToTestUrl(path, options),\r\n                target: runtimeProvider.runtimeName\r\n              }))\r\n\r\n            // @ts-ignore\r\n            return from(testFiles)\r\n              // @ts-ignore\r\n              |> scan(\r\n                (testFiles, testFile: TestFile) => testFiles.set(testFile.name, testFile),\r\n                new Map<string, TestFile>()\r\n              )\r\n              // @ts-ignore\r\n              |> map(testFiles => [\r\n                runtimeProvider.runtimeName,\r\n                testFiles\r\n              ])\r\n          })\r\n        )\r\n        // @ts-ignore\r\n        |> scan(\r\n          (runtimes, [runtime, fileTests]) =>\r\n            runtimes.set(runtime, fileTests),\r\n          new Map<RUNTIME,Map<string, TestFile>>()\r\n        )\r\n        // @ts-ignore\r\n        |> map((runtimes: Map<RUNTIME,Map<string, TestFile>>) =>\r\n          Array.from(runtimes).reduce((aggregations, [runtime, testFiles]) => {\r\n\r\n            for (const testFile of testFiles.values()) {\r\n              if (!aggregations.has(testFile.name)) {\r\n                aggregations.set(testFile.name, {\r\n                  bundle: testFile.bundle,\r\n                  hashes: testFile.hashes,\r\n                  name: testFile.name,\r\n                  displayName: testFile.displayName,\r\n                  path: testFile.path,\r\n                  url: testFile.url,\r\n                  tests: testFile.tests,\r\n                  testFiles: new Map<RUNTIME, TestFile>()\r\n                })\r\n              }\r\n              aggregations.get(testFile.name).testFiles.set(runtime, testFile)\r\n            }\r\n            return aggregations\r\n          }, new Map<string, TestFileRuntimeAggregation>())\r\n        )\r\n        // @ts-ignore\r\n        |> map(testFiles => ({\r\n          type: REPORTER_EVENT.STATE,\r\n          testFiles\r\n        }))\r\n\r\n      // @ts-ignore\r\n      tests.subscribe(\r\n        value => observer.next(value),\r\n        error => observer.error(error),\r\n        () => observer.complete()\r\n      )\r\n\r\n      return () => {\r\n        unsubscribe.next()\r\n        unsubscribe.complete()\r\n      }\r\n    })\r\n","import path from 'path'\r\n\r\nimport { Text, Box, Color } from 'ink'\r\nimport React, { useEffect, useState } from 'react'\r\nimport BorderBox from 'ink-box'\r\nimport getStrLength from 'string-width'\r\nimport ColorPipe from 'ink-color-pipe'\r\n\r\nimport File from './file.tsx'\r\nimport { prettifyPath } from '../../utils/file.ts'\r\nimport { TestFileRuntimeAggregation, TestFile, LOG } from '../../types.ts'\r\n\r\ninterface State {\r\n  testFiles: Map<string, TestFileRuntimeAggregation>\r\n}\r\n\r\nconst UP_ARROW = '\\u001B[A'\r\nconst DOWN_ARROW = '\\u001B[B'\r\nconst RIGHT_ARROW = '\\u001B[C'\r\nconst LEFT_ARROW = '\\u001B[D'\r\nconst CTRL_C = '\\x03'\r\n\r\nconst useError = (subject) => {\r\n  const [error, setError] = useState<Error>()\r\n  useEffect(() => {\r\n    const subscription =\r\n      subject.subscribe(\r\n        () => {},\r\n        error => setError(error))\r\n    return () => subscription.unsubscribe()\r\n  }, [])\r\n\r\n  return [\r\n    error,\r\n    error\r\n      ? <Color red>\r\n        <Box flexDirection=\"column\">\r\n          <Box>An internal error happened, you should probably report the error here: https://github.com/FKN48/EPK/issues</Box>\r\n        </Box>\r\n      </Color>\r\n      : ''\r\n  ]\r\n}\r\n\r\nconst useFilesState = (subject) => {\r\n  const [{ testFiles }, setFilesState] = useState<State>({\r\n    testFiles: new Map()\r\n  })\r\n\r\n  useEffect(() => {\r\n    const subscription = subject.subscribe(report => setFilesState(report))\r\n    return () => subscription.unsubscribe()\r\n  }, [])\r\n\r\n  return Array.from(testFiles.values())\r\n}\r\n\r\nconst getRenderableNames = (terminalWidth, names: string[], startAt): [[string, number][], number, boolean] =>\r\n  Array.from(names)\r\n    .splice(startAt)\r\n    .reduce(([list, max, found = false], name, i) =>\r\n      found\r\n        ? [list, max, true]\r\n        : getStrLength(`${list.join(' ')} ${name}`) > terminalWidth\r\n          ? [list, max, true]\r\n          : [[...list, [name, i + startAt]], i + startAt, false]\r\n    , [[], 0, false])\r\n\r\nconst useTabs = ({ stdin, setRawMode }, aggregatedTestFiles: TestFileRuntimeAggregation[]): [TestFileRuntimeAggregation, JSX.Element] => {\r\n  /**\r\n   * Level 0 = folder\r\n   * Level 1 = file\r\n   */\r\n  const [level, setLevel] = useState<number>(0)\r\n  const [[selected, scroll], setState] = useState<[number, number]>([0, 0])\r\n\r\n  const folderTestFileMap =\r\n    aggregatedTestFiles\r\n      .map(({name, displayName}) => [path.dirname(name), displayName])\r\n      .reduce((map, [folder, file]) =>\r\n        (map.get(folder) ||\r\n        map.set(folder, []).get(folder)).push(file) &&\r\n        map\r\n      , new Map<string, string[]>())\r\n      \r\n  const terminalWidth = process.stdout.columns\r\n  const terminalHeight = process.stdout.rows\r\n\r\n  const folderNames = Array.from(folderTestFileMap.keys())\r\n  const fileNames = Array.from(folderTestFileMap.values()).flat()\r\n\r\n  const names = level ? folderNames : fileNames\r\n\r\n  const [, _maxRenderableNames] = getRenderableNames(terminalWidth, names, scroll)\r\n\r\n  const needScroller = _maxRenderableNames !== names.length\r\n\r\n  const [renderNames, maxRenderableNames] = getRenderableNames(terminalWidth - getStrLength(`⬅️➡️`), names, scroll)\r\n\r\n  const handleKeyPress = data => {\r\n    const s = String(data)\r\n    if (s === CTRL_C) {\r\n      setRawMode(false)\r\n      process.exit()\r\n    }\r\n    if (s === RIGHT_ARROW) {\r\n      setState(([selected, scroll]) => [\r\n        selected + (selected < names.length - 1 ? 1 : 0),\r\n        scroll + (selected < names.length - 1 && selected === scroll + maxRenderableNames ? 1 : 0)\r\n      ])\r\n    }\r\n    if (s === LEFT_ARROW) {\r\n      setState(([selected, scroll]) => [\r\n        selected - (selected > 0 ? 1 : 0),\r\n        scroll - (scroll > 0 && selected === scroll ? 1 : 0)\r\n      ])\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setRawMode(true)\r\n    stdin.on('data', handleKeyPress)\r\n    return () => {\r\n      stdin.removeListener('data', handleKeyPress)\r\n    }\r\n  })\r\n\r\n  // remove set raw mode, as it might interfere with CTRL-C\r\n  useEffect(() => () => setRawMode(false), [])\r\n  return [\r\n    aggregatedTestFiles[selected],\r\n    <Box width={terminalWidth} alignItems=\"center\" justifyContent=\"space-around\">\r\n        <Box>\r\n          {\r\n            needScroller &&\r\n            renderNames[0][1] !== 0\r\n              ? '⬅️'\r\n              : ''\r\n          }\r\n        </Box>\r\n        {\r\n          renderNames\r\n            .map(([name, i]) => {\r\n              const testFiles =\r\n                Array.from(\r\n                  aggregatedTestFiles\r\n                    .find(({displayName}) => displayName === name)\r\n                    .testFiles.values())\r\n\r\n              const hasErrors =\r\n                testFiles.some(({tests}) =>\r\n                  tests?.some(({logs}) =>\r\n                    logs?.some(({type}) => type === LOG.error)))\r\n\r\n              return (\r\n                <Box key={name}>\r\n                  <ColorPipe styles={`${hasErrors ? 'red' : 'greenBright'}${i === selected ? '.bold.underline' : ''}`}>\r\n                    {prettifyPath(name)}\r\n                  </ColorPipe>\r\n                </Box>\r\n              )\r\n            })\r\n            .reverse()\r\n            .reduce((arr, value, i) =>\r\n              i\r\n                ? [...arr, [value, <Text key={i}> </Text>]]\r\n                : [...arr, [value]]\r\n              , [])\r\n            .reverse()\r\n            .flat(Infinity)\r\n        }\r\n        <Box>\r\n          {\r\n            needScroller &&\r\n            renderNames[renderNames.length - 1][1] !== names.length - 1\r\n              ? '➡️'\r\n              : ''\r\n          }\r\n        </Box>\r\n      </Box>\r\n  ]\r\n}\r\n\r\nconst useTestFile = (aggregatedTestFile: TestFileRuntimeAggregation) => {\r\n  // todo:\r\n  // replace tests because TestFileRuntimeAggregation#tests are analyzed tests,\r\n  // they're not tested so they'll not have execution error logs\r\n  const color =\r\n    aggregatedTestFile?.tests &&\r\n    'executionEnd'\r\n      ? aggregatedTestFile.tests.some(({logs}) => logs?.some(({type}) => type === LOG.error))\r\n        ? 'red'\r\n        : 'greenBright'\r\n      : ''\r\n\r\n  return aggregatedTestFile\r\n    ? <Box flexDirection=\"column\">\r\n      <Box>\r\n        <ColorPipe styles={color}>\r\n          {aggregatedTestFile.displayName}\r\n        </ColorPipe>\r\n      </Box>\r\n      <Box  flexDirection=\"column\" paddingLeft={2}>\r\n        {\r\n          aggregatedTestFile.tests?.map(({ description, logs }) => (\r\n            <Box key={description}>\r\n              <ColorPipe\r\n                styles={\r\n                  logs\r\n                    ? logs.some(({type}) => type === LOG.error)\r\n                      ? 'red'\r\n                      : 'greenBright'\r\n                    : ''\r\n                }>\r\n                {description}\r\n              </ColorPipe>\r\n            </Box>\r\n          ))\r\n        }\r\n      </Box>\r\n    </Box>\r\n    : ''\r\n}\r\n\r\nexport default ({ stdin, setRawMode, subject }) => {\r\n  const [ error, errorElement ] = useError(subject)\r\n  const aggregatedTestFiles = useFilesState(subject)\r\n  const [ selected, tabsElement ] = useTabs({ stdin, setRawMode }, aggregatedTestFiles)\r\n  const fileDescription = useTestFile(selected)\r\n  return <Box flexDirection=\"column\">\r\n    { fileDescription }\r\n    { tabsElement }\r\n    { errorElement }\r\n  </Box>\r\n}\r\n\r\n// testFiles.length &&\r\n// Array.from(testFiles).map(testFile =>\r\n//   <File key={testFile.name} testFile={testFile}/>) || ''\r\n// <BorderBox borderStyle=\"round\">\r\n//   {\r\n//     Array.from(state.testFiles).map(([,testFile]) =>\r\n//       <File key={testFile.name} testFile={testFile}/>)\r\n//   }\r\n// </BorderBox> || ''\r\n","import { render, StdinContext } from 'ink'\r\nimport React from 'react'\r\nimport Reporter from './reporter.tsx'\r\n\r\nexport default subject =>\r\n  render(\r\n    <StdinContext.Consumer>\r\n      {({ stdin, setRawMode }) => (\r\n        <Reporter stdin={stdin} setRawMode={setRawMode} subject={subject}/>\r\n      )}\r\n    </StdinContext.Consumer>\r\n  )\r\n","import path from 'path'\r\n\r\nimport { installImport, Observable as AsyncObservable, cwd } from '../utils/index.ts'\r\n\r\nlet imports\r\n\r\nexport default options =>\r\n  AsyncObservable(async observer => {\r\n    const { port } = options\r\n    if (!imports) imports = await installImport(['koa', 'koa-static', 'koa-mount'])\r\n\r\n    const [ Koa, serve, mount ] = imports\r\n\r\n    const app = new Koa()\r\n\r\n    const epk = new Koa()\r\n    epk.use(serve(path.resolve(__dirname, '..', 'lib')))\r\n\r\n    const tests = new Koa()\r\n    tests.use(serve(path.resolve(cwd, '.epk', 'dist')))\r\n\r\n    app.use(mount('/epk', epk))\r\n    app.use(mount('/tests', tests))\r\n\r\n    await app.listen(port)\r\n    \r\n    observer.next(app)\r\n\r\n    return () => app.close()\r\n  })\r\n","import path from 'path'\r\n\r\nimport 'v8-compile-cache'\r\nimport getPort from 'get-port'\r\nimport program from 'commander'\r\nimport chalk from 'chalk'\r\n\r\nimport pkg from '../../package.json'\r\nimport Tester from '../core/index.ts'\r\nimport CLIReporter from '../reporters/cli/index.tsx'\r\nimport Server from '../server/index.ts'\r\nimport { tap, take, shareReplay, filter } from 'rxjs/operators'\r\nimport { Subject } from 'rxjs'\r\nimport { REPORTER_EVENT } from '../types.ts'\r\n\r\nprocess.on('unhandledRejection', error => {\r\n  console.error(error)\r\n  process.exit(1)\r\n})\r\n\r\nprogram.version(pkg.version)\r\n\r\nconst commonOptions = {\r\n  '--no-cache': 'disable the filesystem cache',\r\n  '--cache-dir <path>': 'set the cache directory. defaults to \".parcel-cache\"',\r\n  '--no-source-maps': 'disable sourcemaps',\r\n  '--no-autoinstall': 'disable autoinstall',\r\n  '--public-url <url>': 'set the public URL to serve on. defaults to \"/\"',\r\n  '--log-level <level>': [\r\n    'set the log level, either \"none\", \"error\", \"warn\", \"info\", or \"verbose\".',\r\n    /^(none|error|warn|info|verbose)$/\r\n  ],\r\n  '-T, --target': [\r\n    'target for the test, either \"browser\" or \"node\"',\r\n    /^(browser|node)$/\r\n  ],\r\n  '-V, --version': 'output the version number'\r\n}\r\n\r\nprogram\r\n  .command('help [command]')\r\n  .description('display help information for a command')\r\n  .action(command =>\r\n    (\r\n      program\r\n        .commands\r\n        .find(c =>\r\n          c.name() === command) ||\r\n      program)\r\n      .help())\r\n\r\nprogram.on('--help', function() {\r\n  console.log('')\r\n  console.log(`  Run \\`${chalk.bold('epk help <command>')}\\` for more information on specific commands`)\r\n  console.log('')\r\n})\r\n\r\nconst run = async (entries: Array<string>, command: any) => {\r\n  entries = entries.map(entry => path.resolve(entry))\r\n\r\n  if (entries.length === 0) return console.log('No entries found')\r\n\r\n  const subject = new Subject()\r\n\r\n  CLIReporter(\r\n    // @ts-ignore\r\n    subject\r\n    // @ts-ignore\r\n    |> filter(({ type }) => type === REPORTER_EVENT.STATE)\r\n  )\r\n\r\n  await new Promise(resolve => setTimeout(resolve, 0))\r\n  subject.next({ type: REPORTER_EVENT.PORT_SEARCH })\r\n  const port = await getPort({ port: command.port || 10485 })\r\n  subject.next({ type: REPORTER_EVENT.PORT_FOUND, port })\r\n\r\n  // @ts-ignore\r\n  const serverObservable = Server({ port }) |> shareReplay(1)\r\n  subject.next({ type: REPORTER_EVENT.WEB_SERVER_START })\r\n  serverObservable.subscribe()\r\n\r\n  // @ts-ignore\r\n  await (serverObservable |> take(1)).toPromise()\r\n  subject.next({ type: REPORTER_EVENT.WEB_SERVER_READY, port })\r\n\r\n  const testerObservable =\r\n    // @ts-ignore\r\n    Tester(({\r\n      entryFiles: entries,\r\n      watch: command.watch,\r\n      target: command.target,\r\n      port\r\n    }))\r\n\r\n  // @ts-ignore\r\n  testerObservable.subscribe(\r\n    report => subject.next(report),\r\n    error => {\r\n      subject.error(error)\r\n      setTimeout(() => process.exit(1), 0)\r\n      throw error\r\n    },\r\n    () => subject.complete())\r\n}\r\n\r\nconst watch = program\r\n  .command('watch [input...]')\r\n  .description('starts the tester in watch mode')\r\n  .action(run)\r\n\r\napplyOptions(watch, commonOptions)\r\n\r\nconst test = program\r\n  .command('test [input...]')\r\n  .description('test once')\r\n  .action(run)\r\n\r\napplyOptions(test, commonOptions)\r\n\r\nfunction applyOptions(cmd, options) {\r\n  for (let opt in options) {\r\n    cmd.option(\r\n      opt,\r\n      ...(Array.isArray(options[opt]) ? options[opt] : [options[opt]])\r\n    )\r\n  }\r\n}\r\n\r\n// Make watch the default command except for --help\r\nlet args = process.argv\r\nif (args[2] === '--help' || args[2] === '-h') args[2] = 'help'\r\nif (!args[2] || !program.commands.some(c => c.name() === args[2])) {\r\n  args.splice(2, 0, 'watch')\r\n}\r\nprogram.parse(args)\r\n"],"names":["options","undefined","Observable","create","observer","bundler","ParcelBundler","entryFiles","addAssetType","path","resolve","__dirname","on","bundle","next","name","parcelBundle","buildEndTime","Date","now","buildStartTime","emitError","err","error","catch","stop","EPK_SUBJECT","EPK_RUNTIME_SUBJECT","EPK_FUNCTION_PROPERTY_PLACEHOLDER","MESSAGE","messageMap","Map","GET_TESTS","GET_TESTS_RESPONSE","RUN_TESTS","RUN_TESTS_RESPONSE","RUN_TEST","RUN_TEST_RESPONSE","PARCEL_REPORTER_EVENT","REPORTER_EVENT","TARGET","BROWSER","RUNTIME","LOG","_access","promisify","fs","access","cwd","process","filename","_path","constants","F_OK","then","prettifyPath","relative","pathToTestUrl","outDir","port","normalize","replace","sep","pathToEpkUrl","readFile","writeFile","getClosestPackageJSONDirPath","_cwd","parentPath","getDependencies","data","code","JSON","parse","dependencies","devDependencies","Set","builtinModules","Object","keys","installPackages","dev","yarn","Promise","child","spawn","map","split","shift","stdio","shell","platform","importModules","names","all","packageObservable","packagePath","queuedDeps","queuedDevDeps","pending","run","modules","deps","qDeps","add","allCurrentModules","some","includes","Array","from","delete","depQueue","devDepQueue","Subject","subject","filter","seenDeps","seenDevDep","seenDep","difference","flat","Infinity","bufferTime","arr","length","depUpdate","devDepUpdate","obs","mergeMap","toPromise","shareReplay","subscribe","reject","queue","depsUpdate","missingDeps","size","switchMap","has","skip","take","packages","getPackage","get","set","isArray","func","unsubscribe","_value","asyncObservable","value","stringify","_stringify","key","val","_parse","_","pptr","AsyncObservable","installImport","rootBrowser","launch","devtools","emptyHTMLFilePath","emptyPageUrl","browser","createIncognitoBrowserContext","page","newPage","inMessages","ReplaySubject","exposeFunction","subjectHandle","outMessages","evaluate","loadFile","testFile","goto","addScriptTag","url","evaluateHandle","subjectGlobalProperty","globalThis","close","runtimeMap","CHROME","chrome","runtimeName","runtime","args","provider","watch","target","parcel","Parcel","cache","cacheDir","takeUntil","publish","refCount","tap","type","BUILD_START","BUILD_SUCCESS","runtimeNames","NODE","browsers","runtimeProvider","getRuntimeProvider","makeRuntimeProvider","tests","mergeScan","acc","testBundle","of","childBundles","isEmpty","testFiles","assets","entryAsset","hashes","hash","displayName","scan","runtimes","fileTests","reduce","aggregations","values","STATE","complete","RIGHT_ARROW","LEFT_ARROW","CTRL_C","useError","setError","useState","useEffect","subscription","React","Color","Box","useFilesState","setFilesState","report","getRenderableNames","terminalWidth","startAt","splice","list","max","found","i","getStrLength","join","useTabs","stdin","setRawMode","aggregatedTestFiles","level","setLevel","selected","scroll","setState","folderTestFileMap","dirname","folder","file","push","stdout","columns","terminalHeight","rows","folderNames","fileNames","_maxRenderableNames","needScroller","renderNames","maxRenderableNames","handleKeyPress","s","String","exit","removeListener","find","hasErrors","logs","reverse","Text","useTestFile","aggregatedTestFile","color","description","errorElement","tabsElement","fileDescription","render","StdinContext","imports","Koa","serve","mount","app","epk","use","listen","console","program","version","pkg","commonOptions","command","action","commands","c","help","log","chalk","bold","entries","entry","CLIReporter","setTimeout","PORT_SEARCH","getPort","PORT_FOUND","serverObservable","Server","WEB_SERVER_START","WEB_SERVER_READY","testerObservable","Tester","applyOptions","test","cmd","opt","option","argv"],"mappings":"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"}