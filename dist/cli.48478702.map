{"version":3,"sources":["cli/parser.ts","cli/reporter.ts","cli/index.ts"],"names":["helpMessage","chalk","bold","list","v","split","action","args","program","command","description","option","undefined","_args","commands","find","c","name","help","on","_","console","log","process","argv","some","splice","parse","options","opts","formatTest","error","message","gray","shift","trim","red","join","formatTests","tests","length","underline","map","formatAnalyzing","files","analyzingFiles","filter","type","FileType","ANALYZE","formatErrors","reset","rest","formatFileStatus","isFinished","every","finishedTests","erroredTests","hasErrors","str","format","state","val","logger","clear","progress","grey","file","foundFile","currentFile","push","Object","assign","TEST","test","foundTest","fileIsDone","DONE","watch","target","entryFiles","browsers","subscribe","err"],"mappings":"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","file":"cli.48478702.map","sourceRoot":"..\\src","sourcesContent":["import program from 'commander'\r\nimport chalk from 'chalk'\r\n\r\nconst helpMessage = `\r\nRun \\`${chalk.bold('epk help <command>')}\\` for more information on specific commands\r\n`\r\n\r\nconst list = v => v.split(',')\r\n\r\nexport let action, args\r\n\r\nprogram\r\n  .command('serve [input...]')\r\n  .description('starts a development server')\r\n  .option('-d, --out-dir path', 'Output directory')\r\n  .option('-t, --target [target]', 'Set parcel target to [node, browser, electron]', undefined, 'browser')\r\n  .option('-b, --browsers [target]', 'Set parcel target to [chrome, firefox]', list, ['chrome'])\r\n  .action(_args => {\r\n    action = 'serve'\r\n    args = _args\r\n  })\r\n\r\nprogram\r\n  .command('help [command]')\r\n  .description('display help information for a command')\r\n  .action(command =>\r\n    (program\r\n        .commands\r\n        .find(c =>\r\n          c.name() === command) ||\r\n    program).help())\r\n\r\nprogram.on('--help', _ => console.log(helpMessage))\r\n\r\n// Make serve the default command except for --help\r\nconst _args = process.argv\r\nif (_args[2] === '--help' || _args[2] === '-h') _args[2] = 'help'\r\nif (!_args[2] || !program.commands.some(c => c.name() === _args[2])) {\r\n  _args.splice(2, 0, 'serve')\r\n}\r\n\r\nexport const command = program.parse(_args)\r\nexport const options = program.opts()\r\n","import { tap, scan } from 'rxjs/operators'\r\nimport { Context, File, Test, FileType } from '../types'\r\nimport chalk from 'chalk'\r\nimport logger from './logger'\r\nimport { prettifyPath } from '../utils'\r\n\r\n  // |> tap(({ entryFiles  }: Context) => {\r\n  //   logger.clear()\r\n  //   logger.progress(`\\n${chalk.grey(`Building ${entryFiles.map(prettifyPath).join(', ')}`)}`)\r\n  // })\r\n\r\nconst formatTest = ({ description, error: { message } }: Test) => `\\\r\n ${description}\r\n ${chalk.gray(\r\n   message\r\n     .split('\\n')\r\n     .shift()\r\n     .trim())}\r\n\r\n${chalk.red(\r\n   message\r\n     .split('\\n')\r\n     .splice(2)\r\n     .join('\\n'))}`\r\n \r\n \r\nconst formatTests = ({ name, tests = [] }: File) =>\r\n  tests.length\r\n  ? `\\\r\n${chalk.underline(prettifyPath(name))}\r\n\r\n${tests\r\n    .map(formatTest)\r\n    .join('\\n')}`\r\n  : ''\r\n// buildTime, analyzeTime, testTime,\r\n// ${chalk.green(`Built in ${buildTime}.`)}\r\n// ${chalk.green(`Analyzed in ${analyzeTime}.`)}\r\n// ${chalk.green(`Tested in ${testTime}.`)}\r\n\r\nconst formatAnalyzing = (files: File[]) => {\r\n  const analyzingFiles = files.filter(({ type }) => FileType.ANALYZE === type)\r\n  return analyzingFiles.length\r\n    ? `Analyzing ${\r\n      analyzingFiles\r\n        .map(({ name }) => prettifyPath(name))\r\n        .join(', ')\r\n      }\\n\\n`\r\n    : ''\r\n}\r\n\r\nconst formatErrors = (files: File[]) =>\r\n`${chalk.reset.red(`Errors:`)}\r\n\r\n${chalk.reset(\r\n  files\r\n    .map(({ tests, ...rest }) => ({\r\n      tests: tests.filter(({ error }) => !!error),\r\n      ...rest\r\n    }))\r\n    .map(formatTests)\r\n    .join('\\n'))}`\r\n\r\nconst formatFileStatus = (files: File[]) => `\r\n${chalk.reset.bold.gray(`Files:`)}\r\n\r\n${files\r\n  .map(({ name, tests }) => {\r\n    const isFinished = tests.every(({ type }) => !!type)\r\n    const finishedTests = tests.filter(({ type }) => type)\r\n    const erroredTests = tests.filter(({ error }) => error)\r\n    const hasErrors = erroredTests.length\r\n    return chalk.reset[\r\n      !isFinished ? 'gray'\r\n      : hasErrors ? 'red'\r\n      : 'green'](`${prettifyPath(name)} ${finishedTests.length}(${finishedTests.length - erroredTests.length})/${tests.length}`)\r\n  })\r\n  .map(str => `  ${str}`)\r\n  .join('\\n')}`\r\n\r\n\r\nconst format = (files: File[]) => `\r\n${formatAnalyzing(files)}\\\r\n${formatErrors(files)}\\\r\n${formatFileStatus(files)}`\r\n\r\nexport default\r\n  options =>\r\n    scan((state, val: any) => { // File | Context\r\n      if (val.name === 'buildStart') {\r\n        logger.clear()\r\n        logger.progress(`\\n${chalk.grey(`Bundling...`)}`)\r\n        return { files: [] }\r\n      } else if (val.name === 'bundled') {\r\n        logger.progress(`\\n${chalk.grey(`Bundled`)}`)\r\n        return state\r\n      }\r\n      const file: File = val\r\n      const { files }: { files: File[] } = state\r\n\r\n      const foundFile = files.find(({ name }) => val.name === name)\r\n      const currentFile = foundFile || file\r\n      if (file.type === FileType.ANALYZE) {\r\n\r\n        const foundFile = files.find(({ name }) => val.name === name)\r\n        if (!foundFile) files.push(file)\r\n        else Object.assign(foundFile, file)\r\n\r\n      } else if(file.type === FileType.TEST) {\r\n\r\n        if (!currentFile.tests) currentFile.tests = []\r\n\r\n        const test: Test = file.test\r\n        const foundTest = currentFile.tests.find(({ description }) => test.description === description)\r\n\r\n        if (foundTest) Object.assign(foundTest, test)\r\n        else if (!foundTest) currentFile.tests.push(test)\r\n\r\n        const fileIsDone =\r\n          currentFile.tests.every(test => 'value' in test)\r\n\r\n        currentFile.type = fileIsDone ? FileType.DONE : FileType.TEST\r\n      }\r\n\r\n      const isFinished =\r\n        files.length &&\r\n        files.every(({ type }) =>\r\n          FileType.DONE === type)\r\n\r\n      logger[isFinished ? 'success' : 'progress'](format(files))\r\n      \r\n      return state\r\n    }, {})\r\n","import epk from '../core/index'\r\nimport { options, args } from './parser'\r\nimport cliReporter from './reporter'\r\nimport logger from './logger'\r\n\r\n// @ts-ignore\r\ncliReporter({})(epk({\r\n  watch: options.action === 'serve',\r\n  target: options.target,\r\n  entryFiles: args,\r\n  browsers: options.browsers\r\n})).subscribe(() => {}, err => logger.error(err))\r\n"]}