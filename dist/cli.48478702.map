{"version":3,"sources":["cli/parser.ts","cli/reporter.ts","cli/index.ts"],"names":["helpMessage","chalk","bold","list","v","split","action","args","program","command","description","option","undefined","_args","commands","find","c","name","help","on","_","console","log","process","argv","some","splice","parse","options","opts","state","val","logger","clear","progress","grey","watch","target","entryFiles","browsers","subscribe","err","error"],"mappings":"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","file":"cli.48478702.map","sourceRoot":"..\\src","sourcesContent":["import program from 'commander'\r\nimport chalk from 'chalk'\r\n\r\nconst helpMessage = `\r\nRun \\`${chalk.bold('epk help <command>')}\\` for more information on specific commands\r\n`\r\n\r\nconst list = v => v.split(',')\r\n\r\nexport let action, args\r\n\r\nprogram\r\n  .command('serve [input...]')\r\n  .description('starts a development server')\r\n  .option('-d, --out-dir path', 'Output directory')\r\n  .option('-t, --target [target]', 'Set parcel target to [node, browser, electron]', undefined, 'browser')\r\n  .option('-b, --browsers [target]', 'Set parcel target to [chrome, firefox]', list, ['chrome'])\r\n  .action(_args => {\r\n    action = 'serve'\r\n    args = _args\r\n  })\r\n\r\nprogram\r\n  .command('help [command]')\r\n  .description('display help information for a command')\r\n  .action(command =>\r\n    (program\r\n        .commands\r\n        .find(c =>\r\n          c.name() === command) ||\r\n    program).help())\r\n\r\nprogram.on('--help', _ => console.log(helpMessage))\r\n\r\n// Make serve the default command except for --help\r\nconst _args = process.argv\r\nif (_args[2] === '--help' || _args[2] === '-h') _args[2] = 'help'\r\nif (!_args[2] || !program.commands.some(c => c.name() === _args[2])) {\r\n  _args.splice(2, 0, 'serve')\r\n}\r\n\r\nexport const command = program.parse(_args)\r\nexport const options = program.opts()\r\n","import { tap, scan } from 'rxjs/operators'\r\nimport { Context } from '../types'\r\nimport chalk from 'chalk'\r\nimport logger from './logger'\r\n\r\n  // |> tap(({ entryFiles  }: Context) => {\r\n  //   logger.clear()\r\n  //   logger.progress(`\\n${chalk.grey(`Building ${entryFiles.map(prettifyPath).join(', ')}`)}`)\r\n  // })\r\n\r\nexport default\r\n  options =>\r\n    scan((state, val: File|Context) => {\r\n      if (val.name === 'buildStart') {\r\n        logger.clear()\r\n        logger.progress(`\\n${chalk.grey(`Bundling...`)}`)\r\n        return {}\r\n      } else if (val.name === 'bundled') {\r\n        logger.progress(`\\n${chalk.grey(`Bundled`)}`)\r\n        return state\r\n      }\r\n      logger.progress(`\\n${chalk.grey(`...`)}`)\r\n      return {\r\n        ...state,\r\n        ...val\r\n      }\r\n    }, {})\r\n    \r\n    // {\r\n    //   let context\r\n\r\n    //   // @ts-ignore\r\n    //   return tester\r\n    //           // @ts-ignore\r\n    //           |> tap(val => {\r\n\r\n    //           })\r\n    // }\r\n","import epk from '../core/index'\r\nimport { options, args } from './parser'\r\nimport cliReporter from './reporter'\r\nimport logger from './logger'\r\n\r\n// @ts-ignore\r\ncliReporter({})(epk({\r\n  watch: options.action === 'serve',\r\n  target: options.target,\r\n  entryFiles: args,\r\n  browsers: options.browsers\r\n})).subscribe(() => {}, err => logger.error(err))\r\n"]}