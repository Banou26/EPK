{"version":3,"sources":["cli/parser.ts","cli/reporter.ts","cli/index.ts"],"names":["helpMessage","chalk","bold","list","v","split","action","args","program","command","description","option","undefined","_args","commands","find","c","name","help","on","_","console","log","process","argv","some","splice","parse","options","opts","showAssertError","message","gray","shift","trim","red","map","str","join","showStackError","stack","formatTest","errors","originalStack","formatTests","tests","length","underline","formatAnalyzing","files","analyzingFiles","filter","type","FileType","ANALYZE","formatErrors","reset","rest","formatFileStatus","isFinished","every","finishedTests","erroredTests","hasErrors","successful","format","state","val","clear","progress","grey","bundle","file","currentFile","foundFile","Object","assign","push","TEST","test","foundTest","POST_ANALYZE","fileIsDone","DONE","cliReporter","watch","target","entryFiles","browsers","subscribe","err","logger","error"],"mappings":"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","file":"cli.3d0ce7f2.map","sourceRoot":"..\\src","sourcesContent":["import program from 'commander'\r\nimport chalk from 'chalk'\r\n\r\nconst helpMessage = `\r\nRun \\`${chalk.bold('epk help <command>')}\\` for more information on specific commands\r\n`\r\n\r\nconst list = v => v.split(',')\r\n\r\nexport let action, args\r\n\r\nprogram\r\n  .command('serve [input...]')\r\n  .description('starts a development server')\r\n  .option('-d, --out-dir path', 'Output directory')\r\n  .option('-t, --target [target]', 'Set parcel target to [node, browser, electron]', undefined, 'browser')\r\n  .option('-b, --browsers [target]', 'Set parcel target to [chrome, firefox]', list, ['chrome'])\r\n  .action(_args => {\r\n    action = 'serve'\r\n    args = _args\r\n  })\r\n\r\nprogram\r\n  .command('help [command]')\r\n  .description('display help information for a command')\r\n  .action(command =>\r\n    (program\r\n        .commands\r\n        .find(c =>\r\n          c.name() === command) ||\r\n    program).help())\r\n\r\nprogram.on('--help', _ => console.log(helpMessage))\r\n\r\n// Make serve the default command except for --help\r\nconst _args = process.argv\r\nif (_args[2] === '--help' || _args[2] === '-h') _args[2] = 'help'\r\nif (!_args[2] || !program.commands.some(c => c.name() === _args[2])) {\r\n  _args.splice(2, 0, 'serve')\r\n}\r\n\r\nexport const command = program.parse(_args)\r\nexport const options = program.opts()\r\n","import { tap, scan } from 'rxjs/operators'\r\nimport { Context, File, Test, FileType } from '../types'\r\nimport chalk from 'chalk'\r\nimport logger from './logger'\r\nimport { prettifyPath } from '../utils'\r\n\r\n  // |> tap(({ entryFiles  }: Context) => {\r\n  //   logger.clear()\r\n  //   logger.progress(`\\n${chalk.grey(`Building ${entryFiles.map(prettifyPath).join(', ')}`)}`)\r\n  // })\r\n\r\nconst showAssertError = message => `\\\r\n   ${chalk.gray(\r\n      message\r\n        .split('\\n')\r\n        .shift()\r\n        .trim())}\r\n\r\n${chalk.red(\r\n    message\r\n      .split('\\n')\r\n      .splice(2)\r\n      .map(str => `  ${str}`)\r\n      .join('\\n'))}`\r\n\r\nconst showStackError = stack =>\r\n  chalk.red(\r\n    stack\r\n      .split('\\n')\r\n      .map(str => `    ${str.trim()}`)\r\n      .join('\\n'))\r\n\r\nconst formatTest = ({ description, errors }: Test) => `\\\r\n  ${description}\r\n${errors\r\n  .map(({ name, message, stack, originalStack }) =>\r\n    name === 'AssertionError'\r\n      ? showAssertError(message)\r\n      : showStackError(originalStack || stack))\r\n  .join('\\n\\n')}`\r\n \r\n \r\nconst formatTests = ({ name, tests = [] }: File) =>\r\n  tests.length\r\n  ? `\r\n ${chalk.underline(prettifyPath(name))}\r\n\r\n${tests\r\n    .map(formatTest)\r\n    .join('\\n')}`\r\n  : ''\r\n// buildTime, analyzeTime, testTime,\r\n// ${chalk.green(`Built in ${buildTime}.`)}\r\n// ${chalk.green(`Analyzed in ${analyzeTime}.`)}\r\n// ${chalk.green(`Tested in ${testTime}.`)}\r\n\r\nconst formatAnalyzing = (files: File[]) => {\r\n  const analyzingFiles = files.filter(({ type }) => FileType.ANALYZE === type)\r\n  return analyzingFiles.length\r\n    ? `Analyzing ${\r\n      analyzingFiles\r\n        .map(({ name }) => prettifyPath(name))\r\n        .join(', ')\r\n      }\\n\\n`\r\n    : ''\r\n}\r\n\r\nconst formatErrors = (files: File[]) => `\\\r\n${chalk.reset.red(`Errors:`)}\r\n${chalk.reset(\r\n  files\r\n    .map(({ tests, ...rest }) => ({\r\n      tests: tests.filter(({ errors }) => !!(errors && errors.length)),\r\n      ...rest\r\n    }))\r\n    .map(formatTests)\r\n    .join('\\n'))}`\r\n\r\nconst formatFileStatus = (files: File[]) => `\r\n${chalk.reset(`Files:`)}\r\n${files\r\n  .map(({ name, tests }) => {\r\n    const isFinished = tests.every(({ type }) => !!type)\r\n    const finishedTests = tests.filter(({ type }) => type)\r\n    const erroredTests = tests.filter(({ errors }) => errors?.length)\r\n    const hasErrors = erroredTests.length\r\n    const successful = hasErrors ? `(${finishedTests.length - erroredTests.length})` : ''\r\n    return chalk.reset[\r\n      !isFinished ? 'gray'\r\n      : hasErrors ? 'red'\r\n      : 'green'](`${prettifyPath(name)} ${finishedTests.length}${successful}/${tests.length}`)\r\n  })\r\n  .map(str => ` ${str}`)\r\n  .join('\\n')}`\r\n\r\n\r\nconst format = (files: File[]) => `\r\n${formatAnalyzing(files)}\\\r\n${formatErrors(files)}\\\r\n${formatFileStatus(files)}`\r\n\r\nexport default\r\n  options =>\r\n    scan((state, val: any) => { // File | Context\r\n      if (val.name === 'buildStart') {\r\n        logger.clear()\r\n        logger.progress(`\\n${chalk.grey(`Bundling...`)}`)\r\n        return { files: [] }\r\n      } else if (val.name === 'bundled') {\r\n        logger.progress(`\\n${chalk.grey(`Bundled`)}`)\r\n        return { bundle: val.bundle, ...state }\r\n      }\r\n      const file: File = val\r\n      const { files }: { files: File[] } = state\r\n\r\n      const foundFile = files.find(({ name }) => val.name === name)\r\n      const currentFile = foundFile || file\r\n      if (file.type === FileType.ANALYZE) {\r\n\r\n        const foundFile = files.find(({ name }) => val.name === name)\r\n        if (!foundFile) files.push(file)\r\n        else Object.assign(foundFile, file)\r\n\r\n      } else if(file.type === FileType.TEST) {\r\n\r\n        if (!currentFile.tests) currentFile.tests = []\r\n\r\n        const test: Test = file.test\r\n        const foundTest = currentFile.tests.find(({ description }) => test.description === description)\r\n\r\n        if (foundTest) Object.assign(foundTest, test)\r\n        else if (!foundTest) currentFile.tests.push(test)\r\n\r\n      } else if(file.type === FileType.POST_ANALYZE) {\r\n\r\n        if (!currentFile.tests) currentFile.tests = []\r\n\r\n        const test: Test = file.test\r\n        const foundTest = currentFile.tests.find(({ description }) => test.description === description)\r\n\r\n        if (foundTest) Object.assign(foundTest, test)\r\n        else if (!foundTest) currentFile.tests.push(test)\r\n\r\n        const fileIsDone =\r\n          currentFile.tests.every(test => 'value' in test)\r\n\r\n        currentFile.type = fileIsDone ? FileType.DONE : FileType.POST_ANALYZE\r\n      }\r\n\r\n      const isFinished =\r\n        files.length &&\r\n        files.every(({ type }) =>\r\n          FileType.DONE === type)\r\n\r\n      logger[isFinished ? 'success' : 'progress'](format(files))\r\n      \r\n      return state\r\n    }, undefined)\r\n","import epk from '../core/index'\r\nimport { action, options, args } from './parser'\r\nimport CliReporter from './reporter'\r\nimport logger from './logger'\r\n\r\n// @ts-ignore\r\nconst cliReporter =\r\n  epk({\r\n    watch: action === 'serve',\r\n    target: options.target,\r\n    entryFiles: args,\r\n    browsers: options.browsers\r\n  })\r\n  // @ts-ignore\r\n  |> CliReporter({})\r\n\r\ncliReporter.subscribe(() => {}, err => logger.error(err))\r\n"]}