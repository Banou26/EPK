{"version":3,"file":"cli.js","sources":["../src/utils/async-observable.ts","../src/parcel/index.ts","../src/core/task.ts","../src/runtimes/chrome.ts","../src/runtimes/index.ts","../src/core/index.ts","../src/cli/index.ts"],"sourcesContent":["import { Observable } from 'rxjs'\n\nexport default <T>(func: Function): Observable<T> =>\n  Observable.create(observer => {\n    const unsubscribe = func(observer)\n    return async () => (await unsubscribe)?.()\n  })\n","import Parcel from '@parcel/core'\r\n\r\nimport AsyncObservable from '../utils/async-observable.ts'\r\n\r\nexport enum PARCEL_REPORTER_EVENT {\r\n  BUILD_START = 'buildStart',\r\n  BUILD_PROGRESS = 'buildProgress',\r\n  BUILD_SUCCESS = 'buildSuccess',\r\n  BUILD_FAILURE = 'buildFailure',\r\n  LOG = 'log'\r\n}\r\n\r\nexport default (initialParcelOptions) =>\r\n  AsyncObservable(async observer => {\r\n    const parcel = new Parcel({\r\n      entries: ['tests/unit/index_test.ts'],\r\n      targets: {\r\n        test: {\r\n          distDir: '.epk/dist/browser',\r\n          browsers: ['last 1 Chrome versions'] // [\"> 1%\", \"not dead\"]\r\n        }\r\n      },\r\n      sourceMaps: true,\r\n      minify: true,\r\n      scopeHoist: true\r\n    })\r\n    \r\n    const { unsubscribe } = await parcel.watch((err, build) => {\r\n      if (err) observer.throw(err)\r\n      observer.next(build)\r\n    })\r\n\r\n    return () => unsubscribe()\r\n  })\r\n","import { Observable } from 'rxjs'\r\n\r\nexport enum TASK_TYPE {\r\n  PRE_ANALYZE = 'preAnalyze',\r\n  RUN = 'run',\r\n  ANALYZE = 'analyze'\r\n}\r\n\r\nexport enum TASK_STATUS {\r\n  START = 'start',\r\n  READY = 'ready',\r\n  END = 'end',\r\n  CANCEL = 'cancel'\r\n}\r\n\r\nexport interface Task {\r\n  type: TASK_TYPE\r\n  data: any\r\n}\r\n\r\nexport interface TaskMessage {\r\n  type: TASK_TYPE\r\n  status: TASK_STATUS\r\n  data?: any\r\n}\r\n\r\n// export default\r\n//   (task: Task) =>\r\n//     messages =>\r\n//       messages\r\n//       |> \r\n\r\n\r\n// export default (task: Task) =>\r\n//   Observable.create(observer => {\r\n//     let _observer\r\n//     const task = Observable.create<TaskMessage>(observer => {\r\n//       _observer = observer\r\n//       observer.next({ type: TASK_STATUS.START })\r\n//       return () => observer.next({ type: TASK_STATUS.CANCEL })\r\n//     })\r\n//     workerFarm.next(task)\r\n//     return () => _observer.complete()\r\n//   })\r\n","import install from '../utils.ts'\r\n\r\nexport default () => {\r\n  \r\n}","import { finalize } from 'rxjs/operators'\r\n\r\nimport { of } from 'rxjs'\r\nimport chrome from './chrome.ts'\r\n\r\nconst runtimeMap = new Map([\r\n  ['chrome', chrome]\r\n])\r\n\r\nexport default options => {\r\n  const runtimeSubjects = new Map()\r\n  const runtimes = new Map()\r\n\r\n  return of(\r\n    (runtimeName, task) => {\r\n      if (!runtimes.has(runtimeName)) {\r\n        const subject = new Subject()\r\n        runtimeSubjects.set(runtimeName, subject)\r\n        runtimes.set(runtimeName, runtimeMap.get(runtimeName)(subject))\r\n      } else {\r\n        const subject = runtimeSubjects.get(runtimeName)\r\n        subject.next(task)\r\n      }\r\n    }\r\n  )\r\n  |> finalize(() => {\r\n    for (const [, subject] of runtimeSubjects) {\r\n      subject.complete()\r\n    }\r\n  })\r\n}\r\n","import { Observable, of, generate, from, BehaviorSubject, zip, combineLatest } from 'rxjs'\r\nimport { takeUntil, publish, filter, map, mapTo, switchMap, groupBy, mergeMap, tap, skip, toArray } from 'rxjs/operators'\r\nimport browsersList from 'browserslist'\r\n\r\nimport Parcel from '../parcel/index.ts'\r\nimport { PARCEL_REPORTER_EVENT } from '../parcel/index.ts'\r\nimport WorkerFarm from '../workerFarm/index.ts'\r\nimport Task, { TASK_TYPE, TASK_STATUS } from './task.ts'\r\nimport emit from '../utils/emit.ts'\r\nimport AsyncObservable from '../utils/async-observable.ts'\r\nimport runtimeFactory from '../runtimes/index.ts'\r\nimport preAnalyze from './pre-analyzer.ts'\r\n\r\nexport default (parcelOptions) =>\r\n  combineLatest(\r\n    Parcel(parcelOptions),\r\n    runtimeFactory()\r\n  )\r\n  |> switchMap((bundle, Runtime) =>\r\n    bundle\r\n    |> mergeMap(({ changedAssets }) => from(changedAssets.values()))\r\n    |> map(asset => ({\r\n        engines: [\r\n          ...browsersList(asset.env.engines.browsers)\r\n            .map(str =>\r\n              str\r\n                .split(' ')\r\n                .shift()\r\n            )\r\n        ],\r\n        asset\r\n      })\r\n    )\r\n    |> mergeMap(({engines, asset}) =>\r\n      from(engines)\r\n      |> mergeMap(runtime =>\r\n        run(runtime, { type: TASK_TYPE.PRE_ANALYZE }))\r\n    )\r\n  )\r\n\r\n  // AsyncObservable(observer => {\r\n  //   const bundle =\r\n  //     (Parcel(parcelOptions)\r\n  //     |> publish())\r\n  //       .refCount()\r\n  \r\n  //   const analyze =\r\n  //     bundle\r\n  //     |> switchMap(bundle =>\r\n  //       of(bundle)\r\n  //       |> mergeMap(({ changedAssets }) => from(changedAssets.values()))\r\n  //       |> map(asset => ({ asset }))\r\n  //       |> mergeMap(asset =>\r\n  //         of(asset)\r\n  //         |> )\r\n  //       |> groupBy(({ env: { context, engines: { browsers } } }) =>\r\n  //         context === 'browser'\r\n  //           ? ['chrome']\r\n  //           // ? browsersList(browsers)\r\n  //           //   .map(str => str.split(' '))\r\n  //           //   .shift()\r\n  //           : ['node']\r\n  //       )\r\n  //       |> mergeMap(group =>\r\n  //         zip(\r\n  //           of(group.key),\r\n  //           group\r\n  //         )\r\n  //       )\r\n  //       |> mergeMap(([contexts, asset]) =>\r\n  //         from(contexts)\r\n  //         |> map(context => [context, asset])\r\n  //       )\r\n  //       |> mergeMap(([context, asset]) => {\r\n  //         debugger\r\n  //       })\r\n  //     )\r\n  \r\n  //   const analyzeSubscription = analyze.subscribe()\r\n  //   return () => {\r\n  //     analyzeSubscription.unsubscribe()\r\n  //   }\r\n  // })\r\n","// import Parcel from '@parcel/core'\r\n\r\n// console.log(new Parcel())\r\n\r\nimport EPK from '../core/index.ts'\r\n\r\nconst run = (entryFiles) => {\r\n  const epk = EPK({\r\n    entryFiles\r\n  })\r\n\r\n  epk.subscribe(v => console.log(v))\r\n}\r\n\r\nrun()\r\n"],"names":["func","Observable","create","observer","unsubscribe","PARCEL_REPORTER_EVENT","initialParcelOptions","AsyncObservable","parcel","Parcel","entries","targets","test","distDir","browsers","sourceMaps","minify","scopeHoist","watch","err","build","throw","next","TASK_TYPE","TASK_STATUS","runtimeMap","Map","chrome","options","runtimeSubjects","runtimes","of","runtimeName","task","has","subject","Subject","set","get","finalize","complete","parcelOptions","combineLatest","runtimeFactory","switchMap","bundle","Runtime","mergeMap","changedAssets","from","values","map","asset","engines","browsersList","env","str","split","shift","runtime","run","type","PRE_ANALYZE","entryFiles","epk","EPK","subscribe","v","console","log"],"mappings":"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"}