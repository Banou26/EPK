{"version":3,"file":"cli.js","sources":["../src/utils/async-observable.ts","../src/parcel/index.ts","../src/core/task.ts","../src/utils/package-manager.ts","../src/utils/emit.ts","../src/runtime/index.ts","../src/utils/mergeMap.ts","../src/runtimes/chrome.ts","../src/runtimes/index.ts","../src/core/index.ts","../src/cli/index.ts"],"sourcesContent":["import { Observable } from 'rxjs'\r\n\r\nexport default <T>(func: Function): Observable<T> =>\r\n  Observable.create(observer => {\r\n    const unsubscribe = func(observer)\r\n    return async () => (await unsubscribe)?.()\r\n  })\r\n","import Parcel from '@parcel/core'\r\n\r\nimport AsyncObservable from '../utils/async-observable.ts'\r\n\r\nexport enum PARCEL_REPORTER_EVENT {\r\n  BUILD_START = 'buildStart',\r\n  BUILD_PROGRESS = 'buildProgress',\r\n  BUILD_SUCCESS = 'buildSuccess',\r\n  BUILD_FAILURE = 'buildFailure',\r\n  LOG = 'log'\r\n}\r\n\r\nexport default (initialParcelOptions) =>\r\n  AsyncObservable(async observer => {\r\n    const parcel = new Parcel({\r\n      entries: ['tests/unit/index_test.ts'],\r\n      targets: {\r\n        test: {\r\n          distDir: '.epk/dist/browser',\r\n          browsers: ['last 1 Chrome versions'] // [\"> 1%\", \"not dead\"]\r\n        }\r\n      },\r\n      sourceMaps: true,\r\n      minify: true,\r\n      scopeHoist: true\r\n    })\r\n    \r\n    const { unsubscribe } = await parcel.watch((err, build) => {\r\n      if (err) observer.throw(err)\r\n      observer.next(build)\r\n    })\r\n\r\n    return () => unsubscribe()\r\n  })\r\n","import { Observable } from 'rxjs'\r\n\r\nexport enum TASK_TYPE {\r\n  PRE_ANALYZE = 'preAnalyze',\r\n  RUN = 'run',\r\n  ANALYZE = 'analyze'\r\n}\r\n\r\nexport enum TASK_STATUS {\r\n  START = 'start',\r\n  READY = 'ready',\r\n  END = 'end',\r\n  CANCEL = 'cancel'\r\n}\r\n\r\nexport interface Task {\r\n  type: TASK_TYPE\r\n  data: any\r\n}\r\n\r\nexport interface TaskMessage {\r\n  type: TASK_TYPE\r\n  status: TASK_STATUS\r\n  data?: any\r\n}\r\n\r\n// export default\r\n//   (task: Task) =>\r\n//     messages =>\r\n//       messages\r\n//       |> \r\n\r\n\r\n// export default (task: Task) =>\r\n//   Observable.create(observer => {\r\n//     let _observer\r\n//     const task = Observable.create<TaskMessage>(observer => {\r\n//       _observer = observer\r\n//       observer.next({ type: TASK_STATUS.START })\r\n//       return () => observer.next({ type: TASK_STATUS.CANCEL })\r\n//     })\r\n//     workerFarm.next(task)\r\n//     return () => _observer.complete()\r\n//   })\r\n","import { NodePackageManager} from '@parcel/package-manager'\r\nimport { NodeFS } from '@parcel/fs'\r\n\r\n// const fs = new NodeFS()\r\n// const pkgInstaller = new Yarn()\r\n// const npm = new NodePackageManager(fs, pkgInstaller)\r\n\r\n// export default (...args) => npm.install(...args)\r\n\r\nconst packageManager = new NodePackageManager(new NodeFS())\r\n\r\nexport const require = (...args) =>\r\n  packageManager.require(...args)","import { Observable } from 'rxjs';\r\n\r\nexport default value =>\r\n  Observable.create(observer => observer.next(value))","import { Subject } from 'rxjs'\r\n\r\nexport enum GLOBALS {\r\n  MESSAGES = '__EPK_MESSAGES',\r\n  SEND_MESSAGE = '__EPK_SEND_MESSAGE'\r\n}\r\n\r\nglobalThis[GLOBALS.MESSAGES] = new Subject()\r\n","import { mergeMap } from 'rxjs/operators'\r\nimport { isObservable, from, of } from 'rxjs'\r\n\r\nexport default (project, resultSelector, concurrent) =>\r\n  mergeMap(\r\n    (...args) => {\r\n      const result = project(...args)\r\n\r\n      return (\r\n        result instanceof Promise\r\n          ? from(result) |> mergeMap(obs => obs)\r\n          : result\r\n      )\r\n    },\r\n    resultSelector,\r\n    concurrent\r\n  )\r\n","import { map, tap, finalize, shareReplay, filter, combineLatest } from 'rxjs/operators'\r\n\r\nimport { require } from '../utils/package-manager.ts'\r\nimport emit from '../utils/emit.ts'\r\nimport { Subject, of } from 'rxjs'\r\nimport { GLOBALS } from '../runtime/index.ts'\r\nimport mergeMap from '../utils/mergeMap.ts'\r\n\r\n\r\nexport default async () => {\r\n  const puppeteer = await require('puppeteer', __filename)\r\n  const browser = await puppeteer.launch()\r\n\r\n  return (\r\n    emit(func =>\r\n      of(func)\r\n      |> mergeMap(async func => {\r\n        const page = await browser.newPage()\r\n        const pageMessages = new Subject()\r\n\r\n        await page.exposeFunction(GLOBALS.SEND_MESSAGE, msg => pageMessages.next(msg))\r\n\r\n        let count = 0\r\n        return (\r\n          func(task => {\r\n            const id = count\r\n            count++\r\n\r\n            return (\r\n              task\r\n              |> tap(message =>\r\n                page.evaluate(\r\n                  (message, GLOBALS) => globalThis[GLOBALS.MESSAGES].next(message),\r\n                  {\r\n                    id,\r\n                    ...message\r\n                  },\r\n                  GLOBALS\r\n                )\r\n              )\r\n              |> combineLatest(pageMessages, (_, task) => task)\r\n              |> filter(({ id: _id }) => _id === id)\r\n            )\r\n          })\r\n          |> finalize(() => page.close())\r\n        )\r\n      })\r\n      |> mergeMap(obs => obs)\r\n    )\r\n    |> finalize(() => browser.close())\r\n  )\r\n}\r\n","import { of, isObservable, ReplaySubject } from 'rxjs'\r\nimport { finalize, filter, shareReplay } from 'rxjs/operators'\r\n\r\nimport chrome from './chrome.ts'\r\nimport emit from '../utils/emit.ts'\r\n\r\nexport enum RUNTIMES {\r\n  CHROME = 'chrome'\r\n}\r\n\r\nexport const runtimeMap = new Map([\r\n  [RUNTIMES.CHROME, chrome]\r\n])\r\n\r\nexport default options => {\r\n  const runtimes = new Map()\r\n  return (\r\n    emit(async runtimeName => {\r\n        if (!runtimes.has(runtimeName)) {\r\n          const obs = await runtimeMap.get(runtimeName)()\r\n          let createContext\r\n          const sub = obs.subscribe(_createContext => (createContext = _createContext))\r\n          runtimes.set(runtimeName, {\r\n            subscription: sub,\r\n            createContext\r\n          })\r\n        }\r\n\r\n        return runtimes.get(runtimeName).createContext\r\n      }\r\n    )\r\n    |> finalize(() =>\r\n      Array.from(runtimes.values())\r\n        .forEach(({ subscription }) => subscription.unsubscribe())\r\n    )\r\n  )\r\n}\r\n","import { Observable, of, generate, from, BehaviorSubject, zip, combineLatest, merge } from 'rxjs'\r\nimport { takeUntil, publish, filter, map, mapTo, switchMap, groupBy, mergeMap, tap, skip, toArray } from 'rxjs/operators'\r\nimport browsersList from 'browserslist'\r\n\r\nimport Parcel from '../parcel/index.ts'\r\nimport { PARCEL_REPORTER_EVENT } from '../parcel/index.ts'\r\nimport WorkerFarm from '../workerFarm/index.ts'\r\nimport Task, { TASK_TYPE, TASK_STATUS } from './task.ts'\r\nimport emit from '../utils/emit.ts'\r\nimport AsyncObservable from '../utils/async-observable.ts'\r\nimport runtimeFactory, { RUNTIMES } from '../runtimes/index.ts'\r\nimport preAnalyze from './pre-analyzer.ts'\r\n\r\nconst getAssetSupportedTargets = asset => [\r\n    ...browsersList(asset.env.engines.browsers)\r\n      |> (arr => arr.map(str =>\r\n        str\r\n          .split(' ')\r\n          .shift()\r\n      ))\r\n      |> (arr => new Set(arr))\r\n      |> (set =>\r\n        Array\r\n          .from(set)\r\n          .filter(runtime => runtime.toUpperCase() in RUNTIMES))\r\n      // todo: add node/electron runtime detection\r\n  ]\r\n\r\nexport default (parcelOptions) =>\r\n  combineLatest(\r\n    Parcel(parcelOptions),\r\n    runtimeFactory()\r\n  )\r\n  |> switchMap(([bundle, runtime]) =>\r\n    bundle.changedAssets.values()\r\n    |> (values => Array.from(values))\r\n    |> (assets => assets.reduce((arr, asset) => [\r\n      ...arr,\r\n      ...getAssetSupportedTargets(asset)\r\n        .map(target => ({\r\n          asset,\r\n          target,\r\n          bundle\r\n        }))\r\n    ], []))\r\n    |> from\r\n    |> groupBy(\r\n      ({ target }) => target,\r\n      ({ bundle, asset }) => ({ bundle, asset })\r\n    )\r\n    // Observable per target that emit assets\r\n    |> mergeMap((assets) =>\r\n      combineLatest(\r\n        assets,\r\n        runtime(assets.key) |> from\r\n      )\r\n      |> mergeMap(([{ bundle, asset }, createContext]) => {\r\n        const unisolatedContext = createContext({ url: asset.filePath },run => {\r\n          const preAnalyze =\r\n            of({ type: TASK_TYPE.PRE_ANALYZE, url: asset.filePath })\r\n            |> run\r\n\r\n          const tests =\r\n            preAnalyze\r\n            |> mergeMap(analyze =>\r\n              from(analyze.tests)\r\n              |> filter(({ isolated, async }) => !isolated && !async)\r\n              |> toArray()\r\n            )\r\n            |> map(tests => ({\r\n              type: TASK_TYPE.RUN,\r\n              url: asset.filePath,\r\n              tests\r\n            }))\r\n            |> run\r\n\r\n          return merge(\r\n            preAnalyze,\r\n            tests\r\n          )\r\n        })\r\n\r\n\r\n\r\n        return merge(\r\n          unisolatedContext\r\n        )\r\n      })\r\n    )\r\n  )\r\n","// import Parcel from '@parcel/core'\r\n\r\n// console.log(new Parcel())\r\n\r\nimport EPK from '../core/index.ts'\r\n\r\nconst run = (entryFiles) => {\r\n  const epk = EPK({\r\n    entryFiles\r\n  })\r\n\r\n  epk.subscribe(v => console.log(v))\r\n}\r\n\r\nrun()\r\n"],"names":["func","Observable","create","observer","unsubscribe","PARCEL_REPORTER_EVENT","initialParcelOptions","AsyncObservable","parcel","Parcel","entries","targets","test","distDir","browsers","sourceMaps","minify","scopeHoist","watch","err","build","throw","next","TASK_TYPE","TASK_STATUS","packageManager","NodePackageManager","NodeFS","require","args","value","GLOBALS","globalThis","MESSAGES","Subject","project","resultSelector","concurrent","mergeMap","result","Promise","from","obs","puppeteer","__filename","browser","launch","emit","of","page","newPage","pageMessages","exposeFunction","SEND_MESSAGE","msg","count","task","id","tap","message","evaluate","combineLatest","_","filter","_id","finalize","close","RUNTIMES","runtimeMap","Map","CHROME","chrome","options","runtimes","runtimeName","has","get","createContext","sub","subscribe","_createContext","set","subscription","Array","values","forEach","getAssetSupportedTargets","asset","browsersList","env","engines","arr","map","str","split","shift","Set","runtime","toUpperCase","parcelOptions","runtimeFactory","switchMap","bundle","changedAssets","assets","reduce","target","groupBy","key","unisolatedContext","url","filePath","run","preAnalyze","type","PRE_ANALYZE","tests","analyze","isolated","async","toArray","RUN","merge","entryFiles","epk","EPK","v","console","log"],"mappings":"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"}