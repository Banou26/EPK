{"version":3,"file":"cli.js","sources":["../src/utils/async-observable.ts","../src/parcel/index.ts","../src/core/index.ts","../src/cli/index.ts"],"sourcesContent":["import { Observable } from 'rxjs'\n\nexport default <T>(func: Function): Observable<T> =>\n  Observable.create(observer => {\n    const unsubscribe = func(observer)\n    return async () => (await unsubscribe)?.()\n  })\n","import Parcel from '@parcel/core'\r\n\r\nimport AsyncObservable from '../utils/async-observable.ts'\r\n\r\nexport enum PARCEL_REPORTER_EVENT {\r\n  BUILD_START = 'buildStart',\r\n  BUILD_PROGRESS = 'buildProgress',\r\n  BUILD_SUCCESS = 'buildSuccess',\r\n  BUILD_FAILURE = 'buildFailure',\r\n  LOG = 'log'\r\n}\r\n\r\nexport default (initialParcelOptions) =>\r\n  AsyncObservable(async observer => {\r\n    const parcel = new Parcel({\r\n      entries: ['tests/unit/index_test.ts'],\r\n      targets: {\r\n        test: {\r\n          distDir: '.epk/dist/browser',\r\n          browsers: ['last 1 Chrome versions'] // [\"> 1%\", \"not dead\"]\r\n        }\r\n      },\r\n      sourceMaps: true,\r\n      minify: true,\r\n      scopeHoist: true\r\n    })\r\n    \r\n    const { unsubscribe } = await parcel.watch((err, build) => {\r\n      if (err) observer.throw(err)\r\n      observer.next(build)\r\n    })\r\n\r\n    return () => unsubscribe()\r\n  })\r\n","import { Observable, of, generate, from, BehaviorSubject, zip } from 'rxjs'\r\nimport { takeUntil, publish, filter, map, mapTo, switchMap, groupBy, mergeMap, tap, skip, toArray } from 'rxjs/operators'\r\nimport browsersList from 'browserslist'\r\n\r\nimport Parcel from '../parcel/index.ts'\r\nimport { PARCEL_REPORTER_EVENT } from '../parcel/index.ts'\r\nimport WorkerFarm from '../workerFarm/index.ts'\r\nimport Task, { TASK_TYPE, TASK_STATUS } from './task.ts'\r\nimport emit from '../utils/emit.ts'\r\nimport AsyncObservable from '../utils/async-observable.ts'\r\nimport prepareRuntimes from '../runtimes/index.ts'\r\n\r\nexport default (parcelOptions) =>\r\n  AsyncObservable(observer => {\r\n    const bundle =\r\n      (Parcel(parcelOptions)\r\n      |> publish())\r\n        .refCount()\r\n  \r\n    const analyze =\r\n      bundle\r\n      |> switchMap(bundle =>\r\n        of(bundle)\r\n        |> mergeMap(({ changedAssets }) => from(changedAssets.values()))\r\n        |> groupBy(({ env: { context, engines: { browsers } } }) =>\r\n          context === 'browser'\r\n            ? ['chrome']\r\n            // ? browsersList(browsers)\r\n            //   .map(str => str.split(' '))\r\n            //   .shift()\r\n            : ['node']\r\n        )\r\n        |> mergeMap(group =>\r\n          zip(\r\n            of(group.key),\r\n            group\r\n          )\r\n        )\r\n        |> mergeMap(([contexts, asset]) =>\r\n          from(contexts)\r\n          |> map(context => [context, asset])\r\n        )\r\n        |> mergeMap(([context, asset]) => {\r\n          debugger\r\n        })\r\n      )\r\n  \r\n    const analyzeSubscription = analyze.subscribe()\r\n    return () => {\r\n      analyzeSubscription.unsubscribe()\r\n    }\r\n  })\r\n","// import Parcel from '@parcel/core'\r\n\r\n// console.log(new Parcel())\r\n\r\nimport EPK from '../core/index.ts'\r\n\r\nconst run = (entryFiles) => {\r\n  const epk = EPK({\r\n    entryFiles\r\n  })\r\n\r\n  epk.subscribe(v => console.log(v))\r\n}\r\n\r\nrun()\r\n"],"names":["func","Observable","create","observer","unsubscribe","PARCEL_REPORTER_EVENT","initialParcelOptions","AsyncObservable","parcel","Parcel","entries","targets","test","distDir","browsers","sourceMaps","minify","scopeHoist","watch","err","build","throw","next","parcelOptions","bundle","publish","refCount","analyze","switchMap","of","mergeMap","changedAssets","from","values","groupBy","env","context","engines","group","zip","key","contexts","asset","map","analyzeSubscription","subscribe","run","entryFiles","epk","EPK","v","console","log"],"mappings":";;;;;;;;AAEA,uBAAmBA,IAAJ,IACbC,eAAU,CAACC,MAAX,CAAkBC,QAAQ,IAAI;QACtBC,WAAW,GAAGJ,IAAI,CAACG,QAAD,CAAxB;SACO;;;mBAAa,MAAMC,WAAnB,yCAAY,MAAZ;GAAP;CAFF,CADF;;ICEYC,qBAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;EAAAA;EAAAA;GAAAA,0BAAAA;;AAQZ,cAAgBC,oBAAD,IACbC,eAAe,CAAC,MAAMJ,QAAN,IAAkB;QAC1BK,MAAM,GAAG,IAAIC,QAAJ,CAAW;IACxBC,OAAO,EAAE,CAAC,0BAAD,CADe;IAExBC,OAAO,EAAE;MACPC,IAAI,EAAE;QACJC,OAAO,EAAE,mBADL;QAEJC,QAAQ,EAAE,CAAC,wBAAD,CAFN;;;KAHgB;IAQxBC,UAAU,EAAE,IARY;IASxBC,MAAM,EAAE,IATgB;IAUxBC,UAAU,EAAE;GAVC,CAAf;QAaM;IAAEb;MAAgB,MAAMI,MAAM,CAACU,KAAP,CAAa,CAACC,GAAD,EAAMC,KAAN,KAAgB;QACrDD,GAAJ,EAAShB,QAAQ,CAACkB,KAAT,CAAeF,GAAf;IACThB,QAAQ,CAACmB,IAAT,CAAcF,KAAd;GAF4B,CAA9B;SAKO,MAAMhB,WAAW,EAAxB;CAnBa,CADjB;;ACAA,WAAgBmB,aAAD,IACbhB,eAAe,CAACJ,QAAQ,IAAI;;;QACpBqB,MAAM,GACV,WAACf,MAAM,CAACc,AAAD,CAAP,EACGE,iBAAO,EADV,WAEGC,QAFH,EADF;QAKMC,OAAO,cACXH,MADW,EAERI,mBAAS,CAACJ,MAAM;;;oDACjBK,OAAE,CAACL,MAAD,CADe,EAEdM,kBAAQ,CAAC,CAAC;MAAEC;KAAH,KAAuBC,SAAI,CAACD,aAAa,CAACE,MAAd,EAAD,CAA5B,CAFM,QAGdC,iBAAO,CAAC,CAAC;MAAEC,GAAG,EAAE;QAAEC,OAAF;QAAWC,OAAO,EAAE;UAAEvB;;;KAA9B,KACTsB,OAAO,KAAK,SAAZ,GACI,CAAC,QAAD,CADJ;;;MAKI,CAAC,MAAD,CANI,CAHO,UAWdN,kBAAQ,CAACQ,KAAK,IACfC,QAAG,CACDV,OAAE,CAACS,KAAK,CAACE,GAAP,CADD,EAEDF,KAFC,CADM,CAXM,UAiBdR,kBAAQ,CAAC,CAAC,CAACW,QAAD,EAAWC,KAAX,CAAD;;;qBACVV,SAAI,CAACS,QAAD,CADM,EAEPE,aAAG,CAACP,OAAO,IAAI,CAACA,OAAD,EAAUM,KAAV,CAAZ,CAFI;KAAD,CAjBM,UAqBdZ,kBAAQ,CAAC,CAAC,CAACM,OAAD,EAAUM,KAAV,CAAD,KAAsB;;KAAvB,CArBM;GAAP,CAFD,UAAb;QA4BME,mBAAmB,GAAGjB,OAAO,CAACkB,SAAR,EAA5B;SACO,MAAM;IACXD,mBAAmB,CAACxC,WAApB;GADF;CAnCa,CADjB;;ACZA;AAEA;AAIA,MAAM0C,GAAG,GAAIC,UAAD,IAAgB;QACpBC,GAAG,GAAGC,GAAG,CAAC,AAAD,CAAf;EAIAD,GAAG,CAACH,SAAJ,CAAcK,CAAC,IAAIC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAAnB;CALF;;AAQAJ,GAAG"}