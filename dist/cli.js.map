{"version":3,"file":"cli.js","sources":["../src/utils/async-observable.ts","../src/parcel/index.ts","../src/core/task.ts","../src/utils/package-manager.ts","../src/runtime/index.ts","../src/runtimes/chrome.ts","../src/utils/emit.ts","../src/runtimes/index.ts","../src/core/index.ts","../src/cli/index.ts"],"sourcesContent":["import { Observable } from 'rxjs'\n\nexport default <T>(func: Function): Observable<T> =>\n  Observable.create(observer => {\n    const unsubscribe = func(observer)\n    return async () => (await unsubscribe)?.()\n  })\n","import Parcel from '@parcel/core'\r\n\r\nimport AsyncObservable from '../utils/async-observable.ts'\r\n\r\nexport enum PARCEL_REPORTER_EVENT {\r\n  BUILD_START = 'buildStart',\r\n  BUILD_PROGRESS = 'buildProgress',\r\n  BUILD_SUCCESS = 'buildSuccess',\r\n  BUILD_FAILURE = 'buildFailure',\r\n  LOG = 'log'\r\n}\r\n\r\nexport default (initialParcelOptions) =>\r\n  AsyncObservable(async observer => {\r\n    const parcel = new Parcel({\r\n      entries: ['tests/unit/index_test.ts'],\r\n      targets: {\r\n        test: {\r\n          distDir: '.epk/dist/browser',\r\n          browsers: ['last 1 Chrome versions'] // [\"> 1%\", \"not dead\"]\r\n        }\r\n      },\r\n      sourceMaps: true,\r\n      minify: true,\r\n      scopeHoist: true\r\n    })\r\n    \r\n    const { unsubscribe } = await parcel.watch((err, build) => {\r\n      if (err) observer.throw(err)\r\n      observer.next(build)\r\n    })\r\n\r\n    return () => unsubscribe()\r\n  })\r\n","import { Observable } from 'rxjs'\r\n\r\nexport enum TASK_TYPE {\r\n  PRE_ANALYZE = 'preAnalyze',\r\n  RUN = 'run',\r\n  ANALYZE = 'analyze'\r\n}\r\n\r\nexport enum TASK_STATUS {\r\n  START = 'start',\r\n  READY = 'ready',\r\n  END = 'end',\r\n  CANCEL = 'cancel'\r\n}\r\n\r\nexport interface Task {\r\n  type: TASK_TYPE\r\n  data: any\r\n}\r\n\r\nexport interface TaskMessage {\r\n  type: TASK_TYPE\r\n  status: TASK_STATUS\r\n  data?: any\r\n}\r\n\r\n// export default\r\n//   (task: Task) =>\r\n//     messages =>\r\n//       messages\r\n//       |> \r\n\r\n\r\n// export default (task: Task) =>\r\n//   Observable.create(observer => {\r\n//     let _observer\r\n//     const task = Observable.create<TaskMessage>(observer => {\r\n//       _observer = observer\r\n//       observer.next({ type: TASK_STATUS.START })\r\n//       return () => observer.next({ type: TASK_STATUS.CANCEL })\r\n//     })\r\n//     workerFarm.next(task)\r\n//     return () => _observer.complete()\r\n//   })\r\n","import { NodePackageManager} from '@parcel/package-manager'\r\nimport { NodeFS } from '@parcel/fs'\r\n\r\n// const fs = new NodeFS()\r\n// const pkgInstaller = new Yarn()\r\n// const npm = new NodePackageManager(fs, pkgInstaller)\r\n\r\n// export default (...args) => npm.install(...args)\r\n\r\nconst packageManager = new NodePackageManager(new NodeFS())\r\n\r\nexport const require = (...args) =>\r\n  packageManager.require(...args)","\r\nexport enum GLOBALS {\r\n  MESSAGES = '__EPK_MESSAGES',\r\n  SEND_MESSAGE = '__EPK_SEND_MESSAGE'\r\n}","import { map, tap, finalize, mergeMap, shareReplay, filter } from 'rxjs/operators'\r\n\r\nimport { require } from '../utils/package-manager.ts'\r\nimport emit from '../utils/emit.ts'\r\nimport { Subject } from 'rxjs'\r\nimport { GLOBALS } from '../runtime/index.ts'\r\n\r\n\r\nexport default async (contextObservable) => {\r\n  const puppeteer = await require('puppeteer', __filename)\r\n  const browser = await puppeteer.launch()\r\n\r\n\r\n  return (\r\n    contextObservable\r\n    |> mergeMap(async (taskObservable) => {\r\n      const page = await browser.newPage()\r\n      const pageMessages = new Subject()\r\n\r\n      await page.exposeFunction(GLOBALS.SEND_MESSAGE, msg => pageMessages.next(msg))\r\n\r\n      return (\r\n        taskObservable\r\n        |> mergeMap((task, id) =>\r\n          task\r\n          |> tap(message =>\r\n            page.evaluate(\r\n              message => globalThis[GLOBALS.MESSAGES].next(message),\r\n              {\r\n                id,\r\n                ...message\r\n              }\r\n            )\r\n          )\r\n          |> combineLatest(pageMessages, (_, task) => task)\r\n          |> filter(({ id: _id }) => _id === id)\r\n        )\r\n        |> finalize(() => page.close())\r\n      )\r\n    })\r\n    |> finalize(() => browser.close())\r\n  )\r\n  // return (\r\n  //   taskSubject\r\n  //   |> mergeMap(async task => {\r\n\r\n  //     return {\r\n  //       task,\r\n  //       page: await browser.newPage()\r\n  //     }\r\n  //   })\r\n  //   |> finalize(async () => {\r\n  //     await browser.close()\r\n  //   })z\r\n  // )\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nexport default value =>\r\n  Observable.create(observer => observer.next(value))","import { of, isObservable, ReplaySubject } from 'rxjs'\r\nimport { finalize, filter, shareReplay } from 'rxjs/operators'\r\n\r\nimport chrome from './chrome.ts'\r\nimport emit from '../utils/emit.ts'\r\n\r\nexport enum RUNTIMES {\r\n  CHROME = 'chrome'\r\n}\r\n\r\nexport const runtimeMap = new Map([\r\n  [RUNTIMES.CHROME, chrome]\r\n])\r\n\r\nexport default options => {\r\n  const runtimes = new Map()\r\n\r\n  return emit(\r\n    async runtimeName => {\r\n      if (!runtimes.has(runtimeName)) {\r\n        const obs = await runtimeMap.get(runtimeName)()\r\n        let createContext\r\n        const sub = obs.subscribe(_createContext => (createContext = _createContext))\r\n        runtimes.set(runtimeName, {\r\n          subscription: sub,\r\n          createContext\r\n        })\r\n      }\r\n\r\n      return task => {\r\n        if (!isObservable(task)) {\r\n          const subject = new ReplaySubject()\r\n          const context = runtimes.get(runtimeName).createContext(subject)\r\n          \r\n          return task => {\r\n            task.subscribe(subject)\r\n          }\r\n        } else {\r\n          return runtimes.get(runtimeName).createContext(task)\r\n        }\r\n      }\r\n    }\r\n  )\r\n  |> finalize(() =>\r\n    Array.from(runtimes.values())\r\n      .forEach(({ subscription }) => subscription.unsubscribe())\r\n  )\r\n}\r\n","import { Observable, of, generate, from, BehaviorSubject, zip, combineLatest, merge } from 'rxjs'\r\nimport { takeUntil, publish, filter, map, mapTo, switchMap, groupBy, mergeMap, tap, skip, toArray } from 'rxjs/operators'\r\nimport browsersList from 'browserslist'\r\n\r\nimport Parcel from '../parcel/index.ts'\r\nimport { PARCEL_REPORTER_EVENT } from '../parcel/index.ts'\r\nimport WorkerFarm from '../workerFarm/index.ts'\r\nimport Task, { TASK_TYPE, TASK_STATUS } from './task.ts'\r\nimport emit from '../utils/emit.ts'\r\nimport AsyncObservable from '../utils/async-observable.ts'\r\nimport runtimeFactory, { RUNTIMES } from '../runtimes/index.ts'\r\nimport preAnalyze from './pre-analyzer.ts'\r\n\r\nconst getAssetSupportedTargets = asset => [\r\n    ...browsersList(asset.env.engines.browsers)\r\n      |> (arr => arr.map(str =>\r\n        str\r\n          .split(' ')\r\n          .shift()\r\n      ))\r\n      |> (arr => new Set(arr))\r\n      |> (set =>\r\n        Array\r\n          .from(set)\r\n          .filter(runtime => runtime.toUpperCase() in RUNTIMES))\r\n      // todo: add node/electron runtime detection\r\n  ]\r\n\r\nexport default (parcelOptions) =>\r\n  combineLatest(\r\n    Parcel(parcelOptions),\r\n    runtimeFactory()\r\n  )\r\n  |> switchMap(([bundle, runtime]) =>\r\n    bundle.changedAssets.values()\r\n    |> (values => Array.from(values))\r\n    |> (assets => assets.reduce((arr, asset) => [\r\n      ...arr,\r\n      ...getAssetSupportedTargets(asset)\r\n        .map(target => ({\r\n          asset,\r\n          target\r\n        }))\r\n    ], []))\r\n    |> from\r\n    |> groupBy(\r\n      ({ target }) => target,\r\n      ({ asset }) => asset\r\n    )\r\n    // Observable per target that emit assets\r\n    |> mergeMap(assets =>\r\n      combineLatest(\r\n        assets,\r\n        runtime(assets.key)\r\n      )\r\n      |> mergeMap(([asset, createContext]) => {\r\n        const unisolatedContext = createContext(run => {\r\n          const preAnalyze =\r\n            of({ type: TASK_TYPE.PRE_ANALYZE, url: asset.filePath })\r\n            |> run\r\n\r\n          const tests =\r\n            preAnalyze\r\n            |> mergeMap(analyze =>\r\n              from(analyze.tests)\r\n              |> filter(({ isolated, async }) => !isolated && !async)\r\n              |> toArray()\r\n            )\r\n            |> map(tests => ({\r\n              type: TASK_TYPE.RUN,\r\n              url: asset.filePath,\r\n              tests\r\n            }))\r\n            |> run\r\n\r\n          return merge(\r\n            preAnalyze,\r\n            tests\r\n          )\r\n        })\r\n\r\n\r\n        return merge(\r\n          unisolatedContext\r\n        )\r\n      })\r\n    )\r\n  )\r\n\r\n  // |> switchMap(([bundle, run]) =>\r\n  //   of(bundle)\r\n  //   |> mergeMap(({ changedAssets }) =>\r\n  //     changedAssets.values()\r\n  //     |> Array.from\r\n  //     |> from\r\n  //   )\r\n  //   |> map(asset => ({\r\n  //       engines: getAssetSupportedTargets(asset),\r\n  //       asset\r\n  //     })\r\n  //   )\r\n  //   |> mergeMap(({engines, asset}) =>\r\n  //     from(engines)\r\n  //     |> mergeMap(runtime => {\r\n  //       const analyze = run(runtime, { type: TASK_TYPE.PRE_ANALYZE })\r\n  //       return analyze\r\n  //     })\r\n  //   )\r\n  // )\r\n\r\n  // AsyncObservable(observer => {\r\n  //   const bundle =\r\n  //     (Parcel(parcelOptions)\r\n  //     |> publish())\r\n  //       .refCount()\r\n  \r\n  //   const analyze =\r\n  //     bundle\r\n  //     |> switchMap(bundle =>\r\n  //       of(bundle)\r\n  //       |> mergeMap(({ changedAssets }) => from(changedAssets.values()))\r\n  //       |> map(asset => ({ asset }))\r\n  //       |> mergeMap(asset =>\r\n  //         of(asset)\r\n  //         |> )\r\n  //       |> groupBy(({ env: { context, engines: { browsers } } }) =>\r\n  //         context === 'browser'\r\n  //           ? ['chrome']\r\n  //           // ? browsersList(browsers)\r\n  //           //   .map(str => str.split(' '))\r\n  //           //   .shift()\r\n  //           : ['node']\r\n  //       )\r\n  //       |> mergeMap(group =>\r\n  //         zip(\r\n  //           of(group.key),\r\n  //           group\r\n  //         )\r\n  //       )\r\n  //       |> mergeMap(([contexts, asset]) =>\r\n  //         from(contexts)\r\n  //         |> map(context => [context, asset])\r\n  //       )\r\n  //       |> mergeMap(([context, asset]) => {\r\n  //         debugger\r\n  //       })\r\n  //     )\r\n  \r\n  //   const analyzeSubscription = analyze.subscribe()\r\n  //   return () => {\r\n  //     analyzeSubscription.unsubscribe()\r\n  //   }\r\n  // })\r\n","// import Parcel from '@parcel/core'\r\n\r\n// console.log(new Parcel())\r\n\r\nimport EPK from '../core/index.ts'\r\n\r\nconst run = (entryFiles) => {\r\n  const epk = EPK({\r\n    entryFiles\r\n  })\r\n\r\n  epk.subscribe(v => console.log(v))\r\n}\r\n\r\nrun()\r\n"],"names":["func","Observable","create","observer","unsubscribe","PARCEL_REPORTER_EVENT","initialParcelOptions","AsyncObservable","parcel","Parcel","entries","targets","test","distDir","browsers","sourceMaps","minify","scopeHoist","watch","err","build","throw","next","TASK_TYPE","TASK_STATUS","packageManager","NodePackageManager","NodeFS","require","args","GLOBALS","contextObservable","puppeteer","__filename","browser","launch","mergeMap","taskObservable","page","newPage","pageMessages","Subject","exposeFunction","SEND_MESSAGE","msg","task","id","tap","message","evaluate","globalThis","MESSAGES","combineLatest","_","filter","_id","finalize","close","value","RUNTIMES","runtimeMap","Map","CHROME","chrome","options","runtimes","emit","runtimeName","has","obs","get","createContext","sub","subscribe","_createContext","set","subscription","isObservable","subject","ReplaySubject","context","Array","from","values","forEach","getAssetSupportedTargets","asset","browsersList","env","engines","arr","map","str","split","shift","Set","runtime","toUpperCase","parcelOptions","runtimeFactory","switchMap","bundle","changedAssets","assets","reduce","target","groupBy","key","unisolatedContext","run","preAnalyze","of","type","PRE_ANALYZE","url","filePath","tests","analyze","isolated","async","toArray","RUN","merge","entryFiles","epk","EPK","v","console","log"],"mappings":";;;;;;;;;;;AAEA,uBAAmBA,IAAJ,IACbC,eAAU,CAACC,MAAX,CAAkBC,QAAQ,IAAI;QACtBC,WAAW,GAAGJ,IAAI,CAACG,QAAD,CAAxB;SACO;;;mBAAa,MAAMC,WAAnB,yCAAY,MAAZ;GAAP;CAFF,CADF;;ICEYC,qBAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;EAAAA;EAAAA;GAAAA,0BAAAA;;AAQZ,cAAgBC,oBAAD,IACbC,eAAe,CAAC,MAAMJ,QAAN,IAAkB;QAC1BK,MAAM,GAAG,IAAIC,QAAJ,CAAW;IACxBC,OAAO,EAAE,CAAC,0BAAD,CADe;IAExBC,OAAO,EAAE;MACPC,IAAI,EAAE;QACJC,OAAO,EAAE,mBADL;QAEJC,QAAQ,EAAE,CAAC,wBAAD,CAFN;;;KAHgB;IAQxBC,UAAU,EAAE,IARY;IASxBC,MAAM,EAAE,IATgB;IAUxBC,UAAU,EAAE;GAVC,CAAf;QAaM;IAAEb;MAAgB,MAAMI,MAAM,CAACU,KAAP,CAAa,CAACC,GAAD,EAAMC,KAAN,KAAgB;QACrDD,GAAJ,EAAShB,QAAQ,CAACkB,KAAT,CAAeF,GAAf;IACThB,QAAQ,CAACmB,IAAT,CAAcF,KAAd;GAF4B,CAA9B;SAKO,MAAMhB,WAAW,EAAxB;CAnBa,CADjB;;ICVYmB,SAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;GAAAA,cAAAA;;AAMZ,IAAYC,WAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;EAAAA;GAAAA,gBAAAA;;;;;;;;;;;;;;;;;ACJZ;;;;AAKA,MAAMC,cAAc,GAAG,IAAIC,mCAAJ,CAAuB,IAAIC,SAAJ,EAAvB,CAAvB;AAEA,AAAO,MAAMC,SAAO,GAAG,CAAC,GAAGC,IAAJ,KACrBJ,cAAc,CAACG,OAAf,CAAuB,GAAGC,IAA1B,CADK;;ICVKC,OAAZ;;WAAYA;EAAAA;EAAAA;GAAAA,YAAAA;;ACOZ,cAAe,MAAOC,iBAAP,IAA6B;;;QACpCC,SAAS,GAAG,MAAMJ,SAAO,CAAC,WAAD,EAAcK,UAAd,CAA/B;QACMC,OAAO,GAAG,MAAMF,SAAS,CAACG,MAAV,EAAtB;sCAIEJ,iBADF,EAEKK,kBAAQ,CAAC,MAAOC,cAAP,IAA0B;;;UAC9BC,IAAI,GAAG,MAAMJ,OAAO,CAACK,OAAR,EAAnB;UACMC,YAAY,GAAG,IAAIC,YAAJ,EAArB;UAEMH,IAAI,CAACI,cAAL,CAAoBZ,OAAO,CAACa,YAA5B,EAA0CC,GAAG,IAAIJ,YAAY,CAAClB,IAAb,CAAkBsB,GAAlB,CAAjD,CAAN;sCAGEP,cADF,EAEKD,kBAAQ,CAAC,CAACS,IAAD,EAAOC,EAAP;;;uCACVD,IADU,EAEPE,aAAG,CAACC,OAAO,IACZV,IAAI,CAACW,QAAL,CACED,OAAO,IAAIE,UAAU,CAACpB,OAAO,CAACqB,QAAT,CAAV,CAA6B7B,IAA7B,CAAkC0B,OAAlC,CADb,EAEE;QACEF,EADF;WAEKE;OAJP,CADI,CAFI,UAWPI,aAAa,CAACZ,YAAD,EAAe,CAACa,CAAD,EAAIR,IAAJ,KAAaA,IAA5B,CAXN,UAYPS,gBAAM,CAAC,CAAC;QAAER,EAAE,EAAES;OAAP,KAAiBA,GAAG,KAAKT,EAA1B,CAZC;KAAD,CAFb,oBAgBKU,kBAAQ,CAAC,MAAMlB,IAAI,CAACmB,KAAL,EAAP,CAhBb;GANS,CAFb,uBA2BKD,kBAAQ,CAAC,MAAMtB,OAAO,CAACuB,KAAR,EAAP,CA3Bb,OAL0C;;;;;;;;;;;;CAA5C;;ACNA,YAAeC,KAAK,IAClBzD,eAAU,CAACC,MAAX,CAAkBC,QAAQ,IAAIA,QAAQ,CAACmB,IAAT,CAAcoC,KAAd,CAA9B,CADF;;ICIYC,QAAZ;;WAAYA;EAAAA;GAAAA,aAAAA;;AAIZ,AAAO,MAAMC,UAAU,GAAG,IAAIC,GAAJ,CAAQ,CAChC,CAACF,QAAQ,CAACG,MAAV,EAAkBC,MAAlB,CADgC,CAAR,CAAnB;AAIP,sBAAeC,OAAO,IAAI;;;QAClBC,QAAQ,GAAG,IAAIJ,GAAJ,EAAjB;iBAEOK,IAAI,CACT,MAAMC,WAAN,IAAqB;QACf,CAACF,QAAQ,CAACG,GAAT,CAAaD,WAAb,CAAL,EAAgC;YACxBE,GAAG,GAAG,MAAMT,UAAU,CAACU,GAAX,CAAeH,WAAf,GAAlB;UACII,aAAJ;YACMC,GAAG,GAAGH,GAAG,CAACI,SAAJ,CAAcC,cAAc,IAAKH,aAAa,GAAGG,cAAjD,CAAZ;MACAT,QAAQ,CAACU,GAAT,CAAaR,WAAb,EAA0B;QACxBS,YAAY,EAAEJ,GADU;QAExBD;OAFF;;;WAMK1B,IAAI,IAAI;UACT,CAACgC,iBAAY,CAAChC,IAAD,CAAjB,EAAyB;cACjBiC,OAAO,GAAG,IAAIC,kBAAJ,EAAhB;cACMC,OAAO,GAAGf,QAAQ,CAACK,GAAT,CAAaH,WAAb,EAA0BI,aAA1B,CAAwCO,OAAxC,CAAhB;eAEOjC,IAAI,IAAI;UACbA,IAAI,CAAC4B,SAAL,CAAeK,OAAf;SADF;OAJF,MAOO;eACEb,QAAQ,CAACK,GAAT,CAAaH,WAAb,EAA0BI,aAA1B,CAAwC1B,IAAxC,CAAP;;KATJ;GAZO,CAAX,EA0BGW,kBAAQ,CAAC,MACVyB,KAAK,CAACC,IAAN,CAAWjB,QAAQ,CAACkB,MAAT,EAAX,EACGC,OADH,CACW,CAAC;IAAER;GAAH,KAAsBA,YAAY,CAACxE,WAAb,EADjC,CADS,CA1BX;CAHF;;ACDA,MAAMiF,wBAAwB,GAAGC,KAAK;;;SAAI,CACtC,qCAAGC,YAAY,CAACD,KAAK,CAACE,GAAN,CAAUC,OAAV,CAAkB3E,QAAnB,CAAf,EACa4E,aAAG,CAACC,GAAJ,CAAQC,GAAG,IACpBA,GAAG,CACAC,KADH,CACS,GADT,EAEGC,KAFH,EADS,CADb,GAMa,IAAIC,GAAJ,CAAQL,KAAR,CANb,GAQIT,KAAK,CACFC,IADH,CACQP,IADR,EAEGrB,MAFH,CAEU0C,OAAO,IAAIA,OAAO,CAACC,WAAR,MAAyBtC,QAF9C,CARJ,CADsC;GAAJ;CAAtC;;AAeA,WAAgBuC,aAAD;;;0BACb9C,kBAAa,CACX3C,MAAM,CAACyF,AAAD,CADK,EAEXC,cAAc,EAFH,CADA,EAKVC,mBAAS,CAAC,CAAC,CAACC,MAAD,EAASL,OAAT,CAAD;;;uEACXK,MAAM,CAACC,aAAP,CAAqBnB,MAArB,EADW,EAEGF,KAAK,CAACC,IAAN,CAAWC,qBAAX,CAFH,GAGGoB,KAAM,CAACC,MAAP,CAAc,CAACd,GAAD,EAAMJ,KAAN,KAAgB,CAC1C,GAAGI,GADuC,EAE1C,GAAGL,wBAAwB,CAACC,KAAD,CAAxB,CACAK,GADA,CACIc,MAAM,KAAK;MACdnB,KADc;MAEdmB;KAFS,CADV,CAFuC,CAA9B,EAOX,EAPW,CAHH,GAWRvB,SAXQ,UAYRwB,iBAAO,CACR,CAAC;MAAED;KAAH,KAAgBA,MADR,EAER,CAAC;MAAEnB;KAAH,KAAeA,KAFP,CAZC;OAiBRlD,kBAAQ,CAACmE,MAAM;;;+BAChBnD,kBAAa,CACXmD,MADW,EAEXP,OAAO,CAACO,MAAM,CAACI,GAAR,CAFI,CADG,EAKbvE,kBAAQ,CAAC,CAAC,CAACkD,KAAD,EAAQf,aAAR,CAAD,KAA4B;cAChCqC,iBAAiB,GAAGrC,aAAa,CAACsC,GAAG,IAAI;;;gBACvCC,UAAU,UACdC,OAAE,CAAC;YAAEC,IAAI,EAAEzF,SAAS,CAAC0F,WAAlB;YAA+BC,GAAG,EAAE5B,KAAK,CAAC6B;WAA3C,CADY,EAEXN,GAFW,MAAhB;gBAIMO,KAAK,oCACTN,UADS,EAEN1E,kBAAQ,CAACiF,OAAO;;;oCACjBnC,SAAI,CAACmC,OAAO,CAACD,KAAT,CADa,EAEd9D,gBAAM,CAAC,CAAC;cAAEgE,QAAF;cAAYC;aAAb,KAAyB,CAACD,QAAD,IAAa,CAACC,KAAxC,CAFQ,UAGdC,iBAAO,EAHO;WAAR,CAFF,gBAON7B,aAAG,CAACyB,KAAK,KAAK;YACfJ,IAAI,EAAEzF,SAAS,CAACkG,GADD;YAEfP,GAAG,EAAE5B,KAAK,CAAC6B,QAFI;YAGfC;WAHU,CAAN,CAPG,UAYNP,GAZM,QAAX;iBAcOa,UAAK,CACVZ,UADU,EAEVM,KAFU,CAAZ;SAnBqC,CAAvC;eA0BOM,UAAK,CACVd,iBADU,CAAZ;OA3BS,CALK;KAAP,CAjBA;GAAD,CALC;CAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AAEA;AAIA,MAAMC,GAAG,GAAIc,UAAD,IAAgB;QACpBC,GAAG,GAAGC,GAAG,CAAC,AAAD,CAAf;EAIAD,GAAG,CAACnD,SAAJ,CAAcqD,CAAC,IAAIC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAAnB;CALF;;AAQAjB,GAAG"}