{"version":3,"file":"cli.js","sources":["../src/utils/async-observable.ts","../src/parcel/index.ts","../src/core/task.ts","../src/utils/package-manager.ts","../src/utils/emit.ts","../src/runtimes/chrome.ts","../src/runtimes/index.ts","../src/core/index.ts","../src/cli/index.ts"],"sourcesContent":["import { Observable } from 'rxjs'\r\n\r\nexport default <T>(func: Function): Observable<T> =>\r\n  Observable.create(observer => {\r\n    const unsubscribe = func(observer)\r\n    return async () => (await unsubscribe)?.()\r\n  })\r\n","import Parcel from '@parcel/core'\r\n\r\nimport AsyncObservable from '../utils/async-observable.ts'\r\n\r\nexport enum PARCEL_REPORTER_EVENT {\r\n  BUILD_START = 'buildStart',\r\n  BUILD_PROGRESS = 'buildProgress',\r\n  BUILD_SUCCESS = 'buildSuccess',\r\n  BUILD_FAILURE = 'buildFailure',\r\n  LOG = 'log'\r\n}\r\n\r\nexport default (initialParcelOptions) =>\r\n  AsyncObservable(async observer => {\r\n    const parcel = new Parcel({\r\n      entries: ['tests/unit/index_test.ts'],\r\n      targets: {\r\n        test: {\r\n          distDir: '.epk/dist/browser',\r\n          browsers: ['last 1 Chrome versions'] // [\"> 1%\", \"not dead\"]\r\n        }\r\n      },\r\n      sourceMaps: true,\r\n      minify: true,\r\n      scopeHoist: true\r\n    })\r\n    \r\n    const { unsubscribe } = await parcel.watch((err, build) => {\r\n      if (err) observer.throw(err)\r\n      observer.next(build)\r\n    })\r\n\r\n    return () => unsubscribe()\r\n  })\r\n","import { Observable } from 'rxjs'\r\n\r\nexport enum TASK_TYPE {\r\n  PRE_ANALYZE = 'preAnalyze',\r\n  RUN = 'run',\r\n  ANALYZE = 'analyze'\r\n}\r\n\r\nexport enum TASK_STATUS {\r\n  START = 'start',\r\n  READY = 'ready',\r\n  END = 'end',\r\n  CANCEL = 'cancel'\r\n}\r\n\r\nexport interface Task {\r\n  type: TASK_TYPE\r\n  data: any\r\n}\r\n\r\nexport interface TaskMessage {\r\n  type: TASK_TYPE\r\n  status: TASK_STATUS\r\n  data?: any\r\n}\r\n\r\n// export default\r\n//   (task: Task) =>\r\n//     messages =>\r\n//       messages\r\n//       |> \r\n\r\n\r\n// export default (task: Task) =>\r\n//   Observable.create(observer => {\r\n//     let _observer\r\n//     const task = Observable.create<TaskMessage>(observer => {\r\n//       _observer = observer\r\n//       observer.next({ type: TASK_STATUS.START })\r\n//       return () => observer.next({ type: TASK_STATUS.CANCEL })\r\n//     })\r\n//     workerFarm.next(task)\r\n//     return () => _observer.complete()\r\n//   })\r\n","import { NodePackageManager} from '@parcel/package-manager'\r\nimport { NodeFS } from '@parcel/fs'\r\n\r\n// const fs = new NodeFS()\r\n// const pkgInstaller = new Yarn()\r\n// const npm = new NodePackageManager(fs, pkgInstaller)\r\n\r\n// export default (...args) => npm.install(...args)\r\n\r\nconst packageManager = new NodePackageManager(new NodeFS())\r\n\r\nexport const require = (...args) =>\r\n  packageManager.require(...args)","import { Observable } from 'rxjs';\r\n\r\nexport default value =>\r\n  Observable.create(observer => observer.next(value))","import { map, tap, finalize, mergeMap, shareReplay } from 'rxjs/operators'\r\n\r\nimport { require } from '../utils/package-manager.ts'\r\nimport emit from '../utils/emit.ts'\r\n\r\nexport default async () => {\r\n  const puppeteer = await require('puppeteer', __filename)\r\n  const browser = await puppeteer.launch()\r\n\r\n\r\n  return (\r\n    emit(async task => {\r\n      const page = browser.newPage()\r\n\r\n      return emit({\r\n        runTask: () => {}\r\n      })\r\n    })\r\n    |> finalize(() => browser.close())\r\n  )\r\n  // return (\r\n  //   taskSubject\r\n  //   |> mergeMap(async task => {\r\n\r\n  //     return {\r\n  //       task,\r\n  //       page: await browser.newPage()\r\n  //     }\r\n  //   })\r\n  //   |> finalize(async () => {\r\n  //     await browser.close()\r\n  //   })z\r\n  // )\r\n}\r\n","import { of, Subject } from 'rxjs'\r\nimport { finalize, filter, shareReplay } from 'rxjs/operators'\r\n\r\nimport chrome from './chrome.ts'\r\nimport emit from '../utils/emit.ts'\r\n\r\nexport enum RUNTIMES {\r\n  CHROME = 'chrome'\r\n}\r\n\r\nexport const runtimeMap = new Map([\r\n  [RUNTIMES.CHROME, chrome]\r\n])\r\n\r\nexport default options => {\r\n  const runtimes = new Map()\r\n\r\n  return emit(\r\n    async (runtimeName, task) => {\r\n      if (!runtimes.has(runtimeName)) {\r\n        const obs = await runtimeMap.get(runtimeName)()\r\n        let runTask\r\n        const sub = obs.subscribe(_runTask => (runTask = _runTask))\r\n        runtimes.set(runtimeName, {\r\n          subscription: sub,\r\n          runTask\r\n        })\r\n      }\r\n\r\n      return runtimes.get(runtimeName).runTask(task)\r\n\r\n      // return task => {\r\n      //   subject.next(task)\r\n      //   return (\r\n      //     runtime\r\n      //     |> filter(({ task: _task }) => _task === task)\r\n      //   )\r\n      // }\r\n    }\r\n  )\r\n  |> finalize(() =>\r\n    Array.from(runtimeSubjects.values())\r\n      .forEach(({ subscription }) => subscription.unsubscribe())\r\n  )\r\n}\r\n","import { Observable, of, generate, from, BehaviorSubject, zip, combineLatest } from 'rxjs'\r\nimport { takeUntil, publish, filter, map, mapTo, switchMap, groupBy, mergeMap, tap, skip, toArray } from 'rxjs/operators'\r\nimport browsersList from 'browserslist'\r\n\r\nimport Parcel from '../parcel/index.ts'\r\nimport { PARCEL_REPORTER_EVENT } from '../parcel/index.ts'\r\nimport WorkerFarm from '../workerFarm/index.ts'\r\nimport Task, { TASK_TYPE, TASK_STATUS } from './task.ts'\r\nimport emit from '../utils/emit.ts'\r\nimport AsyncObservable from '../utils/async-observable.ts'\r\nimport runtimeFactory, { RUNTIMES } from '../runtimes/index.ts'\r\nimport preAnalyze from './pre-analyzer.ts'\r\n\r\nconst getAssetSupportedTargets = asset => [\r\n    ...browsersList(asset.env.engines.browsers)\r\n      |> (arr => arr.map(str =>\r\n        str\r\n          .split(' ')\r\n          .shift()\r\n      ))\r\n      |> (arr => new Set(arr))\r\n      |> (set =>\r\n        Array\r\n          .from(set)\r\n          .filter(runtime => runtime.toUpperCase() in RUNTIMES))\r\n      // todo: add node/electron runtime detection\r\n  ]\r\n\r\nexport default (parcelOptions) =>\r\n  combineLatest(\r\n    Parcel(parcelOptions),\r\n    runtimeFactory()\r\n  )\r\n  |> mergeMap(([bundle, runtime]) =>\r\n    bundle.changedAssets.values()\r\n    |> (values => Array.from(values))\r\n    |> (assets => assets.reduce((arr, asset) => [\r\n      ...arr,\r\n      ...getAssetSupportedTargets(asset)\r\n        .map(target => ({\r\n          asset,\r\n          target\r\n        }))\r\n    ], []))\r\n    |> from\r\n    |> groupBy(\r\n      ({ target }) => target,\r\n      ({ asset }) => asset\r\n    )\r\n    |> mergeMap(assets =>\r\n      combineLatest(\r\n        assets,\r\n        runtime(assets.key)\r\n      )\r\n      |> mergeMap(([asset, run]) => {\r\n        const preAnalyze = run({ type: TASK_TYPE.PRE_ANALYZE })\r\n\r\n      })\r\n    )\r\n  )\r\n\r\n  // |> switchMap(([bundle, run]) =>\r\n  //   of(bundle)\r\n  //   |> mergeMap(({ changedAssets }) =>\r\n  //     changedAssets.values()\r\n  //     |> Array.from\r\n  //     |> from\r\n  //   )\r\n  //   |> map(asset => ({\r\n  //       engines: getAssetSupportedTargets(asset),\r\n  //       asset\r\n  //     })\r\n  //   )\r\n  //   |> mergeMap(({engines, asset}) =>\r\n  //     from(engines)\r\n  //     |> mergeMap(runtime => {\r\n  //       const analyze = run(runtime, { type: TASK_TYPE.PRE_ANALYZE })\r\n  //       return analyze\r\n  //     })\r\n  //   )\r\n  // )\r\n\r\n  // AsyncObservable(observer => {\r\n  //   const bundle =\r\n  //     (Parcel(parcelOptions)\r\n  //     |> publish())\r\n  //       .refCount()\r\n  \r\n  //   const analyze =\r\n  //     bundle\r\n  //     |> switchMap(bundle =>\r\n  //       of(bundle)\r\n  //       |> mergeMap(({ changedAssets }) => from(changedAssets.values()))\r\n  //       |> map(asset => ({ asset }))\r\n  //       |> mergeMap(asset =>\r\n  //         of(asset)\r\n  //         |> )\r\n  //       |> groupBy(({ env: { context, engines: { browsers } } }) =>\r\n  //         context === 'browser'\r\n  //           ? ['chrome']\r\n  //           // ? browsersList(browsers)\r\n  //           //   .map(str => str.split(' '))\r\n  //           //   .shift()\r\n  //           : ['node']\r\n  //       )\r\n  //       |> mergeMap(group =>\r\n  //         zip(\r\n  //           of(group.key),\r\n  //           group\r\n  //         )\r\n  //       )\r\n  //       |> mergeMap(([contexts, asset]) =>\r\n  //         from(contexts)\r\n  //         |> map(context => [context, asset])\r\n  //       )\r\n  //       |> mergeMap(([context, asset]) => {\r\n  //         debugger\r\n  //       })\r\n  //     )\r\n  \r\n  //   const analyzeSubscription = analyze.subscribe()\r\n  //   return () => {\r\n  //     analyzeSubscription.unsubscribe()\r\n  //   }\r\n  // })\r\n","// import Parcel from '@parcel/core'\r\n\r\n// console.log(new Parcel())\r\n\r\nimport EPK from '../core/index.ts'\r\n\r\nconst run = (entryFiles) => {\r\n  const epk = EPK({\r\n    entryFiles\r\n  })\r\n\r\n  epk.subscribe(v => console.log(v))\r\n}\r\n\r\nrun()\r\n"],"names":["func","Observable","create","observer","unsubscribe","PARCEL_REPORTER_EVENT","initialParcelOptions","AsyncObservable","parcel","Parcel","entries","targets","test","distDir","browsers","sourceMaps","minify","scopeHoist","watch","err","build","throw","next","TASK_TYPE","TASK_STATUS","packageManager","NodePackageManager","NodeFS","require","args","value","puppeteer","__filename","browser","launch","emit","task","page","newPage","runTask","finalize","close","RUNTIMES","runtimeMap","Map","CHROME","chrome","options","runtimes","runtimeName","has","obs","get","sub","subscribe","_runTask","set","subscription","Array","from","runtimeSubjects","values","forEach","getAssetSupportedTargets","asset","browsersList","env","engines","arr","map","str","split","shift","Set","filter","runtime","toUpperCase","parcelOptions","combineLatest","runtimeFactory","mergeMap","bundle","changedAssets","assets","reduce","target","groupBy","key","run","preAnalyze","type","PRE_ANALYZE","entryFiles","epk","EPK","v","console","log"],"mappings":"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"}