{"version":3,"file":"index.js","sources":["../src/parcel/index.ts","../src/core/task.ts","../src/utils/install.ts"],"sourcesContent":["import Parcel from '@parcel/core'\r\n\r\nimport AsyncObservable from '../utils/async-observable.ts'\r\n\r\nexport enum PARCEL_REPORTER_EVENT {\r\n  BUILD_START = 'buildStart',\r\n  BUILD_PROGRESS = 'buildProgress',\r\n  BUILD_SUCCESS = 'buildSuccess',\r\n  BUILD_FAILURE = 'buildFailure',\r\n  LOG = 'log'\r\n}\r\n\r\nexport default (initialParcelOptions) =>\r\n  AsyncObservable(async observer => {\r\n    const parcel = new Parcel({\r\n      entries: ['tests/unit/index_test.ts'],\r\n      targets: {\r\n        test: {\r\n          distDir: '.epk/dist/browser',\r\n          browsers: ['last 1 Chrome versions'] // [\"> 1%\", \"not dead\"]\r\n        }\r\n      },\r\n      sourceMaps: true,\r\n      minify: true,\r\n      scopeHoist: true\r\n    })\r\n    \r\n    const { unsubscribe } = await parcel.watch((err, build) => {\r\n      if (err) observer.throw(err)\r\n      observer.next(build)\r\n    })\r\n\r\n    return () => unsubscribe()\r\n  })\r\n","import { Observable } from 'rxjs'\r\n\r\nexport enum TASK_TYPE {\r\n  PRE_ANALYZE = 'preAnalyze',\r\n  RUN = 'run',\r\n  ANALYZE = 'analyze'\r\n}\r\n\r\nexport enum TASK_STATUS {\r\n  START = 'start',\r\n  READY = 'ready',\r\n  END = 'end',\r\n  CANCEL = 'cancel'\r\n}\r\n\r\nexport interface Task {\r\n  type: TASK_TYPE\r\n  data: any\r\n}\r\n\r\nexport interface TaskMessage {\r\n  type: TASK_TYPE\r\n  status: TASK_STATUS\r\n  data?: any\r\n}\r\n\r\n// export default\r\n//   (task: Task) =>\r\n//     messages =>\r\n//       messages\r\n//       |> \r\n\r\n\r\n// export default (task: Task) =>\r\n//   Observable.create(observer => {\r\n//     let _observer\r\n//     const task = Observable.create<TaskMessage>(observer => {\r\n//       _observer = observer\r\n//       observer.next({ type: TASK_STATUS.START })\r\n//       return () => observer.next({ type: TASK_STATUS.CANCEL })\r\n//     })\r\n//     workerFarm.next(task)\r\n//     return () => _observer.complete()\r\n//   })\r\n","import { NodePackageManager, Yarn } from '@parcel/package-manager'\r\nimport { NodeFS } from '@parcel/fs'\r\n\r\nconst fs = new NodeFS()\r\nconst pkgInstaller = new Yarn()\r\nconst npm = new NodePackageManager(fs, pkgInstaller)\r\n\r\nexport default (...args) => npm.install(...args)"],"names":["PARCEL_REPORTER_EVENT","TASK_TYPE","TASK_STATUS","fs","NodeFS","pkgInstaller","Yarn","npm","NodePackageManager"],"mappings":";;;;;;IAIYA,qBAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;EAAAA;EAAAA;GAAAA,0BAAAA;;ICFAC,SAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;GAAAA,cAAAA;;AAMZ,IAAYC,WAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;EAAAA;GAAAA,gBAAAA;;;;;;;;;;;;;;;;;ACLZ,MAAMC,EAAE,GAAG,IAAIC,MAAJ,EAAX;AACA,MAAMC,YAAY,GAAG,IAAIC,IAAJ,EAArB;AACA,MAAMC,GAAG,GAAG,IAAIC,kBAAJ,CAAuBL,EAAvB,EAA2BE,YAA3B,CAAZ"}