{"version":3,"file":"index.js","sources":["../src/parcel/index.ts","../src/core/task.ts","../src/utils/package-manager.ts","../src/utils/emit.ts","../src/runtimes/chrome.ts","../src/runtimes/index.ts"],"sourcesContent":["import Parcel from '@parcel/core'\r\n\r\nimport AsyncObservable from '../utils/async-observable.ts'\r\n\r\nexport enum PARCEL_REPORTER_EVENT {\r\n  BUILD_START = 'buildStart',\r\n  BUILD_PROGRESS = 'buildProgress',\r\n  BUILD_SUCCESS = 'buildSuccess',\r\n  BUILD_FAILURE = 'buildFailure',\r\n  LOG = 'log'\r\n}\r\n\r\nexport default (initialParcelOptions) =>\r\n  AsyncObservable(async observer => {\r\n    const parcel = new Parcel({\r\n      entries: ['tests/unit/index_test.ts'],\r\n      targets: {\r\n        test: {\r\n          distDir: '.epk/dist/browser',\r\n          browsers: ['last 1 Chrome versions'] // [\"> 1%\", \"not dead\"]\r\n        }\r\n      },\r\n      sourceMaps: true,\r\n      minify: true,\r\n      scopeHoist: true\r\n    })\r\n    \r\n    const { unsubscribe } = await parcel.watch((err, build) => {\r\n      if (err) observer.throw(err)\r\n      observer.next(build)\r\n    })\r\n\r\n    return () => unsubscribe()\r\n  })\r\n","import { Observable } from 'rxjs'\r\n\r\nexport enum TASK_TYPE {\r\n  PRE_ANALYZE = 'preAnalyze',\r\n  RUN = 'run',\r\n  ANALYZE = 'analyze'\r\n}\r\n\r\nexport enum TASK_STATUS {\r\n  START = 'start',\r\n  READY = 'ready',\r\n  END = 'end',\r\n  CANCEL = 'cancel'\r\n}\r\n\r\nexport interface Task {\r\n  type: TASK_TYPE\r\n  data: any\r\n}\r\n\r\nexport interface TaskMessage {\r\n  type: TASK_TYPE\r\n  status: TASK_STATUS\r\n  data?: any\r\n}\r\n\r\n// export default\r\n//   (task: Task) =>\r\n//     messages =>\r\n//       messages\r\n//       |> \r\n\r\n\r\n// export default (task: Task) =>\r\n//   Observable.create(observer => {\r\n//     let _observer\r\n//     const task = Observable.create<TaskMessage>(observer => {\r\n//       _observer = observer\r\n//       observer.next({ type: TASK_STATUS.START })\r\n//       return () => observer.next({ type: TASK_STATUS.CANCEL })\r\n//     })\r\n//     workerFarm.next(task)\r\n//     return () => _observer.complete()\r\n//   })\r\n","import { NodePackageManager} from '@parcel/package-manager'\r\nimport { NodeFS } from '@parcel/fs'\r\n\r\n// const fs = new NodeFS()\r\n// const pkgInstaller = new Yarn()\r\n// const npm = new NodePackageManager(fs, pkgInstaller)\r\n\r\n// export default (...args) => npm.install(...args)\r\n\r\nconst packageManager = new NodePackageManager(new NodeFS())\r\n\r\nexport const require = (...args) =>\r\n  packageManager.require(...args)","import { Observable } from 'rxjs';\r\n\r\nexport default value =>\r\n  Observable.create(observer => observer.next(value))","import { map, tap, finalize, mergeMap, shareReplay } from 'rxjs/operators'\r\n\r\nimport { require } from '../utils/package-manager.ts'\r\nimport emit from '../utils/emit.ts'\r\n\r\nexport default async () => {\r\n  const puppeteer = await require('puppeteer', __filename)\r\n  const browser = await puppeteer.launch()\r\n\r\n\r\n  return (\r\n    emit(async task => {\r\n      const page = browser.newPage()\r\n\r\n      return emit({\r\n        runTask: () => {}\r\n      })\r\n    })\r\n    |> finalize(() => browser.close())\r\n  )\r\n  // return (\r\n  //   taskSubject\r\n  //   |> mergeMap(async task => {\r\n\r\n  //     return {\r\n  //       task,\r\n  //       page: await browser.newPage()\r\n  //     }\r\n  //   })\r\n  //   |> finalize(async () => {\r\n  //     await browser.close()\r\n  //   })z\r\n  // )\r\n}\r\n","import { of, Subject } from 'rxjs'\r\nimport { finalize, filter, shareReplay } from 'rxjs/operators'\r\n\r\nimport chrome from './chrome.ts'\r\nimport emit from '../utils/emit.ts'\r\n\r\nexport enum RUNTIMES {\r\n  CHROME = 'chrome'\r\n}\r\n\r\nexport const runtimeMap = new Map([\r\n  [RUNTIMES.CHROME, chrome]\r\n])\r\n\r\nexport default options => {\r\n  const runtimes = new Map()\r\n\r\n  return emit(\r\n    async (runtimeName, task) => {\r\n      if (!runtimes.has(runtimeName)) {\r\n        const obs = await runtimeMap.get(runtimeName)()\r\n        let runTask\r\n        const sub = obs.subscribe(_runTask => (runTask = _runTask))\r\n        runtimes.set(runtimeName, {\r\n          subscription: sub,\r\n          runTask\r\n        })\r\n      }\r\n\r\n      return runtimes.get(runtimeName).runTask(task)\r\n\r\n      // return task => {\r\n      //   subject.next(task)\r\n      //   return (\r\n      //     runtime\r\n      //     |> filter(({ task: _task }) => _task === task)\r\n      //   )\r\n      // }\r\n    }\r\n  )\r\n  |> finalize(() =>\r\n    Array.from(runtimeSubjects.values())\r\n      .forEach(({ subscription }) => subscription.unsubscribe())\r\n  )\r\n}\r\n"],"names":["PARCEL_REPORTER_EVENT","TASK_TYPE","TASK_STATUS","packageManager","NodePackageManager","NodeFS","require","args","value","Observable","create","observer","next","puppeteer","__filename","browser","launch","emit","task","page","newPage","runTask","finalize","close","RUNTIMES","runtimeMap","Map","CHROME","chrome"],"mappings":";;;;;;;IAIYA,qBAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;EAAAA;EAAAA;GAAAA,0BAAAA;;ICFAC,SAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;GAAAA,cAAAA;;AAMZ,IAAYC,WAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;EAAAA;GAAAA,gBAAAA;;;;;;;;;;;;;;;;;ACJZ;;;;AAKA,MAAMC,cAAc,GAAG,IAAIC,kBAAJ,CAAuB,IAAIC,MAAJ,EAAvB,CAAvB;AAEA,AAAO,MAAMC,OAAO,GAAG,CAAC,GAAGC,IAAJ,KACrBJ,cAAc,CAACG,OAAf,CAAuB,GAAGC,IAA1B,CADK;;ACTP,YAAeC,KAAK,IAClBC,UAAU,CAACC,MAAX,CAAkBC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,CAAcJ,KAAd,CAA9B,CADF;;ACGA,cAAe,YAAY;;;QACnBK,SAAS,GAAG,MAAMP,OAAO,CAAC,WAAD,EAAcQ,UAAd,CAA/B;QACMC,OAAO,GAAG,MAAMF,SAAS,CAACG,MAAV,EAAtB;iBAIEC,IAAI,CAAC,MAAMC,IAAN,IAAc;UACXC,IAAI,GAAGJ,OAAO,CAACK,OAAR,EAAb;WAEOH,IAAI,CAAC;MACVI,OAAO,EAAE,MAAM;KADN,CAAX;GAHE,CADN,EAQKC,QAAQ,CAAC,MAAMP,OAAO,CAACQ,KAAR,EAAP,CARb,QALyB;;;;;;;;;;;;CAA3B;;ICCYC,QAAZ;;WAAYA;EAAAA;GAAAA,aAAAA;;AAIZ,AAAO,MAAMC,UAAU,GAAG,IAAIC,GAAJ,CAAQ,CAChC,CAACF,QAAQ,CAACG,MAAV,EAAkBC,MAAlB,CADgC,CAAR,CAAnB"}