{"version":3,"file":"index.js","sources":["../src/parcel/index.ts","../src/core/task.ts","../src/utils/package-manager.ts","../src/utils/emit.ts","../src/runtime/index.ts","../src/utils/mergeMap.ts","../src/runtimes/chrome.ts","../src/runtimes/index.ts"],"sourcesContent":["import Parcel from '@parcel/core'\r\n\r\nimport AsyncObservable from '../utils/async-observable.ts'\r\n\r\nexport enum PARCEL_REPORTER_EVENT {\r\n  BUILD_START = 'buildStart',\r\n  BUILD_PROGRESS = 'buildProgress',\r\n  BUILD_SUCCESS = 'buildSuccess',\r\n  BUILD_FAILURE = 'buildFailure',\r\n  LOG = 'log'\r\n}\r\n\r\nexport default (initialParcelOptions) =>\r\n  AsyncObservable(async observer => {\r\n    const parcel = new Parcel({\r\n      entries: ['tests/unit/index_test.ts'],\r\n      targets: {\r\n        test: {\r\n          distDir: '.epk/dist/browser',\r\n          browsers: ['last 1 Chrome versions'] // [\"> 1%\", \"not dead\"]\r\n        }\r\n      },\r\n      sourceMaps: true,\r\n      minify: true,\r\n      scopeHoist: true\r\n    })\r\n    \r\n    const { unsubscribe } = await parcel.watch((err, build) => {\r\n      if (err) observer.throw(err)\r\n      observer.next(build)\r\n    })\r\n\r\n    return () => unsubscribe()\r\n  })\r\n","import { Observable } from 'rxjs'\r\n\r\nexport enum TASK_TYPE {\r\n  PRE_ANALYZE = 'preAnalyze',\r\n  RUN = 'run',\r\n  ANALYZE = 'analyze'\r\n}\r\n\r\nexport enum TASK_STATUS {\r\n  START = 'start',\r\n  READY = 'ready',\r\n  END = 'end',\r\n  CANCEL = 'cancel'\r\n}\r\n\r\nexport interface Task {\r\n  type: TASK_TYPE\r\n  data: any\r\n}\r\n\r\nexport interface TaskMessage {\r\n  type: TASK_TYPE\r\n  status: TASK_STATUS\r\n  data?: any\r\n}\r\n\r\n// export default\r\n//   (task: Task) =>\r\n//     messages =>\r\n//       messages\r\n//       |> \r\n\r\n\r\n// export default (task: Task) =>\r\n//   Observable.create(observer => {\r\n//     let _observer\r\n//     const task = Observable.create<TaskMessage>(observer => {\r\n//       _observer = observer\r\n//       observer.next({ type: TASK_STATUS.START })\r\n//       return () => observer.next({ type: TASK_STATUS.CANCEL })\r\n//     })\r\n//     workerFarm.next(task)\r\n//     return () => _observer.complete()\r\n//   })\r\n","import { NodePackageManager} from '@parcel/package-manager'\r\nimport { NodeFS } from '@parcel/fs'\r\n\r\n// const fs = new NodeFS()\r\n// const pkgInstaller = new Yarn()\r\n// const npm = new NodePackageManager(fs, pkgInstaller)\r\n\r\n// export default (...args) => npm.install(...args)\r\n\r\nconst packageManager = new NodePackageManager(new NodeFS())\r\n\r\nexport const require = (...args) =>\r\n  packageManager.require(...args)","import { Observable } from 'rxjs';\r\n\r\nexport default value =>\r\n  Observable.create(observer => observer.next(value))","import { Subject } from 'rxjs'\r\n\r\nexport enum GLOBALS {\r\n  MESSAGES = '__EPK_MESSAGES',\r\n  SEND_MESSAGE = '__EPK_SEND_MESSAGE'\r\n}\r\n\r\nglobalThis[GLOBALS.MESSAGES] = new Subject()\r\n","import { mergeMap } from 'rxjs/operators'\r\nimport { isObservable, from, of } from 'rxjs'\r\n\r\nexport default (project, resultSelector, concurrent) =>\r\n  mergeMap(\r\n    (...args) => {\r\n      const result = project(...args)\r\n\r\n      return (\r\n        result instanceof Promise\r\n          ? from(result) |> mergeMap(obs => obs)\r\n          : result\r\n      )\r\n    },\r\n    resultSelector,\r\n    concurrent\r\n  )\r\n","import { map, tap, finalize, shareReplay, filter, combineLatest } from 'rxjs/operators'\r\n\r\nimport { require } from '../utils/package-manager.ts'\r\nimport emit from '../utils/emit.ts'\r\nimport { Subject, of } from 'rxjs'\r\nimport { GLOBALS } from '../runtime/index.ts'\r\nimport mergeMap from '../utils/mergeMap.ts'\r\n\r\n\r\nexport default async () => {\r\n  const puppeteer = await require('puppeteer', __filename)\r\n  const browser = await puppeteer.launch()\r\n\r\n  return (\r\n    emit(func =>\r\n      of(func)\r\n      |> mergeMap(async func => {\r\n        const page = await browser.newPage()\r\n        const pageMessages = new Subject()\r\n\r\n        await page.exposeFunction(GLOBALS.SEND_MESSAGE, msg => pageMessages.next(msg))\r\n\r\n        let count = 0\r\n        return (\r\n          func(task => {\r\n            const id = count\r\n            count++\r\n\r\n            return (\r\n              task\r\n              |> tap(message =>\r\n                page.evaluate(\r\n                  (message, GLOBALS) => globalThis[GLOBALS.MESSAGES].next(message),\r\n                  {\r\n                    id,\r\n                    ...message\r\n                  },\r\n                  GLOBALS\r\n                )\r\n              )\r\n              |> combineLatest(pageMessages, (_, task) => task)\r\n              |> filter(({ id: _id }) => _id === id)\r\n            )\r\n          })\r\n          |> finalize(() => page.close())\r\n        )\r\n      })\r\n      |> mergeMap(obs => obs)\r\n    )\r\n    |> finalize(() => browser.close())\r\n  )\r\n}\r\n","import { of, isObservable, ReplaySubject } from 'rxjs'\r\nimport { finalize, filter, shareReplay } from 'rxjs/operators'\r\n\r\nimport chrome from './chrome.ts'\r\nimport emit from '../utils/emit.ts'\r\n\r\nexport enum RUNTIMES {\r\n  CHROME = 'chrome'\r\n}\r\n\r\nexport const runtimeMap = new Map([\r\n  [RUNTIMES.CHROME, chrome]\r\n])\r\n\r\nexport default options => {\r\n  const runtimes = new Map()\r\n  return (\r\n    emit(async runtimeName => {\r\n        if (!runtimes.has(runtimeName)) {\r\n          const obs = await runtimeMap.get(runtimeName)()\r\n          let createContext\r\n          const sub = obs.subscribe(_createContext => (createContext = _createContext))\r\n          runtimes.set(runtimeName, {\r\n            subscription: sub,\r\n            createContext\r\n          })\r\n        }\r\n\r\n        return runtimes.get(runtimeName).createContext\r\n      }\r\n    )\r\n    |> finalize(() =>\r\n      Array.from(runtimes.values())\r\n        .forEach(({ subscription }) => subscription.unsubscribe())\r\n    )\r\n  )\r\n}\r\n"],"names":["PARCEL_REPORTER_EVENT","TASK_TYPE","TASK_STATUS","packageManager","NodePackageManager","NodeFS","require","args","value","Observable","create","observer","next","GLOBALS","globalThis","MESSAGES","Subject","project","resultSelector","concurrent","mergeMap","result","Promise","from","obs","puppeteer","__filename","browser","launch","emit","func","of","page","newPage","pageMessages","exposeFunction","SEND_MESSAGE","msg","count","task","id","tap","message","evaluate","combineLatest","_","filter","_id","finalize","close","RUNTIMES","runtimeMap","Map","CHROME","chrome"],"mappings":";;;;;;;IAIYA,qBAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;EAAAA;EAAAA;GAAAA,0BAAAA;;ICFAC,SAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;GAAAA,cAAAA;;AAMZ,IAAYC,WAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;EAAAA;GAAAA,gBAAAA;;;;;;;;;;;;;;;;;ACJZ;;;;AAKA,MAAMC,cAAc,GAAG,IAAIC,kBAAJ,CAAuB,IAAIC,MAAJ,EAAvB,CAAvB;AAEA,AAAO,MAAMC,OAAO,GAAG,CAAC,GAAGC,IAAJ,KACrBJ,cAAc,CAACG,OAAf,CAAuB,GAAGC,IAA1B,CADK;;ACTP,YAAeC,KAAK,IAClBC,UAAU,CAACC,MAAX,CAAkBC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,CAAcJ,KAAd,CAA9B,CADF;;ICAYK,OAAZ;;WAAYA;EAAAA;EAAAA;GAAAA,YAAAA;;AAKZC,UAAU,CAACD,OAAO,CAACE,QAAT,CAAV,GAA+B,IAAIC,OAAJ,EAA/B;;ACJA,gBAAe,CAACC,OAAD,EAAUC,cAAV,EAA0BC,UAA1B,KACbC,UAAQ,CACN,CAAC,GAAGb,IAAJ,KAAa;;;QACLc,MAAM,GAAGJ,OAAO,CAAC,GAAGV,IAAJ,CAAtB;SAGEc,MAAM,YAAYC,OAAlB,YACIC,IAAI,CAACF,MAAD,CADR,EACoBD,UAAQ,CAACI,GAAG,IAAIA,GAAR,CAD5B,WAEIH,MAHN;CAJI,EAUNH,cAVM,EAWNC,UAXM,CADV;;ACMA,cAAe,YAAY;;;QACnBM,SAAS,GAAG,MAAMnB,OAAO,CAAC,WAAD,EAAcoB,UAAd,CAA/B;QACMC,OAAO,GAAG,MAAMF,SAAS,CAACG,MAAV,EAAtB;iBAGEC,IAAI,CAACC,IAAI;;;yBACPC,EAAE,CAACD,IAAD,CADK,EAEJV,QAAQ,CAAC,MAAMU,IAAN,IAAc;;;YAClBE,IAAI,GAAG,MAAML,OAAO,CAACM,OAAR,EAAnB;YACMC,YAAY,GAAG,IAAIlB,OAAJ,EAArB;YAEMgB,IAAI,CAACG,cAAL,CAAoBtB,OAAO,CAACuB,YAA5B,EAA0CC,GAAG,IAAIH,YAAY,CAACtB,IAAb,CAAkByB,GAAlB,CAAjD,CAAN;UAEIC,KAAK,GAAG,CAAZ;qBAEER,IAAI,CAACS,IAAI,IAAI;;;cACLC,EAAE,GAAGF,KAAX;QACAA,KAAK;yCAGHC,IADF,EAEKE,GAAG,CAACC,OAAO,IACZV,IAAI,CAACW,QAAL,CACE,CAACD,OAAD,EAAU7B,OAAV,KAAsBC,UAAU,CAACD,OAAO,CAACE,QAAT,CAAV,CAA6BH,IAA7B,CAAkC8B,OAAlC,CADxB,EAEE;UACEF,EADF;aAEKE;SAJP,EAME7B,OANF,CADI,CAFR,UAYK+B,aAAa,CAACV,YAAD,EAAe,CAACW,CAAD,EAAIN,IAAJ,KAAaA,IAA5B,CAZlB,UAaKO,MAAM,CAAC,CAAC;UAAEN,EAAE,EAAEO;SAAP,KAAiBA,GAAG,KAAKP,EAA1B,CAbX;OAJE,CADN,EAqBKQ,QAAQ,CAAC,MAAMhB,IAAI,CAACiB,KAAL,EAAP,CArBb;KAPS,CAFJ,QAiCJ7B,QAAQ,CAACI,GAAG,IAAIA,GAAR,CAjCJ;GAAL,CADN,EAoCKwB,QAAQ,CAAC,MAAMrB,OAAO,CAACsB,KAAR,EAAP,CApCb;CAJF;;ICHYC,QAAZ;;WAAYA;EAAAA;GAAAA,aAAAA;;AAIZ,AAAO,MAAMC,UAAU,GAAG,IAAIC,GAAJ,CAAQ,CAChC,CAACF,QAAQ,CAACG,MAAV,EAAkBC,MAAlB,CADgC,CAAR,CAAnB;;;;"}