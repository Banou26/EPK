{"version":3,"file":"index.js","sources":["../src/parcel/index.ts","../src/core/task.ts","../src/utils/package-manager.ts","../src/runtime/index.ts","../src/runtimes/chrome.ts","../src/runtimes/index.ts"],"sourcesContent":["import Parcel from '@parcel/core'\r\n\r\nimport AsyncObservable from '../utils/async-observable.ts'\r\n\r\nexport enum PARCEL_REPORTER_EVENT {\r\n  BUILD_START = 'buildStart',\r\n  BUILD_PROGRESS = 'buildProgress',\r\n  BUILD_SUCCESS = 'buildSuccess',\r\n  BUILD_FAILURE = 'buildFailure',\r\n  LOG = 'log'\r\n}\r\n\r\nexport default (initialParcelOptions) =>\r\n  AsyncObservable(async observer => {\r\n    const parcel = new Parcel({\r\n      entries: ['tests/unit/index_test.ts'],\r\n      targets: {\r\n        test: {\r\n          distDir: '.epk/dist/browser',\r\n          browsers: ['last 1 Chrome versions'] // [\"> 1%\", \"not dead\"]\r\n        }\r\n      },\r\n      sourceMaps: true,\r\n      minify: true,\r\n      scopeHoist: true\r\n    })\r\n    \r\n    const { unsubscribe } = await parcel.watch((err, build) => {\r\n      if (err) observer.throw(err)\r\n      observer.next(build)\r\n    })\r\n\r\n    return () => unsubscribe()\r\n  })\r\n","import { Observable } from 'rxjs'\r\n\r\nexport enum TASK_TYPE {\r\n  PRE_ANALYZE = 'preAnalyze',\r\n  RUN = 'run',\r\n  ANALYZE = 'analyze'\r\n}\r\n\r\nexport enum TASK_STATUS {\r\n  START = 'start',\r\n  READY = 'ready',\r\n  END = 'end',\r\n  CANCEL = 'cancel'\r\n}\r\n\r\nexport interface Task {\r\n  type: TASK_TYPE\r\n  data: any\r\n}\r\n\r\nexport interface TaskMessage {\r\n  type: TASK_TYPE\r\n  status: TASK_STATUS\r\n  data?: any\r\n}\r\n\r\n// export default\r\n//   (task: Task) =>\r\n//     messages =>\r\n//       messages\r\n//       |> \r\n\r\n\r\n// export default (task: Task) =>\r\n//   Observable.create(observer => {\r\n//     let _observer\r\n//     const task = Observable.create<TaskMessage>(observer => {\r\n//       _observer = observer\r\n//       observer.next({ type: TASK_STATUS.START })\r\n//       return () => observer.next({ type: TASK_STATUS.CANCEL })\r\n//     })\r\n//     workerFarm.next(task)\r\n//     return () => _observer.complete()\r\n//   })\r\n","import { NodePackageManager} from '@parcel/package-manager'\r\nimport { NodeFS } from '@parcel/fs'\r\n\r\n// const fs = new NodeFS()\r\n// const pkgInstaller = new Yarn()\r\n// const npm = new NodePackageManager(fs, pkgInstaller)\r\n\r\n// export default (...args) => npm.install(...args)\r\n\r\nconst packageManager = new NodePackageManager(new NodeFS())\r\n\r\nexport const require = (...args) =>\r\n  packageManager.require(...args)","\r\nexport enum GLOBALS {\r\n  MESSAGES = '__EPK_MESSAGES',\r\n  SEND_MESSAGE = '__EPK_SEND_MESSAGE'\r\n}","import { map, tap, finalize, mergeMap, shareReplay, filter } from 'rxjs/operators'\r\n\r\nimport { require } from '../utils/package-manager.ts'\r\nimport emit from '../utils/emit.ts'\r\nimport { Subject } from 'rxjs'\r\nimport { GLOBALS } from '../runtime/index.ts'\r\n\r\n\r\nexport default async (contextObservable) => {\r\n  const puppeteer = await require('puppeteer', __filename)\r\n  const browser = await puppeteer.launch()\r\n\r\n\r\n  return (\r\n    contextObservable\r\n    |> mergeMap(async (taskObservable) => {\r\n      const page = await browser.newPage()\r\n      const pageMessages = new Subject()\r\n\r\n      await page.exposeFunction(GLOBALS.SEND_MESSAGE, msg => pageMessages.next(msg))\r\n\r\n      return (\r\n        taskObservable\r\n        |> mergeMap((task, id) =>\r\n          task\r\n          |> tap(message =>\r\n            page.evaluate(\r\n              message => globalThis[GLOBALS.MESSAGES].next(message),\r\n              {\r\n                id,\r\n                ...message\r\n              }\r\n            )\r\n          )\r\n          |> combineLatest(pageMessages, (_, task) => task)\r\n          |> filter(({ id: _id }) => _id === id)\r\n        )\r\n        |> finalize(() => page.close())\r\n      )\r\n    })\r\n    |> finalize(() => browser.close())\r\n  )\r\n  // return (\r\n  //   taskSubject\r\n  //   |> mergeMap(async task => {\r\n\r\n  //     return {\r\n  //       task,\r\n  //       page: await browser.newPage()\r\n  //     }\r\n  //   })\r\n  //   |> finalize(async () => {\r\n  //     await browser.close()\r\n  //   })z\r\n  // )\r\n}\r\n","import { of, isObservable, ReplaySubject } from 'rxjs'\r\nimport { finalize, filter, shareReplay } from 'rxjs/operators'\r\n\r\nimport chrome from './chrome.ts'\r\nimport emit from '../utils/emit.ts'\r\n\r\nexport enum RUNTIMES {\r\n  CHROME = 'chrome'\r\n}\r\n\r\nexport const runtimeMap = new Map([\r\n  [RUNTIMES.CHROME, chrome]\r\n])\r\n\r\nexport default options => {\r\n  const runtimes = new Map()\r\n\r\n  return emit(\r\n    async runtimeName => {\r\n      if (!runtimes.has(runtimeName)) {\r\n        const obs = await runtimeMap.get(runtimeName)()\r\n        let createContext\r\n        const sub = obs.subscribe(_createContext => (createContext = _createContext))\r\n        runtimes.set(runtimeName, {\r\n          subscription: sub,\r\n          createContext\r\n        })\r\n      }\r\n\r\n      return task => {\r\n        if (!isObservable(task)) {\r\n          const subject = new ReplaySubject()\r\n          const context = runtimes.get(runtimeName).createContext(subject)\r\n          \r\n          return task => {\r\n            task.subscribe(subject)\r\n          }\r\n        } else {\r\n          return runtimes.get(runtimeName).createContext(task)\r\n        }\r\n      }\r\n    }\r\n  )\r\n  |> finalize(() =>\r\n    Array.from(runtimes.values())\r\n      .forEach(({ subscription }) => subscription.unsubscribe())\r\n  )\r\n}\r\n"],"names":["PARCEL_REPORTER_EVENT","TASK_TYPE","TASK_STATUS","packageManager","NodePackageManager","NodeFS","require","args","GLOBALS","contextObservable","puppeteer","__filename","browser","launch","mergeMap","taskObservable","page","newPage","pageMessages","Subject","exposeFunction","SEND_MESSAGE","msg","next","task","id","tap","message","evaluate","globalThis","MESSAGES","combineLatest","_","filter","_id","finalize","close","RUNTIMES","runtimeMap","Map","CHROME","chrome"],"mappings":";;;;;;;IAIYA,qBAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;EAAAA;EAAAA;GAAAA,0BAAAA;;ICFAC,SAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;GAAAA,cAAAA;;AAMZ,IAAYC,WAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;EAAAA;GAAAA,gBAAAA;;;;;;;;;;;;;;;;;ACJZ;;;;AAKA,MAAMC,cAAc,GAAG,IAAIC,kBAAJ,CAAuB,IAAIC,MAAJ,EAAvB,CAAvB;AAEA,AAAO,MAAMC,OAAO,GAAG,CAAC,GAAGC,IAAJ,KACrBJ,cAAc,CAACG,OAAf,CAAuB,GAAGC,IAA1B,CADK;;ICVKC,OAAZ;;WAAYA;EAAAA;EAAAA;GAAAA,YAAAA;;ACOZ,cAAe,MAAOC,iBAAP,IAA6B;;;QACpCC,SAAS,GAAG,MAAMJ,OAAO,CAAC,WAAD,EAAcK,UAAd,CAA/B;QACMC,OAAO,GAAG,MAAMF,SAAS,CAACG,MAAV,EAAtB;sCAIEJ,iBADF,EAEKK,QAAQ,CAAC,MAAOC,cAAP,IAA0B;;;UAC9BC,IAAI,GAAG,MAAMJ,OAAO,CAACK,OAAR,EAAnB;UACMC,YAAY,GAAG,IAAIC,OAAJ,EAArB;UAEMH,IAAI,CAACI,cAAL,CAAoBZ,OAAO,CAACa,YAA5B,EAA0CC,GAAG,IAAIJ,YAAY,CAACK,IAAb,CAAkBD,GAAlB,CAAjD,CAAN;sCAGEP,cADF,EAEKD,QAAQ,CAAC,CAACU,IAAD,EAAOC,EAAP;;;uCACVD,IADU,EAEPE,GAAG,CAACC,OAAO,IACZX,IAAI,CAACY,QAAL,CACED,OAAO,IAAIE,UAAU,CAACrB,OAAO,CAACsB,QAAT,CAAV,CAA6BP,IAA7B,CAAkCI,OAAlC,CADb,EAEE;QACEF,EADF;WAEKE;OAJP,CADI,CAFI,UAWPI,aAAa,CAACb,YAAD,EAAe,CAACc,CAAD,EAAIR,IAAJ,KAAaA,IAA5B,CAXN,UAYPS,MAAM,CAAC,CAAC;QAAER,EAAE,EAAES;OAAP,KAAiBA,GAAG,KAAKT,EAA1B,CAZC;KAAD,CAFb,oBAgBKU,QAAQ,CAAC,MAAMnB,IAAI,CAACoB,KAAL,EAAP,CAhBb;GANS,CAFb,uBA2BKD,QAAQ,CAAC,MAAMvB,OAAO,CAACwB,KAAR,EAAP,CA3Bb,OAL0C;;;;;;;;;;;;CAA5C;;ICFYC,QAAZ;;WAAYA;EAAAA;GAAAA,aAAAA;;AAIZ,AAAO,MAAMC,UAAU,GAAG,IAAIC,GAAJ,CAAQ,CAChC,CAACF,QAAQ,CAACG,MAAV,EAAkBC,MAAlB,CADgC,CAAR,CAAnB;;;;"}