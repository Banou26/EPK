{"version":3,"file":"index.js","sources":["../src/parcel/index.ts","../src/utils/cpu.ts","../src/core/task.ts"],"sourcesContent":["import Parcel from '@parcel/core'\r\n\r\nimport AsyncObservable from '../utils/async-observable.ts'\r\n\r\nexport enum PARCEL_REPORTER_EVENT {\r\n  BUILD_START = 'buildStart',\r\n  BUILD_PROGRESS = 'buildProgress',\r\n  BUILD_SUCCESS = 'buildSuccess',\r\n  BUILD_FAILURE = 'buildFailure',\r\n  LOG = 'log'\r\n}\r\n\r\nexport default (initialParcelOptions) =>\r\n  AsyncObservable(async observer => {\r\n    const parcel = new Parcel({\r\n      entries: ['tests/unit/index_test.ts'],\r\n      targets: {\r\n        test: {\r\n          distDir: '.epk/dist/browser',\r\n          \"browsers\": [\"> 1%\", \"not dead\"]\r\n        }\r\n      },\r\n      sourceMaps: true,\r\n      minify: true,\r\n      scopeHoist: true\r\n    })\r\n    \r\n    const { unsubscribe } = await parcel.watch((err, build) => {\r\n      if (err) observer.throw(err)\r\n      observer.next(build)\r\n    })\r\n\r\n    return () => unsubscribe()\r\n  })\r\n","import os from 'os'\r\nimport childProcess from 'child_process'\r\n\r\n// todo: once top level await gets there, use it\r\n\r\nlet amount\r\n\r\nif (globalThis.window !== undefined) {\r\n  amount = window.navigator.hardwareConcurrency\r\n} else {\r\n  const exec =\r\n    command =>\r\n      childProcess.execSync(command, {encoding: 'utf8'})\r\n  const platform = os.platform()\r\n\r\n  if (platform === 'linux') {\r\n    const output = exec('lscpu -p | egrep -v \"^#\" | sort -u -t, -k 2,4 | wc -l')\r\n    amount = parseInt(output.trim(), 10)\r\n  } else if (platform === 'darwin') {\r\n    const output = exec('sysctl -n hw.physicalcpu_max')\r\n    amount = parseInt(output.trim(), 10)\r\n  } else if (platform === 'windows') {\r\n    const output = exec('WMIC CPU Get NumberOfCores')\r\n    amount = output.split(os.EOL)\r\n      .map(line => parseInt(line))\r\n      .filter(value => !isNaN(value))\r\n      .reduce((sum, number) => sum + number, 0)\r\n  } else {\r\n    const cores = os.cpus().filter(function (cpu, index) {\r\n      const hasHyperthreading = cpu.model.includes('Intel')\r\n      const isOdd = index % 2 === 1\r\n      return !hasHyperthreading || isOdd\r\n    })\r\n    amount = cores.length\r\n  }\r\n}\r\n\r\n\r\n\r\nexport {\r\n  amount as cpuCount\r\n}","import { Observable } from 'rxjs'\r\n\r\nexport enum TASK_TYPE {\r\n  PRE_ANALYZE = 'preAnalyze',\r\n  RUN = 'run',\r\n  ANALYZE = 'analyze'\r\n}\r\n\r\nexport enum TASK_STATUS {\r\n  START = 'start',\r\n  READY = 'ready',\r\n  END = 'end',\r\n  CANCEL = 'cancel'\r\n}\r\n\r\nexport interface Task {\r\n  type: TASK_TYPE\r\n  data: any\r\n}\r\n\r\nexport interface TaskMessage {\r\n  type: TASK_TYPE\r\n  status: TASK_STATUS\r\n  data?: any\r\n}\r\n\r\n// export default\r\n//   (task: Task) =>\r\n//     messages =>\r\n//       messages\r\n//       |> \r\n\r\n\r\n// export default (task: Task) =>\r\n//   Observable.create(observer => {\r\n//     let _observer\r\n//     const task = Observable.create<TaskMessage>(observer => {\r\n//       _observer = observer\r\n//       observer.next({ type: TASK_STATUS.START })\r\n//       return () => observer.next({ type: TASK_STATUS.CANCEL })\r\n//     })\r\n//     workerFarm.next(task)\r\n//     return () => _observer.complete()\r\n//   })\r\n"],"names":["PARCEL_REPORTER_EVENT","amount","globalThis","window","undefined","navigator","hardwareConcurrency","exec","command","childProcess","execSync","encoding","platform","os","output","parseInt","trim","split","EOL","map","line","filter","value","isNaN","reduce","sum","number","cores","cpus","cpu","index","hasHyperthreading","model","includes","isOdd","length","TASK_TYPE","TASK_STATUS"],"mappings":";;;;;;;IAIYA,qBAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;EAAAA;EAAAA;GAAAA,0BAAAA;;ACCZ,IAAIC,MAAJ;;AAEA,IAAIC,UAAU,CAACC,MAAX,KAAsBC,SAA1B,EAAqC;EACnCH,MAAM,GAAGE,MAAM,CAACE,SAAP,CAAiBC,mBAA1B;CADF,MAEO;QACCC,IAAI,GACRC,OAAO,IACLC,YAAY,CAACC,QAAb,CAAsBF,OAAtB,EAA+B;IAACG,QAAQ,EAAE;GAA1C,CAFJ;;QAGMC,QAAQ,GAAGC,EAAE,CAACD,QAAH,EAAjB;;MAEIA,QAAQ,KAAK,OAAjB,EAA0B;UAClBE,MAAM,GAAGP,IAAI,CAAC,uDAAD,CAAnB;IACAN,MAAM,GAAGc,QAAQ,CAACD,MAAM,CAACE,IAAP,EAAD,EAAgB,EAAhB,CAAjB;GAFF,MAGO,IAAIJ,QAAQ,KAAK,QAAjB,EAA2B;UAC1BE,MAAM,GAAGP,IAAI,CAAC,8BAAD,CAAnB;IACAN,MAAM,GAAGc,QAAQ,CAACD,MAAM,CAACE,IAAP,EAAD,EAAgB,EAAhB,CAAjB;GAFK,MAGA,IAAIJ,QAAQ,KAAK,SAAjB,EAA4B;UAC3BE,MAAM,GAAGP,IAAI,CAAC,4BAAD,CAAnB;IACAN,MAAM,GAAGa,MAAM,CAACG,KAAP,CAAaJ,EAAE,CAACK,GAAhB,EACNC,GADM,CACFC,IAAI,IAAIL,QAAQ,CAACK,IAAD,CADd,EAENC,MAFM,CAECC,KAAK,IAAI,CAACC,KAAK,CAACD,KAAD,CAFhB,EAGNE,MAHM,CAGC,CAACC,GAAD,EAAMC,MAAN,KAAiBD,GAAG,GAAGC,MAHxB,EAGgC,CAHhC,CAAT;GAFK,MAMA;UACCC,KAAK,GAAGd,EAAE,CAACe,IAAH,GAAUP,MAAV,CAAiB,UAAUQ,GAAV,EAAeC,KAAf,EAAsB;YAC7CC,iBAAiB,GAAGF,GAAG,CAACG,KAAJ,CAAUC,QAAV,CAAmB,OAAnB,CAA1B;YACMC,KAAK,GAAGJ,KAAK,GAAG,CAAR,KAAc,CAA5B;aACO,CAACC,iBAAD,IAAsBG,KAA7B;KAHY,CAAd;IAKAjC,MAAM,GAAG0B,KAAK,CAACQ,MAAf;;;;IC/BQC,SAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;GAAAA,cAAAA;;AAMZ,IAAYC,WAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;EAAAA;GAAAA,gBAAAA;;;;;;;;;;;;;;;"}