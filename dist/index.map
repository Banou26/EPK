{"version":3,"sources":["cli/index.ts","runner/bundler.ts","cli/logger.ts","api/utils.ts","api/runner.ts","api/index.ts","utils.ts","test/error.ts","test/test.ts","test/assert.ts","test/index.ts","index.ts"],"names":["helpMessage","chalk","bold","Promise","resolve","reject","program","command","description","action","commands","find","c","name","help","on","_","console","log","args","process","argv","some","splice","parse","options","observable","Observable","create","observer","bundler","Bundler","entryFiles","outDir","watch","cache","cacheDir","minify","scopeHoist","hmr","target","logLevel","sourceMaps","detailedReport","addAssetType","Path","__dirname","bundle","next","buildEndTime","Date","now","buildStartTime","error","stop","prettyError","err","color","undefined","message","fileName","loc","line","column","stack","codeFrame","highlightedCodeFrame","slice","indexOf","supportsEmoji","platform","env","TERM","defaultEmojis","progress","success","warning","countLines","str","split","reduce","p","stdout","columns","Math","ceil","length","pad","text","align","repeat","stringWidth","stripAnsi","countBreaks","Logger","Chalk","supportsColor","emojis","constructor","enabled","isTest","NODE_ENV","lines","spinner","logFile","writeRaw","stopSpinner","write","persistent","verbose","_log","currDate","toLocaleTimeString","fs","createWriteStream","path","join","cwd","toISOString","warn","_writeError","yellow","red","green","formatError","emoji","_color","clear","readline","clearLine","moveCursor","cursorTo","styledMessage","gray","stream","start","table","colWidths","row","i","item","max","map","padding","logger","handleMessage","method","prettifyPath","relative","prettifyTime","time","toFixed","browser","puppeteer","launch","devtools","page","newPage","then","close","ctx","runner","grey","isBrowser","window","GET_TESTS","RUN_TESTS","RUN_TEST","errors","addEventListener","push","tests","Map","todo","pass","fail","test","desc","func","Error","has","set","initiated","setTimeout","data","parent","postMessage","Array","from","toString","result","get","assert","PowerAssert","customize","module","globs","fg","async","subscribe"],"mappings":"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","file":"index.map","sourceRoot":"..\\src","sourcesContent":["import program from 'commander'\r\nimport chalk from 'chalk'\r\n\r\nconst helpMessage = `\r\nRun \\`${chalk.bold('epk help <command>')}\\` for more information on specific commands\r\n`\r\n\r\nexport default (): Promise<string[]> =>\r\n  new Promise((resolve, reject) => {\r\n    program\r\n      .command('serve [input...]')\r\n      .description('starts a development server')\r\n      .action(resolve)\r\n\r\n    program\r\n      .command('help [command]')\r\n      .description('display help information for a command')\r\n      .action(command =>\r\n        (program\r\n            .commands\r\n            .find(c =>\r\n              c.name() === command) ||\r\n        program).help())\r\n\r\n    program.on('--help', _ => console.log(helpMessage))\r\n\r\n    // Make serve the default command except for --help\r\n    const args = process.argv\r\n    if (args[2] === '--help' || args[2] === '-h') args[2] = 'help'\r\n    if (!args[2] || !program.commands.some(c => c.name() === args[2])) {\r\n      args.splice(2, 0, 'serve')\r\n    }\r\n\r\n    program.parse(args)\r\n  })\r\n  ","import Path from 'path'\r\nimport Bundler from 'parcel-bundler'\r\nimport { Observable } from 'rxjs'\r\nimport { Options } from '../types'\r\n\r\nexport default (options: Options) => {\r\n  const observable = Observable.create(observer => {\r\n    const bundler = new Bundler(options.entryFiles, {\r\n      outDir: '.epk/dist',\r\n      watch: true,\r\n      cache: true,\r\n      cacheDir: '.epk/cache',\r\n      minify: false,\r\n      scopeHoist: false,\r\n      hmr: false,\r\n      target: 'browser',\r\n      logLevel: 0, // 3 = log everything, 2 = log warnings & errors, 1 = log errors\r\n      sourceMaps: true, // Enable or disable sourcemaps, defaults to enabled (minified builds currently always create sourcemaps)\r\n      detailedReport: false\r\n    })\r\n    bundler.addAssetType('js', Path.resolve(__dirname, '../src/runner/js-asset.ts'))\r\n    bundler.addAssetType('ts', Path.resolve(__dirname, '../src/runner/ts-asset.ts'))\r\n    bundler.on('bundled', bundle =>\r\n      observer.next({ options, bundler: observable, name: 'bundled', bundle, buildEndTime: Date.now() }))\r\n    bundler.on('buildStart', entryFiles  =>\r\n      observer.next({ options, bundler: observable, name: 'buildStart', entryFiles , buildStartTime: Date.now() }))\r\n    bundler.on('buildEnd', _ =>\r\n      observer.next({ name: 'buildEnd' }))\r\n    bundler.on('buildError', error =>\r\n      observer.next({ name:'error', error }))\r\n    bundler.bundle()\r\n    return _ => bundler.stop()\r\n  })\r\n  return observable\r\n}\r\n","// from https://github.com/parcel-bundler/parcel/tree/master/packages/core/logger/src\r\n\r\nimport Chalk from 'chalk'\r\nimport readline from 'readline'\r\nimport { countBreaks } from 'grapheme-breaker'\r\nimport stripAnsi from 'strip-ansi'\r\nimport ora from 'ora'\r\nimport path from 'path'\r\nimport fs from 'fs'\r\n\r\nconst prettyError = (err, { color } = { color: undefined }) => {\r\n  let message = typeof err === 'string' ? err : err.message\r\n  if (!message) message = 'Unknown error'\r\n\r\n  if (err.fileName) {\r\n    let fileName = err.fileName\r\n    if (err.loc) {\r\n      fileName += `:${err.loc.line}:${err.loc.column}`\r\n    }\r\n\r\n    message = `${fileName}: ${message}`\r\n  }\r\n\r\n  let stack\r\n  if (err.codeFrame) {\r\n    stack = (color && err.highlightedCodeFrame) || err.codeFrame\r\n  } else if (err.stack) {\r\n    stack = err.stack.slice(err.stack.indexOf('\\n') + 1)\r\n  }\r\n\r\n  return {\r\n    message, stack\r\n  }\r\n}\r\n\r\nconst supportsEmoji =\r\n  process.platform !== 'win32' || process.env.TERM === 'xterm-256color'\r\n\r\n// Fallback symbols for Windows from https://en.wikipedia.org/wiki/Code_page_437\r\nconst defaultEmojis = {\r\n  progress: supportsEmoji ? '⏳' : '∞',\r\n  success: supportsEmoji ? '✨' : '√',\r\n  error: supportsEmoji ? '🚨' : '×',\r\n  warning: supportsEmoji ? '⚠️' : '‼'\r\n}\r\n\r\nconst countLines = str =>\r\n  stripAnsi(str)\r\n    .split('\\n')\r\n    .reduce((p, line) =>\r\n      process.stdout.columns\r\n        ? p + Math.ceil((line.length || 1) / process.stdout.columns)\r\n        : p + 1)\r\n\r\n// Pad a string with spaces on either side\r\nconst pad = (text, length, align = 'left') => {\r\n  const pad = ' '.repeat(length - stringWidth(text))\r\n  if (align === 'right') return `${pad}${text}`\r\n  return `${text}${pad}`\r\n}\r\n\r\n// Count visible characters in a string\r\nconst stringWidth = str =>\r\n  // @ts-ignore\r\n  `${str}`\r\n  // @ts-ignore\r\n  |> stripAnsi\r\n  // @ts-ignore\r\n  |> countBreaks\r\n\r\nconst Logger = ({\r\n  logLevel = 3,\r\n  color = Chalk.supportsColor,\r\n  emojis = defaultEmojis,\r\n  chalk = new Chalk.constructor({ enabled: color }),\r\n  isTest = process.env.NODE_ENV === 'test'\r\n} = {}) => {\r\n  let lines = 0\r\n  let spinner\r\n  let logFile\r\n\r\n  const writeRaw = str => {\r\n    stopSpinner()\r\n    lines += countLines(str) - 1\r\n    process.stdout.write(str)\r\n  }\r\n\r\n  const write = (message, persistent = false) => {\r\n    if (logLevel > 3) {\r\n      return verbose(message)\r\n    }\r\n\r\n    if (!persistent) {\r\n      lines += countLines(message)\r\n    }\r\n\r\n    stopSpinner()\r\n    _log(message)\r\n  }\r\n\r\n  const verbose = str => {\r\n    if (logLevel < 4) return\r\n    let currDate = new Date()\r\n    str = `[${currDate.toLocaleTimeString()}]: ${str}`\r\n    if (logLevel > 4) {\r\n      if (!logFile) {\r\n        logFile = fs.createWriteStream(\r\n          path.join(process.cwd(), `parcel-debug-${currDate.toISOString()}.log`)\r\n        )\r\n      }\r\n      logFile.write(stripAnsi(str) + '\\n')\r\n    }\r\n    _log(str)\r\n  }\r\n\r\n  const log = str =>\r\n    logLevel >= 3 &&\r\n    write(str)\r\n\r\n  const persistent = str =>\r\n    logLevel >= 3 &&\r\n    write(chalk.bold(str), true)\r\n\r\n  const warn = err =>\r\n    logLevel >= 2 &&\r\n    _writeError(err, emojis.warning, chalk.yellow)\r\n\r\n  const error = err =>\r\n    logLevel >= 1 &&\r\n    _writeError(err, emojis.error, chalk.red.bold)\r\n\r\n  const success = str =>\r\n    log(`${emojis.success}  ${chalk.green.bold(str)}`)\r\n\r\n  const formatError = (err, options) => prettyError(err, options)\r\n\r\n  const _writeError = (err, emoji, _color) => {\r\n    const { message, stack } = formatError(err, { color })\r\n    write(_color(`${emoji}  ${message}`))\r\n    if (stack) write(stack)\r\n  }\r\n\r\n  const clear = () => {\r\n    if (!color || isTest || logLevel > 3) return\r\n\r\n    while (lines > 0) {\r\n      readline.clearLine(process.stdout, 0)\r\n      readline.moveCursor(process.stdout, 0, -1)\r\n      lines--\r\n    }\r\n\r\n    readline.cursorTo(process.stdout, 0)\r\n    stopSpinner()\r\n  }\r\n\r\n  const progress = str => {\r\n    if (logLevel < 3) return\r\n    else if (logLevel > 3) return verbose(str)\r\n\r\n    const styledMessage = chalk.gray.bold(str)\r\n    if (!spinner) {\r\n      spinner = ora({\r\n        text: styledMessage,\r\n        stream: process.stdout,\r\n        enabled: isTest ? false : undefined // fall back to ora default unless we need to explicitly disable it.\r\n      }).start()\r\n    } else spinner.text = styledMessage\r\n  }\r\n\r\n  const stopSpinner = () => {\r\n    if (spinner) {\r\n      spinner.stop()\r\n      spinner = null\r\n    }\r\n  }\r\n\r\n  const _log = str => console.log(str)\r\n\r\n  const table = (columns, table) => {\r\n    // Measure column widths\r\n    let colWidths = []\r\n    for (let row of table) {\r\n      let i = 0\r\n      for (let item of row) {\r\n        colWidths[i] = Math.max(colWidths[i] || 0, stringWidth(item))\r\n        i++\r\n      }\r\n    }\r\n\r\n    // Render rows\r\n    for (let row of table) {\r\n      log(\r\n        row.map((item, i) => {\r\n          // Add padding between columns unless the alignment is the opposite to the\r\n          // next column and pad to the column width.\r\n          let padding =\r\n            !columns[i + 1] || columns[i + 1].align === columns[i].align ? 4 : 0\r\n          return pad(item, colWidths[i] + padding, columns[i].align)\r\n        })\r\n        .join('')\r\n      )\r\n    }\r\n  }\r\n\r\n  const logger = {\r\n    writeRaw,\r\n    write,\r\n    verbose,\r\n    log,\r\n    persistent,\r\n    warn,\r\n    error,\r\n    success,\r\n    formatError,\r\n    _writeError,\r\n    clear,\r\n    progress,\r\n    stopSpinner,\r\n    _log,\r\n    table,\r\n    handleMessage: undefined,\r\n  }\r\n\r\n  const handleMessage = ({ method, args }) => logger[method](...args)\r\n  logger.handleMessage = handleMessage\r\n\r\n  return logger\r\n}\r\n\r\nexport default Logger()\r\n","import Path from 'path'\r\n\r\nexport const prettifyPath = path => Path.relative(process.cwd(), path)\r\n\r\nexport const prettifyTime = time =>\r\n  time < 1000\r\n    ? `${time.toFixed()}ms`\r\n    : `${(time / 1000).toFixed(2)}s`\r\n","import puppeteer, { Page, Browser } from 'puppeteer'\r\nimport { switchMap } from 'rxjs/operators'\r\nimport { Observable } from 'rxjs'\r\n\r\nexport default async (options = {}) => {\r\n  const browser = await puppeteer.launch({ devtools: false })\r\n\r\n\r\n  return Observable.create(observer => {\r\n    const page = browser.newPage()\r\n    page.then(page => observer.next(page))\r\n    return async _ => (await page).close()\r\n  })\r\n}\r\n","\r\nimport chalk from 'chalk'\r\nimport { map, tap, filter, mergeMap, switchMap } from 'rxjs/operators'\r\n\r\nimport { Options, Context } from '../types'\r\nimport Bundler from '../runner/bundler'\r\nimport logger from '../cli/logger'\r\nimport { prettifyPath } from './utils'\r\nimport Runner from './runner'\r\n\r\nexport default (options: Options) =>\r\n  // @ts-ignore\r\n  Bundler(options)\r\n    // @ts-ignore\r\n  |> filter(({ name }) => name === 'buildStart')\r\n  // @ts-ignore\r\n  |> mergeMap(async ctx => ({\r\n    ...ctx,\r\n    runner: await Runner()\r\n  }))\r\n  // @ts-ignore\r\n  |> tap(({ entryFiles  }: Context) => {\r\n    logger.clear()\r\n    logger.progress(`\\n${chalk.grey(`Building ${entryFiles.map(prettifyPath).join(', ')}`)}`)\r\n  })\r\n    // @ts-ignore\r\n  |> switchMap(({ entryFiles, buildStartTime }) =>\r\n    // @ts-ignore\r\n    bundler\r\n    // @ts-ignore\r\n    |> filter(({ name }) => name === 'bundled')\r\n    // @ts-ignore\r\n    |> map(ctx => ({\r\n      ...ctx,\r\n      entryFiles,\r\n      buildStartTime\r\n    }))\r\n  )\r\n","export const isBrowser = typeof window !== 'undefined'\r\n\r\nexport const GET_TESTS = '__EPK_GET_TESTS'\r\nexport const RUN_TESTS = '__EPK_RUN_TESTS'\r\nexport const RUN_TEST = '__EPK_RUN_TEST'","import { isBrowser } from '../utils'\r\n\r\nexport const errors = []\r\n\r\nif (isBrowser) {\r\n  window.addEventListener('error', err => errors.push(err))\r\n} else {\r\n  process.on('uncaughtException', err => errors.push(err))\r\n}\r\n\r\n","import { isBrowser, GET_TESTS, RUN_TEST } from '../utils'\r\nimport { errors } from './error'\r\n\r\nexport const tests = new Map<string, Function>()\r\n\r\nexport const todo = _ => {}\r\nexport const pass = _ => {}\r\nexport const fail = _ => {}\r\n\r\nexport const test = (desc, func) => {\r\n  if (typeof desc !== 'string') throw new Error('desc has to be a string')\r\n  if (typeof func !== 'function') throw new Error('func has to be a function')\r\n  if (tests.has(desc)) throw new Error(`Found duplicate test description: ${desc}`)\r\n  tests.set(desc, func)\r\n}\r\n\r\nconst initiated = new Promise(resolve => setTimeout(resolve, 0))\r\n\r\nif (isBrowser) {\r\n  window.addEventListener('message', async ({ data: { name, data } }) => {\r\n    if (name === GET_TESTS) {\r\n      window.parent\r\n        .postMessage({\r\n          name: GET_TESTS,\r\n          errors,\r\n          data:\r\n            Array.from(tests)\r\n              .map(([desc, func]) => [desc, func.toString()])\r\n        }, '*')\r\n    } else if (name === RUN_TEST) {\r\n      let error\r\n      try {\r\n        const result = await tests.get(data)()\r\n        // console.log(result)\r\n        // if (result instanceof Error) error = result\r\n      } catch (err) {\r\n        // console.log(err)\r\n        error = err\r\n      }\r\n      \r\n      //   .then(result => console.log('result', result)).catch(err => console.log('error', err))\r\n      // setTimeout(_ => console.log(errors), 0)\r\n      window.parent\r\n        .postMessage({\r\n          name: GET_TESTS,\r\n          data: {\r\n            error\r\n            // ...await tests.get(data)()\r\n            //   .then(value => ({ /*value*/ }))\r\n            //   .catch(error => console.log('lol', error) || ({ error }))\r\n          }\r\n        }, '*')\r\n    }\r\n  })\r\n}","import PowerAssert from 'power-assert'\r\n\r\nexport const assert = PowerAssert.customize({\r\n\r\n})","// export * from './test'\r\n// export * from './assert'\r\n\r\n// parceljs experimental hoisting fix\r\nimport { test } from './test'\r\nimport { assert } from './assert'\r\n\r\nexport {\r\n  test,\r\n  assert\r\n}","import fg from 'fast-glob'\r\nimport Path from 'path'\r\nimport cli from './cli/index'\r\nimport api from './api/index'\r\n\r\nexport * from './api/index'\r\nexport * from './test/index'\r\n\r\nif (!module.parent) { // Run via CLI\r\n  cli()\r\n    .then(async globs =>\r\n      api({\r\n        entryFiles:\r\n          (await fg.async<string>(globs))\r\n            .map(path => Path.join(process.cwd(), path))\r\n      // @ts-ignore\r\n      }).subscribe())\r\n}\r\n"]}