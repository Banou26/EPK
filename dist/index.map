{"version":3,"sources":["types.ts","core/bundler.ts","utils/index.ts","cli/logger.ts","utils/installPackage.ts","utils/getModuleParts.ts","utils/localRequire.ts","targets/chrome.ts","core/target-runtime-provider.ts","core/utils.ts","core/analyze.ts","core/test.ts","core/post-analyze.ts","core/server.ts","core/index.ts","test/error.ts","test/test.ts","test/assert.ts","test/index.ts","../node_modules/parcel-bundler/src/builtins/bundle-url.js","../node_modules/parcel-bundler/src/builtins/bundle-loader.js","index.ts"],"names":["FileType","NODE_GLOBAL","TARGET","BROWSER_TARGET","BUNDLER_TARGET","CHROME_EXTENSION","CHROME_CANARY","CHROME_CANARY_EXTENSION","FIREFOX","FIREFOX_EXTENSION","FIREFOX_NIGHTLY","FIREFOX_NIGHTLY_EXTENSION","targetToBundlerTarget","target","BROWSER","NODE","ELECTRON","MESSAGE_TYPE","options","Observable","create","observer","bundler","ParcelBundler","entryFiles","_","addAssetType","Path","resolve","__dirname","on","bundle","next","name","buildEndTime","Date","now","buildStartTime","error","catch","err","stop","refCount","prettifyPath","_path","path","relative","process","cwd","getEmptyPageUrl","port","transformPathToEpkUrl","transformPathToTestUrl","replace","prettyError","color","undefined","message","stack","fileName","loc","line","column","codeFrame","highlightedCodeFrame","slice","indexOf","supportsEmoji","platform","env","TERM","defaultEmojis","progress","success","warning","countLines","str","split","reduce","p","stdout","columns","Math","ceil","length","pad","text","align","repeat","stringWidth","stripAnsi","countBreaks","Logger","logLevel","Chalk","supportsColor","emojis","chalk","constructor","enabled","isTest","NODE_ENV","lines","spinner","logFile","writeRaw","write","persistent","verbose","stopSpinner","_log","currDate","toLocaleTimeString","fs","createWriteStream","join","toISOString","log","formatError","_writeError","emoji","_color","console","logger","bold","warn","yellow","red","green","clear","clearLine","moveCursor","cursorTo","styledMessage","gray","stream","start","table","colWidths","row","i","item","max","map","padding","handleMessage","method","args","promisify","utils","_resolve","YARN_LOCK","install","modules","filepath","installPeers","saveDev","packageManager","packageLocation","config","dirname","determinePackageManager","commandToUse","push","writeFile","Error","Promise","all","m","installPeerDependencies","basedir","resolved","peers","load","peerDependencies","peer","Object","assign","checkForYarnCommand","hasYarn","queue","PromiseQueue","maxConcurrent","retry","WorkerFarm","isWorker","add","run","callMaster","location","__filename","parts","normalize","sep","charAt","splice","Resolve","cache","Map","localRequire","triedInstall","require","key","get","e","code","packageName","set","packages","includes","pkg","pptr","closed","browser","then","launch","devtools","page","newPage","emptyHTMLFilePath","url","loadFile","file","goto","addScriptTag","exec","evaluate","close","targetRuntimes","CHROME","ChromeRuntime","targetRuntimeProvider","targetRuntime","stringify","strings","vals","finalStr","JSON","prettifyTime","time","toFixed","isBrowser","window","browserStr","data","GET_TESTS_RESPONSE","nodeStr","analyzeStr","tests","errors","type","GET_TESTS","ANALYZE","RUN_TEST_RESPONSE","testStr","test","result","RUN_TEST","description","TEST","readFile","makeStackLocation","originalColumn","originalLine","source","makeStackLines","metaLine","originalName","makeStack","metaStack","files","sourceMapConsumers","has","content","encoding","childBundle","childBundles","sourceMapPath","sourceMap","parse","sourceMapConsumer","SourceMap","SourceMapConsumer","errorsWithMetadata","stackTraceParser","string","lineNumber","methodName","originalPositionFor","sourceRoot","outDir","testError","originalStack","POST_ANALYZE","imports","val","app","Koa","serve","mount","epk","use","listen","_options","keys","forEach","browsers","watch","cacheDir","minify","scopeHoist","sourceMaps","detailedReport","throwErrors","hmr","_port","getPort","targetRuntimeProviders","isEmpty","Array","from","newContextObservable","entryAsset","analyzedObservable","testedObservable","postAnalyzeObservable","testerObservable","connect","addEventListener","todo","pass","fail","desc","func","initiated","setTimeout","emit","parent","postMessage","global","getTests","body","toString","runTest","performance","timeStart","timeEnd","value","newEvent","EventEmitter","addListener","assert","PowerAssert","customize","bundleURL","getBundleURLCached","getBundleURL","matches","match","getBaseURL","exports","loadBundlesLazy","bundles","isArray","id","LazyPromise","reject","loadBundles","loadBundle","bundleLoaders","registerBundleLoader","loader","module","register","substring","lastIndexOf","toLowerCase","bundleLoader","executor","promise","prototype","onSuccess","onError"],"mappings":"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","file":"index.map","sourceRoot":"..\\src","sourcesContent":["import { Observable } from 'rxjs'\r\n\r\nexport const NODE_GLOBAL = '__EPK_NODE_GLOBAL'\r\n\r\n/**\r\n * List of different runtimes (available) to test on\r\n */\r\nexport enum TARGET {\r\n  NODE = 'node',\r\n  ELECTRON = 'electron',\r\n  DENO = 'deno',\r\n  CHROME = 'chrome',\r\n  CHROME_EXTENSION = 'chromeExtension',\r\n  CHROME_CANARY = 'chromeCanary',\r\n  CHROME_CANARY_EXTENSION = 'chromeCanaryExtension',\r\n  FIREFOX = 'firefox',\r\n  FIREFOX_EXTENSION = 'firefoxExtension',\r\n  FIREFOX_NIGHTLY = 'firefoxNightly',\r\n  FIREFOX_NIGHTLY_EXTENSION = 'firefoxNightlyExtension'\r\n}\r\n\r\nexport enum BROWSER_TARGET {\r\n  CHROME = TARGET.CHROME_EXTENSION,\r\n  CHROME_EXTENSION = TARGET.CHROME_CANARY,\r\n  CHROME_CANARY = TARGET.CHROME_CANARY_EXTENSION,\r\n  CHROME_CANARY_EXTENSION = TARGET.FIREFOX,\r\n  FIREFOX = TARGET.FIREFOX_EXTENSION,\r\n  FIREFOX_EXTENSION = TARGET.FIREFOX_NIGHTLY,\r\n  FIREFOX_NIGHTLY = TARGET.FIREFOX_NIGHTLY_EXTENSION,\r\n  FIREFOX_NIGHTLY_EXTENSION = TARGET.FIREFOX_NIGHTLY_EXTENSION\r\n}\r\n\r\nexport enum BUNDLER_TARGET {\r\n  NODE = 'node',\r\n  BROWSER = 'browser',\r\n  ELECTRON = 'electron'\r\n}\r\n\r\nexport const targetToBundlerTarget =\r\n  (target: TARGET): BUNDLER_TARGET =>\r\n    target in BROWSER_TARGET ? BUNDLER_TARGET.BROWSER\r\n    : target as unknown as BUNDLER_TARGET === BUNDLER_TARGET.NODE ? BUNDLER_TARGET.NODE\r\n    : target as unknown as BUNDLER_TARGET === BUNDLER_TARGET.ELECTRON && BUNDLER_TARGET.NODE\r\n\r\nexport interface Bundler extends Observable<any> {}\r\n\r\nexport interface TargetRuntime extends Observable<any> {\r\n  loadFile: Function\r\n  exec: Function\r\n}\r\nexport interface TargetRuntimeObservable extends Observable<TargetRuntime> {\r\n  target: TARGET\r\n  options: TargetRuntimeOptions\r\n}\r\n\r\nexport interface TargetRuntimeOptions {}\r\nexport interface TargetRuntimeProvider extends Observable<TargetRuntimeObservable> {\r\n  target: TARGET\r\n  options: TargetRuntimeOptions\r\n}\r\nexport interface TargetRuntimeProviderOptions {}\r\n\r\nexport enum MESSAGE_TYPE {\r\n  GET_TESTS = '__EPK_GET_TESTS',\r\n  RUN_TESTS = '__EPK_RUN_TESTS',\r\n  RUN_TEST = '__EPK_RUN_TEST',\r\n  GET_TESTS_RESPONSE = '__EPK_GET_TESTS_RESPONSE',\r\n  RUN_TESTS_RESPONSE = '__EPK_RUN_TESTS_RESPONSE',\r\n  RUN_TEST_RESPONSE = '__EPK_RUN_TEST_RESPONSE'\r\n}\r\n\r\nexport interface Message {\r\n  type: MESSAGE_TYPE,\r\n  payload: any\r\n}\r\n\r\nexport interface Options {\r\n  browsers?: BROWSER_TARGET[]\r\n  entryFiles: string[]\r\n  target: BUNDLER_TARGET\r\n  watch?: Boolean\r\n  outDir?: string\r\n  cache?: Boolean\r\n  cacheDir?: string\r\n  minify?: Boolean\r\n  scopeHoist?: Boolean\r\n  /**\r\n   * 0 = log nothing\r\n   * 1 = log errors\r\n   * 2 = log warnings & errors\r\n   * 3 = log everything\r\n   */\r\n  logLevel?: 0 | 1 | 2 | 3\r\n  sourceMaps?: Boolean\r\n  detailedReport?: Boolean\r\n}\r\n\r\nexport interface Target {\r\n  type: TARGET\r\n  test: Function\r\n  prepare: Function\r\n}\r\n\r\n/**\r\n * Context object of the testing pipeline that contains all the information needed for each testing steps\r\n */\r\nexport interface Context {\r\n  /**\r\n   * Options passed to epk\r\n   */\r\n  options: Options\r\n  /**\r\n   * Files found by the paths/globs\r\n   */\r\n  files: File[]\r\n  /**\r\n   * entryFiles from Parcel\r\n   */\r\n  entryFiles?: string[]\r\n  /**\r\n   * Array of targets in which the tests will be executed\r\n   */\r\n  targets: TARGET[]\r\n  name: string\r\n  bundle: any\r\n  buildStartTime?: number\r\n  buildEndTime?: number\r\n  analyzeEndTime?: number\r\n  analyzeStartTime?: number\r\n  testStartTime?: number\r\n  testEndTime?: number\r\n}\r\n\r\nexport enum FileType  {\r\n  ANALYZE = 'ANALYZE',\r\n  TEST = 'TEST',\r\n  POST_ANALYZE = 'POST_ANALYZE',\r\n  DONE = 'DONE'\r\n}\r\n\r\nexport interface MetaStack {\r\n  file: string\r\n  source: string\r\n  name: string\r\n  line: Number\r\n  column: Number\r\n  originalSource: string\r\n  OriginalName: string\r\n  originalLine: Number\r\n  originalColumn: Number\r\n}\r\n\r\nexport interface TestError {\r\n  message: string\r\n  name: string\r\n  stack: string\r\n  metaStack: MetaStack[]\r\n  string: string\r\n  originalStack: string\r\n}\r\n\r\n/**\r\n * Representation of a file\r\n */\r\nexport interface File {\r\n  type?: FileType\r\n\r\n  target: TARGET\r\n  /**\r\n   * Path of the source test file\r\n   */\r\n  name: string\r\n  /**\r\n   * Path of the bundled test file\r\n   */\r\n  path: string\r\n  /**\r\n   * Url by which browsers can access the test file\r\n   */\r\n  url?: string\r\n  /**\r\n   * Test ran\r\n   */\r\n  test?: Test\r\n  /**\r\n   * Array of analyzed tests\r\n   */\r\n  tests?: Test[]\r\n  /**\r\n   * Array of errors\r\n   */\r\n  errors?: TestError[]\r\n}\r\n\r\n/**\r\n * Representation of a test\r\n */\r\nexport interface Test {\r\n  /**\r\n   * Description of the test\r\n   */\r\n  description: string\r\n  /**\r\n   * Body of the test (Function stringified)\r\n   */\r\n  body: string\r\n  /**\r\n   * Type of test\r\n   */\r\n  // type?: Function | Promise<any> | Observable<any>\r\n  type?: string\r\n  /**\r\n   * Value returned by the test\r\n   */\r\n  value?: any\r\n  /**\r\n   * Error thrown by the test\r\n   */\r\n  errors?: TestError[]\r\n\r\n  timeStart?: Number\r\n\r\n  timeEnd?: Number\r\n  \r\n  /**\r\n   * Target\r\n   */\r\n  target?: TARGET\r\n  /**\r\n   * Code coverage of the test\r\n   */\r\n  coverage?: any\r\n}\r\n","import Path from 'path'\r\nimport ParcelBundler from 'parcel-bundler'\r\nimport { Observable } from 'rxjs'\r\nimport { Bundler } from '../types'\r\nimport { publish } from 'rxjs/operators'\r\n\r\nexport default (options): Bundler =>\r\n  // @ts-ignore\r\n  (Observable.create(observer => {\r\n    const bundler = new ParcelBundler(options.entryFiles, options)\r\n    bundler.addAssetType('js', Path.resolve(__dirname, '../src/core/js-asset.ts'))\r\n    bundler.addAssetType('ts', Path.resolve(__dirname, '../src/core/ts-asset.ts'))\r\n    bundler.on('bundled', bundle =>\r\n      observer.next({ options, name: 'bundled', bundle, buildEndTime: Date.now() }))\r\n    bundler.on('buildStart', entryFiles  =>\r\n      observer.next({ options, name: 'buildStart', entryFiles , buildStartTime: Date.now() }))\r\n    bundler.on('buildEnd', _ =>\r\n      observer.next({ name: 'buildEnd' }))\r\n    bundler.on('buildError', error =>\r\n      observer.next({ name:'error', error }))\r\n    \r\n    bundler.bundle().catch(err => observer.error(err))\r\n    return _ => bundler.stop().catch(err => observer.error(err))\r\n  })\r\n  // @ts-ignore\r\n  |> publish())\r\n  // @ts-ignore\r\n  .refCount()","import path from 'path'\r\n\r\nexport const prettifyPath = _path => path.relative(process.cwd(), _path)\r\n\r\nexport const getEmptyPageUrl = port =>\r\n  transformPathToEpkUrl(path.resolve(__dirname, '..', 'dist', 'empty.html'), port)\r\n\r\n\r\nexport const transformPathToTestUrl = (_path, port) =>\r\n  `${port ? `http://localhost:${port}` : ''}${_path.replace(`${path.resolve(process.cwd(), '.epk', 'dist')}\\\\`, '/tests/').replace('\\\\', '/')}`\r\n  \r\nexport const transformPathToEpkUrl = (_path, port) =>\r\n  `${port ? `http://localhost:${port}` : ''}${_path.replace(`${path.resolve(__dirname, '..', 'dist')}\\\\`, '/epk/').replace('\\\\', '/')}`\r\n","// from https://github.com/parcel-bundler/parcel/tree/master/packages/core/logger/src\r\n\r\nimport Chalk from 'Chalk'\r\nimport readline from 'readline'\r\nimport { countBreaks } from 'grapheme-breaker'\r\nimport stripAnsi from 'strip-ansi'\r\nimport ora from 'ora'\r\nimport path from 'path'\r\nimport fs from 'fs'\r\n\r\nconst prettyError = (err, { color } = { color: undefined }) => {\r\n  let message = typeof err === 'string' ? err : err.message\r\n  if (!message) message = 'Unknown error'\r\n\r\n  if (err.fileName) {\r\n    let fileName = err.fileName\r\n    if (err.loc) {\r\n      fileName += `:${err.loc.line}:${err.loc.column}`\r\n    }\r\n\r\n    message = `${fileName}: ${message}`\r\n  }\r\n\r\n  let stack\r\n  if (err.codeFrame) {\r\n    stack = (color && err.highlightedCodeFrame) || err.codeFrame\r\n  } else if (err.stack) {\r\n    stack = err.stack.slice(err.stack.indexOf('\\n') + 1)\r\n  }\r\n\r\n  return {\r\n    message, stack\r\n  }\r\n}\r\n\r\nconst supportsEmoji =\r\n  process.platform !== 'win32' || process.env.TERM === 'xterm-256color'\r\n\r\n// Fallback symbols for Windows from https://en.wikipedia.org/wiki/Code_page_437\r\nconst defaultEmojis = {\r\n  progress: supportsEmoji ? '⏳' : '∞',\r\n  success: supportsEmoji ? '✨' : '√',\r\n  error: supportsEmoji ? '🚨' : '×',\r\n  warning: supportsEmoji ? '⚠️' : '‼'\r\n}\r\n\r\nconst countLines = str =>\r\n  stripAnsi(str)\r\n    .split('\\n')\r\n    .reduce((p, line) =>\r\n      process.stdout.columns\r\n        ? p + Math.ceil((line.length || 1) / process.stdout.columns)\r\n        : p + 1, 0)\r\n\r\n// Pad a string with spaces on either side\r\nconst pad = (text, length, align = 'left') => {\r\n  const pad = ' '.repeat(length - stringWidth(text))\r\n  if (align === 'right') return `${pad}${text}`\r\n  return `${text}${pad}`\r\n}\r\n\r\n// Count visible characters in a string\r\nconst stringWidth = str =>\r\n  // @ts-ignore\r\n  `${str}`\r\n  // @ts-ignore\r\n  |> stripAnsi\r\n  // @ts-ignore\r\n  |> countBreaks\r\n\r\nconst Logger = ({\r\n  logLevel = 3,\r\n  color = Chalk.supportsColor,\r\n  emojis = defaultEmojis,\r\n  chalk = new Chalk.constructor({ enabled: color }),\r\n  isTest = process.env.NODE_ENV === 'test'\r\n} = {}) => {\r\n  let lines = 0\r\n  let spinner\r\n  let logFile\r\n\r\n  const writeRaw = str => {\r\n    stopSpinner()\r\n    lines += countLines(str) - 1\r\n    process.stdout.write(str)\r\n  }\r\n\r\n  const write = (message, persistent = false) => {\r\n    if (logLevel > 3) {\r\n      return verbose(message)\r\n    }\r\n\r\n    if (!persistent) {\r\n      lines += countLines(message)\r\n    }\r\n\r\n    stopSpinner()\r\n    _log(message)\r\n  }\r\n\r\n  const verbose = str => {\r\n    if (logLevel < 4) return\r\n    let currDate = new Date()\r\n    str = `[${currDate.toLocaleTimeString()}]: ${str}`\r\n    if (logLevel > 4) {\r\n      if (!logFile) {\r\n        logFile = fs.createWriteStream(\r\n          path.join(process.cwd(), `parcel-debug-${currDate.toISOString()}.log`)\r\n        )\r\n      }\r\n      logFile.write(stripAnsi(str) + '\\n')\r\n    }\r\n    _log(str)\r\n  }\r\n\r\n  const log = str =>\r\n    logLevel >= 3 &&\r\n    write(str)\r\n\r\n  const persistent = str =>\r\n    logLevel >= 3 &&\r\n    write(chalk.bold(str), true)\r\n\r\n  const warn = err =>\r\n    logLevel >= 2 &&\r\n    _writeError(err, emojis.warning, chalk.yellow)\r\n\r\n  const error = err =>\r\n    logLevel >= 1 &&\r\n    _writeError(err, emojis.error, chalk.red.bold)\r\n\r\n  const success = str =>\r\n    log(`${emojis.success}  ${chalk.green.bold(str)}`)\r\n\r\n  const formatError = (err, options) => prettyError(err, options)\r\n\r\n  const _writeError = (err, emoji, _color) => {\r\n    const { message, stack } = formatError(err, { color })\r\n    write(_color(`${emoji}  ${message}`))\r\n    if (stack) write(stack)\r\n  }\r\n\r\n  const clear = () => {\r\n    if (!color || isTest || logLevel > 3) return\r\n\r\n    while (lines > 0) {\r\n      readline.clearLine(process.stdout, 0)\r\n      readline.moveCursor(process.stdout, 0, -1)\r\n      lines--\r\n    }\r\n\r\n    readline.cursorTo(process.stdout, 0)\r\n    stopSpinner()\r\n  }\r\n\r\n  const progress = str => {\r\n    if (logLevel < 3) return\r\n    else if (logLevel > 3) return verbose(str)\r\n\r\n    const styledMessage = chalk.gray.bold(str)\r\n    if (!spinner) {\r\n      spinner = ora({\r\n        text: styledMessage,\r\n        stream: process.stdout,\r\n        enabled: isTest ? false : undefined // fall back to ora default unless we need to explicitly disable it.\r\n      }).start()\r\n    } else spinner.text = styledMessage\r\n  }\r\n\r\n  const stopSpinner = () => {\r\n    if (spinner) {\r\n      spinner.stop()\r\n      spinner = null\r\n    }\r\n  }\r\n\r\n  const _log = str => console.log(str)\r\n\r\n  const table = (columns, table) => {\r\n    // Measure column widths\r\n    let colWidths = []\r\n    for (let row of table) {\r\n      let i = 0\r\n      for (let item of row) {\r\n        colWidths[i] = Math.max(colWidths[i] || 0, stringWidth(item))\r\n        i++\r\n      }\r\n    }\r\n\r\n    // Render rows\r\n    for (let row of table) {\r\n      log(\r\n        row.map((item, i) => {\r\n          // Add padding between columns unless the alignment is the opposite to the\r\n          // next column and pad to the column width.\r\n          let padding =\r\n            !columns[i + 1] || columns[i + 1].align === columns[i].align ? 4 : 0\r\n          return pad(item, colWidths[i] + padding, columns[i].align)\r\n        })\r\n        .join('')\r\n      )\r\n    }\r\n  }\r\n\r\n  const logger = {\r\n    writeRaw,\r\n    write,\r\n    verbose,\r\n    log,\r\n    persistent,\r\n    warn,\r\n    error,\r\n    success,\r\n    formatError,\r\n    _writeError,\r\n    clear,\r\n    progress,\r\n    stopSpinner,\r\n    _log,\r\n    table,\r\n    handleMessage: undefined,\r\n  }\r\n\r\n  const handleMessage = ({ method, args }) => logger[method](...args)\r\n  logger.handleMessage = handleMessage\r\n\r\n  return logger\r\n}\r\n\r\nexport default Logger()\r\n","// https://github.com/parcel-bundler/parcel/blob/master/packages/core/parcel-bundler/src/utils/installPackage.js\r\n\r\nimport config from 'parcel-bundler/src/utils/config'\r\nimport commandExists from 'command-exists'\r\nimport logger from '../cli/logger'\r\nimport pipeSpawn from 'parcel-bundler/src/utils/pipeSpawn'\r\nimport PromiseQueue from 'parcel-bundler/src/utils/PromiseQueue'\r\nimport path from 'path'\r\nimport fs from '@parcel/fs'\r\nimport WorkerFarm from '@parcel/workers'\r\nimport utils from '@parcel/utils'\r\nimport _resolve from 'resolve'\r\n\r\nconst { promisify } = utils\r\nconst resolve  = promisify(_resolve)\r\n\r\nconst YARN_LOCK = 'yarn.lock'\r\n\r\nasync function install(modules, filepath, options = { installPeers: true, saveDev: true, packageManager: undefined }) {\r\n  let { installPeers = true, saveDev = true, packageManager } = options\r\n  if (typeof modules === 'string') {\r\n    modules = [modules]\r\n  }\r\n\r\n  logger.progress(`Installing ${modules.join(', ')}...`)\r\n\r\n  let packageLocation = await config.resolve(filepath, ['package.json'])\r\n  let cwd = packageLocation ? path.dirname(packageLocation) : process.cwd()\r\n\r\n  if (!packageManager) {\r\n    packageManager = await determinePackageManager(filepath)\r\n  }\r\n\r\n  let commandToUse = packageManager === 'npm' ? 'install' : 'add'\r\n  let args = [commandToUse, ...modules]\r\n  if (saveDev) {\r\n    args.push('-D')\r\n  } else if (packageManager === 'npm') {\r\n    args.push('--save')\r\n  }\r\n\r\n  // npm doesn't auto-create a package.json when installing,\r\n  // so create an empty one if needed.\r\n  if (packageManager === 'npm' && !packageLocation) {\r\n    await fs.writeFile(path.join(cwd, 'package.json'), '{}')\r\n  }\r\n\r\n  try {\r\n    await pipeSpawn(packageManager, args, {cwd})\r\n  } catch (err) {\r\n    throw new Error(`Failed to install ${modules.join(', ')}.`)\r\n  }\r\n\r\n  if (installPeers) {\r\n    await Promise.all(\r\n      modules.map(m => installPeerDependencies(filepath, m, options))\r\n    )\r\n  }\r\n}\r\n\r\nasync function installPeerDependencies(filepath, name, options) {\r\n  let basedir = path.dirname(filepath)\r\n  const [resolved] = await resolve(name, {basedir})\r\n  const pkg = await config.load(resolved, ['package.json'])\r\n  const peers = pkg.peerDependencies || {}\r\n\r\n  const modules = []\r\n  for (const peer in peers) {\r\n    modules.push(`${peer}@${peers[peer]}`)\r\n  }\r\n\r\n  if (modules.length) {\r\n    await install(\r\n      modules,\r\n      filepath,\r\n      Object.assign({}, options, {installPeers: false})\r\n    )\r\n  }\r\n}\r\n\r\nasync function determinePackageManager(filepath) {\r\n  const yarnLockFile = await config.resolve(filepath, [YARN_LOCK])\r\n\r\n  /**\r\n   * no yarn.lock => use npm\r\n   * yarn.lock => Use yarn, fallback to npm\r\n   */\r\n  if (!yarnLockFile) {\r\n    return 'npm'\r\n  }\r\n\r\n  const hasYarn = await checkForYarnCommand()\r\n  if (hasYarn) {\r\n    return 'yarn'\r\n  }\r\n\r\n  return 'npm'\r\n}\r\n\r\nlet hasYarn = null\r\nasync function checkForYarnCommand() {\r\n  if (hasYarn != null) {\r\n    return hasYarn\r\n  }\r\n\r\n  try {\r\n    hasYarn = await commandExists('yarn')\r\n  } catch (err) {\r\n    hasYarn = false\r\n  }\r\n\r\n  return hasYarn\r\n}\r\n\r\nlet queue = new PromiseQueue(install, {maxConcurrent: 1, retry: false})\r\nexport default async function(...args) {\r\n  // Ensure that this function is always called on the master process so we\r\n  // don't call multiple installs in parallel.\r\n  if (WorkerFarm.isWorker()) {\r\n    await WorkerFarm.callMaster({\r\n      location: __filename,\r\n      args\r\n    })\r\n    return\r\n  }\r\n\r\n  queue.add(...args)\r\n  return queue.run()\r\n}\r\n\r\n// export default async (...names) => {\r\n//   await _installPackage(names)\r\n//   return names.length === 1\r\n//           ? import(name)\r\n//           : Promise.all(names.map(name => import(name)))\r\n// }","// https://github.com/parcel-bundler/parcel/blob/master/packages/core/parcel-bundler/src/utils/getModuleParts.js\r\nimport path from 'path'\r\n\r\nexport default function(name) {\r\n  let parts = path.normalize(name).split(path.sep)\r\n  if (parts[0].charAt(0) === '@') {\r\n    // Scoped module (e.g. @scope/module). Merge the first two parts back together.\r\n    parts.splice(0, 2, `${parts[0]}/${parts[1]}`)\r\n  }\r\n\r\n  return parts\r\n}","// https://github.com/parcel-bundler/parcel/blob/master/packages/core/parcel-bundler/src/utils/localRequire.js\r\nimport Path, { dirname } from 'path'\r\nimport utils from '@parcel/utils'\r\nimport Resolve from 'resolve'\r\nimport installPackage from './installPackage'\r\nimport getModuleParts from './getModuleParts'\r\n\r\nconst { promisify } = utils\r\nconst _resolve = promisify(Resolve)\r\n\r\nconst cache = new Map();\r\n\r\nexport const localRequire = async (name, path, triedInstall = false) => {\r\n  const [resolved] = await resolve(name, path, triedInstall)\r\n  return require(resolved)\r\n}\r\n\r\nexport const resolve = async (name, path, triedInstall = false) => {\r\n  let basedir = dirname(path)\r\n  let key = basedir + ':' + name\r\n  let resolved = cache.get(key)\r\n  if (!resolved) {\r\n    try {\r\n      resolved = await _resolve(name, {basedir})\r\n    } catch (e) {\r\n      if (e.code === 'MODULE_NOT_FOUND' && !triedInstall) {\r\n        const packageName = getModuleParts(name)[0]\r\n        await installPackage(packageName, path)\r\n        return resolve(name, path, true)\r\n      }\r\n      throw e\r\n    }\r\n    cache.set(key, resolved)\r\n  }\r\n  return resolved\r\n}\r\n\r\nexport default async (packages, path = __dirname.includes('node_modules') ? Path.resolve(__dirname, '..', '..') : __dirname) =>\r\n  typeof packages === 'string'\r\n    ? localRequire(packages, path)\r\n    : Promise.all(packages.map(pkg => localRequire(pkg, path)))\r\n","import path from 'path'\r\nimport { Observable } from 'rxjs'\r\nimport localRequire from '../utils/localRequire'\r\nimport { TargetRuntimeObservable } from '../types'\r\nimport { transformPathToEpkUrl } from '../utils'\r\n\r\nlet pptr\r\n\r\nexport default (options): TargetRuntimeObservable =>\r\n  Observable.create(observer => {\r\n    if (!pptr) pptr = localRequire('puppeteer')\r\n\r\n    let closed\r\n    const browser = pptr.then(pptr => pptr.launch({ devtools: true }))\r\n\r\n    browser.then(browser => {\r\n      if (closed) return\r\n      observer.next(Observable.create(observer => {\r\n        const page = browser.newPage()\r\n        const emptyHTMLFilePath = path.resolve(__dirname, '..', 'dist', 'empty.html')\r\n        const url = transformPathToEpkUrl(emptyHTMLFilePath, options.port)\r\n        page.then(page => {\r\n          observer.next({\r\n            loadFile: file => page.goto(url).then(() => page.addScriptTag({ url: file.url })),\r\n            exec: str => page.evaluate(str)\r\n          })\r\n        })\r\n        return () => page.then(page => page.close())\r\n      }))\r\n    })\r\n\r\n    return () => {\r\n      closed = true\r\n      browser.then(browser => browser.close())\r\n    }\r\n  })\r\n","import { TARGET, TargetRuntimeProviderOptions, TargetRuntimeProvider, TargetRuntimeObservable } from '../types'\r\nimport ChromeRuntime from '../targets/chrome'\r\nimport { map } from 'rxjs/operators'\r\n// import FirefoxRuntime from '../targets/firefox'\r\n\r\nconst targetRuntimes = new Map([\r\n  [TARGET.CHROME, ChromeRuntime],\r\n  // [TARGET.FIREFOX, FirefoxRuntime]\r\n])\r\n\r\nexport default\r\n  (target: TARGET, options: TargetRuntimeProviderOptions): TargetRuntimeProvider => {\r\n    const targetRuntimeProvider = targetRuntimes.get(target)(options)\r\n    targetRuntimeProvider.target = target\r\n    targetRuntimeProvider.options = options\r\n    // @ts-ignore\r\n    return targetRuntimeProvider\r\n      // @ts-ignore\r\n      |> map((targetRuntime: TargetRuntimeObservable) => {\r\n        targetRuntime.target = target\r\n        targetRuntime.options = options\r\n        return targetRuntime\r\n      })\r\n  }\r\n","\r\nexport const stringify = (strings, ...vals) =>\r\n  strings.reduce((finalStr, str, i) =>\r\n    `${finalStr}${str}${vals.length > i ? JSON.stringify(vals[i]) : ''}`, '')\r\n\r\nexport const prettifyTime = time =>\r\n  time < 1000\r\n    ? `${time.toFixed()}ms`\r\n    : `${(time / 1000).toFixed(2)}s`\r\n\r\nexport const isBrowser = typeof window !== 'undefined'\r\n","import { switchMap, map, mergeMap, take, delay } from 'rxjs/operators'\r\nimport { TargetRuntime, BUNDLER_TARGET, NODE_GLOBAL, MESSAGE_TYPE, File, FileType } from '../types'\r\nimport { stringify } from './utils'\r\n\r\nconst browserStr = data => stringify`\r\nnew Promise(resolve => {\r\n  window.addEventListener('message', ({ data }) =>\r\n    data.type === ${MESSAGE_TYPE.GET_TESTS_RESPONSE}\r\n    && resolve(data))\r\n  window.postMessage(${data}, '*')\r\n})\r\n`\r\n\r\nconst nodeStr = data => stringify`\r\nnew Promise(resolve => {\r\n  global[${NODE_GLOBAL}].addListener('message', ({ data }) =>\r\n    data.type === ${MESSAGE_TYPE.GET_TESTS_RESPONSE}\r\n    && resolve(data))\r\n  global[${NODE_GLOBAL}].emit('message', ${data})\r\n})\r\n`\r\n\r\nconst analyzeStr = (options, data) =>\r\n  options.target === BUNDLER_TARGET.BROWSER\r\n    ? browserStr(data)\r\n    : nodeStr(data)\r\n\r\nexport default\r\n  (targetRuntimeProvider, options) =>\r\n    // @ts-ignore\r\n    switchMap((file: File) =>\r\n      // @ts-ignore\r\n      targetRuntimeProvider\r\n      // @ts-ignore\r\n      |> mergeMap(async (targetRuntime: TargetRuntime) => {\r\n        await targetRuntime.loadFile(file)\r\n        const { data: tests, errors } = await targetRuntime.exec(analyzeStr(options, { type: MESSAGE_TYPE.GET_TESTS }))\r\n        return {\r\n          type: FileType.ANALYZE,\r\n          ...file,\r\n          tests,\r\n          errors\r\n        }\r\n      })\r\n      // @ts-ignore\r\n      |> take(1))\r\n","import { switchMap, mergeMap, take } from 'rxjs/operators'\r\nimport { TargetRuntime, BUNDLER_TARGET, NODE_GLOBAL, MESSAGE_TYPE, FileType } from '../types'\r\nimport { stringify } from './utils'\r\n\r\nconst browserStr = data => stringify`\r\nnew Promise(resolve => {\r\n  window.addEventListener('message', ({ data }) =>\r\n    data.type === ${MESSAGE_TYPE.RUN_TEST_RESPONSE}\r\n    && resolve(data))\r\n  window.postMessage(${data}, '*')\r\n})\r\n`\r\n\r\nconst nodeStr = data => stringify`\r\nnew Promise(resolve => {\r\n  global[${NODE_GLOBAL}].addListener('message', ({ data }) =>\r\n    data.type === ${MESSAGE_TYPE.RUN_TEST_RESPONSE}\r\n    && resolve(data))\r\n  global[${NODE_GLOBAL}].emit('message', ${data})\r\n})\r\n`\r\n\r\nconst testStr = (options, data) =>\r\n  options.target === BUNDLER_TARGET.BROWSER\r\n    ? browserStr(data)\r\n    : nodeStr(data)\r\n\r\nexport default\r\n  (file, targetRuntimeProvider, options) =>\r\n    mergeMap(test =>\r\n      // @ts-ignore\r\n      targetRuntimeProvider\r\n      // @ts-ignore\r\n      |> mergeMap(async (targetRuntime: TargetRuntime) => {\r\n        await targetRuntime.loadFile(file)\r\n        const { data: result } = await targetRuntime.exec(testStr(options, { type: MESSAGE_TYPE.RUN_TEST, description: test.description }))\r\n        return {\r\n          ...file,\r\n          type: FileType.TEST,\r\n          test: {\r\n            ...test,\r\n            ...result\r\n          }\r\n        }\r\n      })\r\n      // @ts-ignore\r\n      |> take(1))\r\n","import stackTraceParser from 'stacktrace-parser'\r\nimport SourceMap from 'source-map'\r\nimport { mergeMap } from 'rxjs/operators'\r\nimport { File, FileType, Test, TestError } from '../types'\r\nimport Path from 'path'\r\nimport fs from 'fs'\r\nimport { promisify } from 'util'\r\nimport { prettifyPath } from '../utils/index'\r\n\r\nconst readFile = promisify(fs.readFile)\r\n\r\nconst makeStackLocation = ({ originalColumn, originalLine, source }) => `\\\r\n${source}:${originalLine}:${originalColumn}`\r\n\r\nconst makeStackLines = metaLine => `\\\r\nat ${metaLine.originalName ? `${metaLine.originalName} (${makeStackLocation(metaLine)})` : makeStackLocation(metaLine)}`\r\n\r\nconst makeStack = (error: TestError) => `\\\r\n${error.name}: ${error.message}\r\n\r\n${error\r\n  .metaStack\r\n  .map(makeStackLines)\r\n  .join('\\n')}\r\n`\r\n\r\n\r\nexport default (options, bundle) => {\r\n  const files = new Map()\r\n  const sourceMapConsumers = new Map()\r\n\r\n  return mergeMap(async (file: File) => {\r\n    const { name: path } = bundle\r\n    \r\n    if (!files.has(path)) {\r\n      const content = await readFile(path, { encoding: 'utf8' })\r\n      files.set(path, content)\r\n    }\r\n\r\n    for (const childBundle of bundle.childBundles) {\r\n      const { name: path } = childBundle\r\n      if (!files.has(path)) {\r\n        const content = await readFile(path, { encoding: 'utf8' })\r\n        files.set(path, content)\r\n      }\r\n    }\r\n\r\n    const sourceMapPath = files.has(`${path.slice(0, -3)}.map`) ? `${path.slice(0, -3)}.map` : `${path}.map` // weird parcel bug\r\n    const sourceMap = JSON.parse(files.get(sourceMapPath))\r\n\r\n    const sourceMapConsumer = sourceMapConsumers.get(file.url) || new SourceMap.SourceMapConsumer(sourceMap)\r\n    if(!sourceMapConsumers.has(file.url)) sourceMapConsumers.set(file.url, sourceMapConsumer)\r\n\r\n    const { test: { errors } } = file\r\n    const errorsWithMetadata =\r\n      await Promise.all(\r\n        errors.map(async error => {\r\n          const metaStack =\r\n            await Promise.all(\r\n              stackTraceParser\r\n                .parse(\r\n                  error.name === 'AssertionError'\r\n                    ? error.stack.replace(error.string, '')\r\n                    : error.stack)\r\n                .map(async ({ lineNumber: line, column, file, methodName: name }) => {\r\n                  const { line: originalLine, column: originalColumn, name: originalName, source } = await sourceMapConsumer.originalPositionFor({ source: file, line, column: column === null ? 0 : column })\r\n                  return {\r\n                    file,\r\n                    name,\r\n                    line,\r\n                    column,\r\n                    originalLine,\r\n                    originalColumn,\r\n                    originalName,\r\n                    source: prettifyPath(Path.resolve(source.includes(sourceMapConsumer.sourceRoot) ? Path.resolve(process.cwd(), options.outDir) : process.cwd(), source))\r\n                  }\r\n                })\r\n            )\r\n          const testError = {\r\n            ...error,\r\n            metaStack\r\n          }\r\n          testError.originalStack = makeStack(testError)\r\n          return testError\r\n        })\r\n      )\r\n\r\n    return {\r\n      ...file,\r\n      type: FileType.POST_ANALYZE,\r\n      test: {\r\n        ...file.test,\r\n        errors: errorsWithMetadata\r\n      }\r\n    }\r\n  })\r\n}\r\n","import path from 'path'\r\nimport { Observable } from 'rxjs'\r\nimport { switchMap } from 'rxjs/operators'\r\nimport localRequire from '../utils/localRequire'\r\n\r\nlet imports\r\n\r\nexport default options =>\r\n  switchMap(val =>\r\n    Observable.create(observer => {\r\n      const { port } = options\r\n      if (!imports) imports = localRequire(['koa', 'koa-static', 'koa-mount'])\r\n\r\n      const app = imports.then(([Koa, serve, mount]) => {\r\n        const app = new Koa()\r\n        const epk = new Koa()\r\n        epk.use(serve(path.resolve(__dirname, '..', 'dist')))\r\n        const tests = new Koa()\r\n        tests.use(serve(path.resolve(process.cwd(), '.epk', 'dist')))\r\n        \r\n        app.use(mount('/epk', epk))\r\n        app.use(mount('/tests', tests))\r\n        try {\r\n          return app.listen(port)\r\n        } finally {\r\n          observer.next(val)\r\n        }\r\n      })\r\n\r\n      return _ => app.then(app => app.close())\r\n    })\r\n  )\r\n","import { merge, ConnectableObservable, from, of } from 'rxjs'\r\nimport { map, filter, mergeMap, switchMap, publish, tap, delayWhen } from 'rxjs/operators'\r\n\r\nimport { Options, BUNDLER_TARGET, TARGET, File, TargetRuntimeProvider as TargetRuntimeProviderType } from '../types'\r\nimport Bundler from './bundler'\r\nimport { transformPathToTestUrl } from '../utils/index'\r\nimport TargetRuntimeProvider from './target-runtime-provider'\r\nimport analyze from './analyze'\r\nimport test from './test'\r\nimport postAnalyze from './post-analyze'\r\nimport { isBrowser } from './utils'\r\nimport server from './server'\r\nimport localRequire from '../utils/localRequire'\r\n\r\n\r\nexport default (_options: Options) => {\r\n  // remove undefined values\r\n  Object.keys(_options).forEach(key => _options[key] === undefined && delete _options[key])\r\n\r\n  const target = _options.target || BUNDLER_TARGET.BROWSER\r\n  const options = {\r\n    browsers: ['chrome'],\r\n    target,\r\n    outDir: `.epk/dist/${target}`,\r\n    watch: true,\r\n    cache: true,\r\n    cacheDir: `.epk/cache/${target}`,\r\n    port: undefined,\r\n    minify: false,\r\n    scopeHoist: false,\r\n    logLevel: 0, // 3 = log everything, 2 = log warnings & errors, 1 = log errors\r\n    sourceMaps: true, // Enable or disable sourcemaps, defaults to enabled (minified builds currently always create sourcemaps)\r\n    detailedReport: false,\r\n    throwErrors: true,\r\n    hmr: false,\r\n    // apply options\r\n    ..._options\r\n  }\r\n  let _port\r\n  if (!isBrowser && options.target === BUNDLER_TARGET.BROWSER) {\r\n    _port = localRequire('get-port')\r\n              .then(getPort => getPort({ port: 10485 }))\r\n              .then(port => (options.port = port))\r\n  }\r\n  // @ts-ignore\r\n  return of([\r\n            Bundler(options),\r\n            (!isBrowser && options.target === BUNDLER_TARGET.BROWSER\r\n              ? options.browsers as unknown as TARGET[]\r\n              : [options.target] as unknown as TARGET[])\r\n                .map(target => TargetRuntimeProvider(target, options))\r\n          ])\r\n          // @ts-ignore\r\n          |> (!isBrowser && options.target === BUNDLER_TARGET.BROWSER ? delayWhen(() => from(_port)) : tap())\r\n          // @ts-ignore\r\n          |> (!isBrowser && options.target === BUNDLER_TARGET.BROWSER ? server(options) : tap())\r\n          // @ts-ignore\r\n          |> mergeMap(([ bundler, targetRuntimeProviders ]) =>\r\n            merge(\r\n              // @ts-ignore\r\n              bundler |> filter(({ name }) => name === 'buildStart'),\r\n              // @ts-ignore\r\n              bundler |> filter(({ name }) => name === 'bundled'),\r\n              // @ts-ignore\r\n              merge(...targetRuntimeProviders)\r\n              // @ts-ignore\r\n              |> mergeMap((targetRuntimeProvider: TargetRuntimeProviderType) =>\r\n                // @ts-ignore\r\n                bundler\r\n                // @ts-ignore\r\n                |> filter(({ name }) => name === 'bundled')\r\n                // @ts-ignore\r\n                |> switchMap(({ bundle }) =>\r\n                  // @ts-ignore\r\n                  from(\r\n                    (bundle.isEmpty\r\n                      ? Array.from(bundle.childBundles)\r\n                      : [bundle]))\r\n                    // @ts-ignore\r\n                    |> mergeMap((childBundle: any) => {\r\n                      const { name: path } = childBundle\r\n                      // @ts-ignore\r\n                      const newContextObservable: ConnectableObservable<File> =\r\n                        // @ts-ignore\r\n                        of({\r\n                          target: targetRuntimeProvider.target,\r\n                          name: childBundle.entryAsset.name,\r\n                          path,\r\n                          url: options.target === BUNDLER_TARGET.BROWSER && transformPathToTestUrl(path, options.port)\r\n                        })\r\n                        // @ts-ignore\r\n                        |> publish()\r\n\r\n                      // @ts-ignore\r\n                      const analyzedObservable: ConnectableObservable<File> =\r\n                        // @ts-ignore\r\n                        newContextObservable\r\n                        // @ts-ignore\r\n                        |> analyze(targetRuntimeProvider, options)\r\n                        // @ts-ignore\r\n                        |> publish()\r\n          \r\n                      // @ts-ignore\r\n                      const testedObservable: ConnectableObservable<File> =\r\n                        // @ts-ignore\r\n                        analyzedObservable\r\n                        // @ts-ignore\r\n                        |> filter(({ errors }) => !errors.length)\r\n                        // @ts-ignore\r\n                        |> switchMap(file =>\r\n                          // @ts-ignore\r\n                          from(file.tests)\r\n                          // @ts-ignore\r\n                          |> test(file, targetRuntimeProvider, options))\r\n                        // @ts-ignore\r\n                        |> publish()\r\n\r\n                      // @ts-ignore\r\n                      const postAnalyzeObservable: ConnectableObservable<File> =\r\n                        // @ts-ignore\r\n                        testedObservable\r\n                        // @ts-ignore\r\n                        |> postAnalyze(options, childBundle)\r\n                        // @ts-ignore\r\n                        |> publish()\r\n          \r\n                      const testerObservable =\r\n                        merge(\r\n                          newContextObservable,\r\n                          analyzedObservable,\r\n                          testedObservable,\r\n                          postAnalyzeObservable\r\n                        )\r\n          \r\n                      postAnalyzeObservable.connect()\r\n                      testedObservable.connect()\r\n                      analyzedObservable.connect()\r\n                      newContextObservable.connect()\r\n\r\n                      return testerObservable\r\n                    })\r\n              )\r\n            )\r\n          )\r\n        )\r\n}\r\n","import { isBrowser } from '../core/utils'\r\n\r\nexport const errors = []\r\n\r\nif (isBrowser) {\r\n  window.addEventListener('error', err => errors.push(err))\r\n} else {\r\n  process.on('uncaughtException', err => errors.push(err))\r\n}\r\n\r\n","import { EventEmitter } from 'events'\r\nimport { stringify } from 'flatted/cjs'\r\nimport { isBrowser } from '../core/utils'\r\nimport { File, Test, TestResult, MESSAGE_TYPE, NODE_GLOBAL } from '../types'\r\nimport { errors } from './error'\r\nimport { isObservable } from 'rxjs';\r\n\r\nexport const tests = new Map<string, Function>()\r\n\r\nexport const todo = _ => {}\r\nexport const pass = _ => {}\r\nexport const fail = _ => {}\r\n\r\nexport const test = (desc, func) => {\r\n  if (typeof desc !== 'string') throw new Error('desc has to be a string')\r\n  if (typeof func !== 'function') throw new Error('func has to be a function')\r\n  if (tests.has(desc)) throw new Error(`Found duplicate test description: ${desc}`)\r\n  tests.set(desc, func)\r\n}\r\n\r\nconst initiated = new Promise(resolve => setTimeout(resolve, 0))\r\n\r\nconst emit = (type, data) =>\r\n  isBrowser\r\n    ? window.parent.postMessage({ type, errors, data }, '*')\r\n    : global[NODE_GLOBAL].emit('message', { type, errors, data })\r\n\r\nconst getTests = () =>\r\n  emit(\r\n    MESSAGE_TYPE.GET_TESTS_RESPONSE,\r\n    Array\r\n      .from(tests)\r\n      .map(([description, func]) => ({\r\n        description,\r\n        body: func.toString()\r\n      }))\r\n  )\r\n\r\nconst runTest = async description => {\r\n  // todo: replace by \"isBrowser ? window : require('perf_hooks')\"\r\n  const { performance } = window\r\n  let timeStart, timeEnd, value, error\r\n\r\n  try {\r\n    timeStart = performance.now()\r\n    value = await tests.get(description)()\r\n  } catch (err) {\r\n    error = err\r\n  } finally {\r\n    timeEnd = performance.now()\r\n  }\r\n\r\n  emit(\r\n    MESSAGE_TYPE.RUN_TEST_RESPONSE,\r\n    {\r\n      timeStart,\r\n      timeEnd,\r\n      type:\r\n        isObservable(value) ? 'observable'\r\n        : value instanceof Promise ? 'promise'\r\n        : 'function',\r\n      value: stringify(value),\r\n      errors:\r\n        (error\r\n          ? [error, ...errors]\r\n          : errors).map(err => ({\r\n            name: err.name,\r\n            message: err.message,\r\n            string: err.toString(),\r\n            stack: err.stack\r\n          }))\r\n    }\r\n  )\r\n}\r\n\r\nconst newEvent = ({ data: { type, description } }) =>\r\n    type === MESSAGE_TYPE.GET_TESTS ? getTests()\r\n  : type === MESSAGE_TYPE.RUN_TEST && runTest(description)\r\n\r\nif (isBrowser) {\r\n  window.addEventListener('message', newEvent)\r\n} else {\r\n  const events = global[NODE_GLOBAL] = new EventEmitter()\r\n  events.addListener('message', newEvent)\r\n}\r\n\r\n// const addEventListener =\r\n//   isBrowser\r\n//     ? window.addEventListener\r\n//     : global[NODE_GLOBAL].addListener\r\n\r\n// addEventListener('message', ({ data: { type, description } }) =>\r\n//     type === MESSAGE_TYPE.GET_TESTS ? getTests()\r\n//   : type === MESSAGE_TYPE.RUN_TEST && runTest(description))\r\n","import PowerAssert from 'power-assert'\r\n\r\nexport const assert = PowerAssert.customize({\r\n\r\n})","// export * from './test'\r\n// export * from './assert'\r\n\r\n// parceljs experimental hoisting fix\r\nimport { test } from './test'\r\nimport { assert } from './assert'\r\n\r\nexport {\r\n  test,\r\n  assert\r\n}","var bundleURL = null;\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  // Attempt to find the URL of the current script and use that as the base URL\n  try {\n    throw new Error;\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp):\\/\\/[^)\\n]+/g);\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\n","var getBundleURL = require('./bundle-url').getBundleURL;\n\nfunction loadBundlesLazy(bundles) {\n  if (!Array.isArray(bundles)) {\n    bundles = [bundles]\n  }\n\n  var id = bundles[bundles.length - 1];\n\n  try {\n    return Promise.resolve(require(id));\n  } catch (err) {\n    if (err.code === 'MODULE_NOT_FOUND') {\n      return new LazyPromise(function (resolve, reject) {\n        loadBundles(bundles.slice(0, -1))\n          .then(function () {\n            return require(id);\n          })\n          .then(resolve, reject);\n      });\n    }\n\n    throw err;\n  }\n}\n\nfunction loadBundles(bundles) {\n  return Promise.all(bundles.map(loadBundle));\n}\n\nvar bundleLoaders = {};\nfunction registerBundleLoader(type, loader) {\n  bundleLoaders[type] = loader;\n}\n\nmodule.exports = exports = loadBundlesLazy;\nexports.load = loadBundles;\nexports.register = registerBundleLoader;\n\nvar bundles = {};\nfunction loadBundle(bundle) {\n  var id;\n  if (Array.isArray(bundle)) {\n    id = bundle[1];\n    bundle = bundle[0];\n  }\n\n  if (bundles[bundle]) {\n    return bundles[bundle];\n  }\n\n  var type = (bundle.substring(bundle.lastIndexOf('.') + 1, bundle.length) || bundle).toLowerCase();\n  var bundleLoader = bundleLoaders[type];\n  if (bundleLoader) {\n    return bundles[bundle] = bundleLoader(getBundleURL() + bundle)\n      .then(function (resolved) {\n        if (resolved) {\n          module.bundle.register(id, resolved);\n        }\n\n        return resolved;\n      }).catch(function(e) {\n        delete bundles[bundle];\n        \n        throw e;\n      });\n  }\n}\n\nfunction LazyPromise(executor) {\n  this.executor = executor;\n  this.promise = null;\n}\n\nLazyPromise.prototype.then = function (onSuccess, onError) {\n  if (this.promise === null) this.promise = new Promise(this.executor)\n  return this.promise.then(onSuccess, onError)\n};\n\nLazyPromise.prototype.catch = function (onError) {\n  if (this.promise === null) this.promise = new Promise(this.executor)\n  return this.promise.catch(onError)\n};\n","export * from './core/index'\r\nexport * from './test/index'\r\n\r\nif (!module.parent) import('./cli/index').then(() => {}) // keep the then because parcel lazy-load imports\r\n"]}