{"version":3,"sources":["cli/parser.ts","cli/reporter.ts","cli/index.ts"],"names":["helpMessage","chalk","bold","list","v","split","action","args","program","command","description","option","undefined","_args","commands","find","c","name","help","on","_","console","log","process","argv","some","splice","parse","options","opts","formatTest","error","message","gray","shift","trim","red","map","str","join","formatTests","tests","length","underline","formatAnalyzing","files","analyzingFiles","filter","type","FileType","ANALYZE","formatErrors","reset","rest","formatFileStatus","isFinished","every","finishedTests","erroredTests","hasErrors","successful","format","state","val","clear","progress","grey","file","currentFile","foundFile","Object","assign","push","TEST","test","foundTest","fileIsDone","DONE","watch","target","entryFiles","browsers","subscribe","err","logger"],"mappings":"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","file":"cli.cb149c06.map","sourceRoot":"..\\src","sourcesContent":["import program from 'commander'\r\nimport chalk from 'chalk'\r\n\r\nconst helpMessage = `\r\nRun \\`${chalk.bold('epk help <command>')}\\` for more information on specific commands\r\n`\r\n\r\nconst list = v => v.split(',')\r\n\r\nexport let action, args\r\n\r\nprogram\r\n  .command('serve [input...]')\r\n  .description('starts a development server')\r\n  .option('-d, --out-dir path', 'Output directory')\r\n  .option('-t, --target [target]', 'Set parcel target to [node, browser, electron]', undefined, 'browser')\r\n  .option('-b, --browsers [target]', 'Set parcel target to [chrome, firefox]', list, ['chrome'])\r\n  .action(_args => {\r\n    action = 'serve'\r\n    args = _args\r\n  })\r\n\r\nprogram\r\n  .command('help [command]')\r\n  .description('display help information for a command')\r\n  .action(command =>\r\n    (program\r\n        .commands\r\n        .find(c =>\r\n          c.name() === command) ||\r\n    program).help())\r\n\r\nprogram.on('--help', _ => console.log(helpMessage))\r\n\r\n// Make serve the default command except for --help\r\nconst _args = process.argv\r\nif (_args[2] === '--help' || _args[2] === '-h') _args[2] = 'help'\r\nif (!_args[2] || !program.commands.some(c => c.name() === _args[2])) {\r\n  _args.splice(2, 0, 'serve')\r\n}\r\n\r\nexport const command = program.parse(_args)\r\nexport const options = program.opts()\r\n","import { tap, scan } from 'rxjs/operators'\r\nimport { Context, File, Test, FileType } from '../types'\r\nimport chalk from 'chalk'\r\nimport logger from './logger'\r\nimport { prettifyPath } from '../utils'\r\n\r\n  // |> tap(({ entryFiles  }: Context) => {\r\n  //   logger.clear()\r\n  //   logger.progress(`\\n${chalk.grey(`Building ${entryFiles.map(prettifyPath).join(', ')}`)}`)\r\n  // })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst formatTest = ({ description, error: { message } }: Test) => `\\\r\n  ${description}\r\n   ${chalk.gray(\r\n   message\r\n    .split('\\n')\r\n    .shift()\r\n    .trim())}\r\n\r\n${chalk.red(\r\n   message\r\n    .split('\\n')\r\n    .splice(2)\r\n    .map(str => `  ${str}`)\r\n    .join('\\n'))}`\r\n \r\n \r\nconst formatTests = ({ name, tests = [] }: File) =>\r\n  tests.length\r\n  ? `\\\r\n ${chalk.underline(prettifyPath(name))}\r\n\r\n${tests\r\n    .map(formatTest)\r\n    .join('\\n')}`\r\n  : ''\r\n// buildTime, analyzeTime, testTime,\r\n// ${chalk.green(`Built in ${buildTime}.`)}\r\n// ${chalk.green(`Analyzed in ${analyzeTime}.`)}\r\n// ${chalk.green(`Tested in ${testTime}.`)}\r\n\r\nconst formatAnalyzing = (files: File[]) => {\r\n  const analyzingFiles = files.filter(({ type }) => FileType.ANALYZE === type)\r\n  return analyzingFiles.length\r\n    ? `Analyzing ${\r\n      analyzingFiles\r\n        .map(({ name }) => prettifyPath(name))\r\n        .join(', ')\r\n      }\\n\\n`\r\n    : ''\r\n}\r\n\r\nconst formatErrors = (files: File[]) => `\\\r\n${chalk.reset.red(`Errors:`)}\r\n${chalk.reset(\r\n  files\r\n    .map(({ tests, ...rest }) => ({\r\n      tests: tests.filter(({ error }) => !!error),\r\n      ...rest\r\n    }))\r\n    .map(formatTests)\r\n    .join('\\n'))}`\r\n\r\nconst formatFileStatus = (files: File[]) => `\r\n${chalk.reset(`Files:`)}\r\n${files\r\n  .map(({ name, tests }) => {\r\n    const isFinished = tests.every(({ type }) => !!type)\r\n    const finishedTests = tests.filter(({ type }) => type)\r\n    const erroredTests = tests.filter(({ error }) => error)\r\n    const hasErrors = erroredTests.length\r\n    const successful = hasErrors ? `(${finishedTests.length - erroredTests.length})` : ''\r\n    return chalk.reset[\r\n      !isFinished ? 'gray'\r\n      : hasErrors ? 'red'\r\n      : 'green'](`${prettifyPath(name)} ${finishedTests.length}${successful}/${tests.length}`)\r\n  })\r\n  .map(str => ` ${str}`)\r\n  .join('\\n')}`\r\n\r\n\r\nconst format = (files: File[]) => `\r\n${formatAnalyzing(files)}\\\r\n${formatErrors(files)}\\\r\n${formatFileStatus(files)}`\r\n\r\nexport default\r\n  options =>\r\n    scan((state, val: any) => { // File | Context\r\n      if (val.name === 'buildStart') {\r\n        logger.clear()\r\n        logger.progress(`\\n${chalk.grey(`Bundling...`)}`)\r\n        return { files: [] }\r\n      } else if (val.name === 'bundled') {\r\n        logger.progress(`\\n${chalk.grey(`Bundled`)}`)\r\n        return state\r\n      }\r\n      const file: File = val\r\n      const { files }: { files: File[] } = state\r\n\r\n      const foundFile = files.find(({ name }) => val.name === name)\r\n      const currentFile = foundFile || file\r\n      if (file.type === FileType.ANALYZE) {\r\n\r\n        const foundFile = files.find(({ name }) => val.name === name)\r\n        if (!foundFile) files.push(file)\r\n        else Object.assign(foundFile, file)\r\n\r\n      } else if(file.type === FileType.TEST) {\r\n\r\n        if (!currentFile.tests) currentFile.tests = []\r\n\r\n        const test: Test = file.test\r\n        const foundTest = currentFile.tests.find(({ description }) => test.description === description)\r\n\r\n        if (foundTest) Object.assign(foundTest, test)\r\n        else if (!foundTest) currentFile.tests.push(test)\r\n\r\n        const fileIsDone =\r\n          currentFile.tests.every(test => 'value' in test)\r\n\r\n        currentFile.type = fileIsDone ? FileType.DONE : FileType.TEST\r\n      }\r\n\r\n      const isFinished =\r\n        files.length &&\r\n        files.every(({ type }) =>\r\n          FileType.DONE === type)\r\n\r\n      logger[isFinished ? 'success' : 'progress'](format(files))\r\n      \r\n      return state\r\n    }, {})\r\n","import epk from '../core/index'\r\nimport { action, options, args } from './parser'\r\nimport cliReporter from './reporter'\r\nimport logger from './logger'\r\n\r\n// @ts-ignore\r\ncliReporter({})(epk({\r\n  watch: action === 'serve',\r\n  target: options.target,\r\n  entryFiles: args,\r\n  browsers: options.browsers\r\n})).subscribe(() => {}, err => logger.error(err))\r\n"]}