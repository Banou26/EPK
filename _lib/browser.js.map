{"version":3,"file":"browser.js","sources":["../src/runtime/assert.ts","../src/types.ts","../src/utils/flatted.ts","../src/runtime/utils.ts","../src/runtime/test.ts"],"sourcesContent":["import PowerAssert from 'power-assert'\n\nexport default PowerAssert.customize({\n\n})\n","\nimport { Observable, Subject } from 'rxjs'\nimport { BuildSuccessEvent, BuildFailureEvent, BuildEvent, BundleGraph  } from '@parcel/types'\nimport { CoverageEntry, ElementHandle } from 'puppeteer'\n\n// Subject that is sent data from the tester to the runtime\nexport const EPK_SUBJECT = '__EPK__SUBJECT__'\n// Subject that is sent data from the runtime to the tester\nexport const EPK_RUNTIME_SUBJECT = '__EPK__RUNTIME__SUBJECT__'\nexport const EPK_FUNCTION_PROPERTY_PLACEHOLDER = '__EPK__FUNCTION__PLACEHOLDER__'\n\nexport interface Bundler extends Observable<BuildEvent> {}\n\n// Going to change when Parcel 2 get released\nexport interface Options {\n  outDir: string\n  entryFiles: string | string[]\n  target: TARGET\n  watch?: boolean\n  browsers?: BROWSER[]\n  port?: number\n}\n\nexport interface installImportOptions {\n  path: string\n  dev: boolean\n}\n\nexport interface TestBundle {\n  /**\n   * Parcel bundle\n   */\n  parcelBundle: BundleGraph\n  /**\n   * Entry files\n   */\n  entryFiles: string[]\n  /**\n   * Time at which the bundling started(high precision timestamp)\n   */\n  buildStartTime: number\n  /**\n   * Time at which the bundling ended(high precision timestamp)\n   */\n  buildEndTime: number\n}\n\n/**\n * Representation of a file\n */\nexport interface TestFile {\n  /**\n   * Bundle\n   */\n  bundle: TestBundle\n  /**\n   * Hashes of all the parcel assets\n   */\n  hashes: Set<string>\n  /**\n   * Path of the source test file\n   */\n  name: string\n  /**\n   * Prettified path of the source test file\n   */\n  displayName: string\n  /**\n   * Path of the bundled test file\n   */\n  path: string\n  /**\n   * Target\n   */\n  target: TARGET | RUNTIME\n  /**\n   * Url by which browsers can access the test file\n   * Not defined if target is node\n   */\n  url?: string\n  /**\n   * Array of analyzed tests\n   */\n  tests?: Test[] | undefined\n  /**\n   * Boolean that equals true if all the tests ran\n   */\n  testsDone?: boolean\n  /**\n   * Array of logs logged without running the tests\n   */\n  logs?: Log[]\n  /**\n   * Time at which the test preprocessing started(high precision timestamp)\n   */\n  preprocessingStart?: number\n  /**\n   * Time at which the test preprocessing ended(high precision timestamp)\n   */\n  preprocessingEnd?: number\n}\n\nexport interface TestFileRuntimeAggregation {\n/**\n   * Bundle\n   */\n  bundle: TestBundle\n  /**\n   * Hashes of all the parcel assets\n   */\n  hashes: Set<string>\n  /**\n   * Path of the source test file\n   */\n  name: string\n  /**\n   * Prettified path of the source test file\n   */\n  displayName: string\n  /**\n   * Path of the bundled test file\n   */\n  path: string\n  /**\n   * Array of analyzed tests\n   */\n  tests?: Test[] | undefined\n  /**\n   * Url by which browsers can access the test file\n   * Not defined if target is node\n   */\n  url?: string\n  /**\n   * Map of tested file per runtime\n   */\n  testFiles: Map<RUNTIME, TestFile>\n}\n\n/**\n * Representation of a test\n */\nexport interface Test {\n  /**\n   * Description of the test\n   */\n  description: string\n  /**\n   * Body of the test (Stringified function)\n   */\n  body: string\n  /**\n   * String type of test: Function | Promise<any> | Observable<any>\n   */\n\n  //** Properties from the test when executed\n  \n  type?: string\n  /**\n   * Flatted(https://github.com/WebReflection/flatted) value returned by the test\n   */\n  value?: any\n  /**\n   * Array of logs logged while running the test\n   */\n  logs?: Log[]\n  /**\n   * Time at which the test started(high precision timestamp)\n   */\n  executionStart?: number\n  /**\n   * Time at which the test ended(high precision timestamp)\n   */\n  executionEnd?: number\n  /**\n   * Code coverage of the test\n   * Can be undefined if environment doesn't support native Coverage (in browser)\n   * todo: think of using instanbul for in browser coverage when parcel v2 will be released\n   */\n  coverage?: CoverageEntry\n\n  //** Properties from the test when analyzed\n  /**\n   * Percent of code run by the test from the file\n   */\n  codeCoverage?: number\n  /**\n   * Time at which the test analyze started(high precision timestamp)\n   */\n  analyzeStart?: number\n  /**\n   * Time at which the test analyze ended(high precision timestamp)\n   */\n  analyzeEnd?: number\n}\n\nexport interface Analyze {\n\n}\n\nexport enum MESSAGE {\n  GET_TESTS,\n  GET_TESTS_RESPONSE,\n  \n  RUN_TESTS,\n  RUN_TESTS_RESPONSE,\n\n  RUN_TEST,\n  RUN_TEST_RESPONSE\n}\n\nconst messageMap = new Map<MESSAGE, MESSAGE>([\n  [MESSAGE.GET_TESTS, MESSAGE.GET_TESTS_RESPONSE],\n  [MESSAGE.RUN_TESTS, MESSAGE.RUN_TESTS_RESPONSE],\n  [MESSAGE.RUN_TEST, MESSAGE.RUN_TEST_RESPONSE]\n])\n\nexport const getMessageResponse = message => messageMap.get(message)\n\n// https://github.com/parcel-bundler/parcel/issues/2574#issuecomment-459694774\nexport enum PARCEL_REPORTER_EVENT {\n  BUILD_START = 'buildStart',\n  BUILD_PROGRESS = 'buildProgress',\n  BUILD_SUCCESS = 'buildSuccess',\n  BUILD_FAILURE = 'buildFailure',\n  LOG = 'log'\n}\n\nexport enum REPORTER_EVENT {\n  BUILD_START = 'buildStart',\n  BUILD_PROGRESS = 'buildProgress',\n  BUILD_SUCCESS = 'buildSuccess',\n  BUILD_FAILURE = 'buildFailure',\n  LOG = 'log',\n  PORT_SEARCH = 'portSearch',\n  PORT_FOUND = 'portFound',\n  WEB_SERVER_START = 'webServerStart',\n  WEB_SERVER_READY = 'webServerReady',\n  STATE = 'state'\n}\n\nexport enum TARGET {\n  BROWSER = 'browser',\n  NODE = 'node'\n}\n\nexport enum BROWSER {\n  FIREFOX = 'firefox',\n  FIREFOX_NIGHTLY = 'firefoxNightly',\n  CHROME = 'chrome',\n  CHROME_CANARY = 'chromeCanary'\n}\n\nexport enum RUNTIME {\n  FIREFOX = 'firefox',\n  FIREFOX_NIGHTLY = 'firefoxNightly',\n  CHROME = 'chrome',\n  CHROME_CANARY = 'chromeCanary',\n  NODE = 'node'\n}\n\nexport interface RuntimeProvider extends Observable<Runtime> {\n  runtimeName: RUNTIME\n}\n\nexport interface Runtime extends Observable<any> {\n  loadFile(file: TestFile): Promise<ElementHandle>\n  inMessages: Subject<any>\n  outMessages: Subject<any>\n}\n\nexport enum LOG {\n  log = 'log',\n  info = 'info',\n  warn = 'warn',\n  error = 'error',\n  uncaughtError = 'uncaughtError'\n}\n\nexport interface MetaStack {\n  file: string\n  source: string\n  name: string\n  line: number\n  column: number\n  originalSource: string\n  originalName: string\n  originalLine: number\n  originalColumn: number\n}\n\nexport interface Error {\n  message: string\n  name: string\n  stack: string\n  string: string\n  metaStack?: MetaStack[]\n  originalStack?: string\n}\n\nexport interface Log {\n  type: LOG\n  arguments?: any[]\n  error?: Error\n}\n","import { stringify as _stringify, parse as _parse } from 'flatted'\n\nimport { EPK_FUNCTION_PROPERTY_PLACEHOLDER } from '../types.ts'\n\nexport const stringify = data =>\n  _stringify(\n    data,\n    (key, val) =>\n      typeof val === 'function'\n        ? {\n          [EPK_FUNCTION_PROPERTY_PLACEHOLDER]: val.name\n        }\n        : val)\n\nexport const parse = data =>\n  _parse(\n    data,\n    (_, val) =>\n      val?.[EPK_FUNCTION_PROPERTY_PLACEHOLDER]\n        // Way to dynamically set a function name (to render via `util.inspect` from the reporter)\n        ? {\n          [val[EPK_FUNCTION_PROPERTY_PLACEHOLDER]]: () => {}\n        }[val[EPK_FUNCTION_PROPERTY_PLACEHOLDER]]\n        : val)","import { Subject } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport { parse, stringify } from '../utils/flatted.ts'\n\nimport { EPK_SUBJECT, EPK_RUNTIME_SUBJECT } from '../types.ts'\n\nconst subject = globalThis[EPK_SUBJECT] = new Subject()\nexport const inMessages =\n  // @ts-ignore\n  subject\n  // @ts-ignore\n  |> map(parse)\n\nconst sendMessage = globalThis[EPK_RUNTIME_SUBJECT]\nexport const outMessages = new Subject()\n// @ts-ignore\noutMessages.subscribe(value =>\n  sendMessage(stringify(value)))","import { isObservable } from 'rxjs'\nimport { toArray, filter } from 'rxjs/operators'\n\nimport { MESSAGE } from '../types.ts'\n\nimport { inMessages, outMessages } from './utils.ts'\n\nexport const tests = new Map<string, Function>()\n\nexport const todo = _ => {}\nexport const pass = _ => {}\nexport const fail = _ => {}\n\nexport const test = (desc, func) => {\n  if (typeof desc !== 'string') throw new TypeError('desc has to be a string')\n  if (typeof func !== 'function') throw new TypeError('func has to be a function')\n  if (tests.has(desc)) throw new Error(`Found duplicate test description: ${desc}`)\n  tests.set(desc, func)\n}\n\nconst getTests = () =>\n  outMessages.next({\n    type: MESSAGE.GET_TESTS_RESPONSE,\n    tests:\n      Array\n        .from(tests)\n        .map(([description, func]) => ({\n          description,\n          body: func.toString()\n        }))\n  })\n\nconst runTest = async ({ description }) => {\n  // Empty the logs\n  // logs.splice(0, logs.length)\n\n  // todo: replace by \"isBrowser ? window : require('perf_hooks')\"\n  const { performance } = window\n  let executionStart, executionEnd, value\n\n  try {\n    executionStart = performance.now()\n    value = await tests.get(description)()\n    if (isObservable(value)) {\n      // @ts-ignore\n      value = await (value |> toArray()).toPromise()\n    }\n  } finally {\n    executionEnd = performance.now()\n\n    setTimeout(() =>\n      outMessages.next({\n        type: MESSAGE.RUN_TEST_RESPONSE,\n        test: {\n          executionStart,\n          executionEnd,\n          type:\n            isObservable(value) ? 'observable'\n              : value instanceof Promise ? 'promise'\n              : 'function',\n          value\n        }\n      }), 0)\n  }\n}\n\nconst messagesMap = new Map<MESSAGE, (...args) => any>([\n  [MESSAGE.GET_TESTS, getTests],\n  [MESSAGE.RUN_TEST, runTest]\n])\n\nconst messages =\n  inMessages\n  // @ts-ignore\n  |> filter(({ type }) => type in MESSAGE)\n\n// @ts-ignore\nmessages.subscribe(({ type, ...rest }) =>\n  messagesMap.get(type)({ type, ...rest }))\n"],"names":["PowerAssert","customize","EPK_SUBJECT","EPK_RUNTIME_SUBJECT","EPK_FUNCTION_PROPERTY_PLACEHOLDER","MESSAGE","messageMap","Map","GET_TESTS","GET_TESTS_RESPONSE","RUN_TESTS","RUN_TESTS_RESPONSE","RUN_TEST","RUN_TEST_RESPONSE","PARCEL_REPORTER_EVENT","REPORTER_EVENT","TARGET","BROWSER","RUNTIME","LOG","stringify","data","_stringify","key","val","name","parse","_parse","_","subject","globalThis","Subject","inMessages","map","sendMessage","outMessages","subscribe","value","tests","todo","pass","fail","test","desc","func","TypeError","has","Error","set","getTests","next","type","Array","from","description","body","toString","runTest","performance","window","executionStart","executionEnd","now","get","isObservable","toArray","toPromise","setTimeout","Promise","messagesMap","messages","filter","rest"],"mappings":"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"}